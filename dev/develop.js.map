{"version":3,"sources":["webpack://develop/webpack/universalModuleDefinition","webpack://develop/webpack/bootstrap","webpack://develop/wrapper.js","webpack://develop/arrayUtils.js","webpack://develop/callableReferenceUtils.js","webpack://develop/misc.js","webpack://develop/polyfills.js","webpack://develop/core.js","webpack://develop/markerFunctions.js","webpack://develop/conversions.js","webpack://develop/long.js","webpack://develop/rtti.js","webpack://develop/arrayUtils.kt","webpack://develop/./kotlin-dce/runtime/Enum.kt","webpack://develop/primitiveCompanionObjects.kt","webpack://develop/./kotlin-dce/generated/_Arrays.kt","webpack://develop/./kotlin-dce/generated/_Ranges.kt","webpack://develop/./kotlin-dce/kotlin/UByte.kt","webpack://develop/./kotlin-dce/kotlin/UInt.kt","webpack://develop/./kotlin-dce/kotlin/UShort.kt","webpack://develop/Ranges.kt","webpack://develop/./kotlin-dce/collections/Collections.kt","webpack://develop/./kotlin-dce/collections/Maps.kt","webpack://develop/./kotlin-dce/collections/Sets.kt","webpack://develop/./kotlin-dce/text/StringNumberConversions.kt","webpack://develop/./kotlin-dce/kotlin/UnsignedUtils.kt","webpack://develop/./kotlin-dce/collections/Sequences.kt","webpack://develop/./kotlin-dce/generated/_Collections.kt","webpack://develop/./kotlin-dce/collections/Iterables.kt","webpack://develop/./kotlin-dce/generated/_Sequences.kt","webpack://develop/./kotlin-dce/util/Preconditions.kt","webpack://develop/./kotlin-dce/generated/_Strings.kt","webpack://develop/./kotlin-dce/kotlin/text/string.kt","webpack://develop/./kotlin-dce/generated/_UArrays.kt","webpack://develop/Iterators.kt","webpack://develop/ProgressionIterators.kt","webpack://develop/Progressions.kt","webpack://develop/Collections.kt","webpack://develop/Range.kt","webpack://develop/Unit.kt","webpack://develop/./kotlin-dce/internal/progressionUtil.kt","webpack://develop/./kotlin-dce/kotlin/builtins.kt","webpack://develop/./kotlin-dce/kotlin/coroutines/CoroutineImpl.kt","webpack://develop/./kotlin-dce/util/Standard.kt","webpack://develop/./kotlin-dce/util/Result.kt","webpack://develop/./kotlin-dce/coroutines/Continuation.kt","webpack://develop/./kotlin-dce/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://develop/./kotlin-dce/kotlin/kotlin.kt","webpack://develop/./kotlin-dce/kotlin/text/numberConversions_js-v1.kt","webpack://develop/./kotlin-dce/generated/_ArraysJs.kt","webpack://develop/./kotlin-dce/generated/_CollectionsJs.kt","webpack://develop/./kotlin-dce/kotlin/collections.kt","webpack://develop/./kotlin-dce/kotlin/collections/AbstractMutableCollection.kt","webpack://develop/./kotlin-dce/kotlin/collections/AbstractMutableList.kt","webpack://develop/./kotlin-dce/kotlin/collections/AbstractMutableMap.kt","webpack://develop/./kotlin-dce/kotlin/collections/AbstractMutableSet.kt","webpack://develop/./kotlin-dce/kotlin/collections/ArrayList.kt","webpack://develop/./kotlin-dce/kotlin/collections/ArraySorting.kt","webpack://develop/./kotlin-dce/kotlin/collections/EqualityComparator.kt","webpack://develop/./kotlin-dce/kotlin/collections/HashMap.kt","webpack://develop/./kotlin-dce/kotlin/collections/HashSet.kt","webpack://develop/./kotlin-dce/kotlin/collections/InternalHashCodeMap.kt","webpack://develop/./kotlin-dce/kotlin/collections/InternalStringMap.kt","webpack://develop/./kotlin-dce/kotlin/collections/LinkedHashMap.kt","webpack://develop/./kotlin-dce/kotlin/collections/LinkedHashSet.kt","webpack://develop/./kotlin-dce/kotlin/console.kt","webpack://develop/./kotlin-dce/kotlin/coroutines/SafeContinuationJs.kt","webpack://develop/./kotlin-dce/kotlin/exceptionUtils.kt","webpack://develop/./kotlin-dce/kotlin/exceptions.kt","webpack://develop/./kotlin-dce/kotlin/json.kt","webpack://develop/./kotlin-dce/kotlin/math.kt","webpack://develop/./kotlin-dce/kotlin/numbers_js-v1.kt","webpack://develop/./kotlin-dce/kotlin/numbers.kt","webpack://develop/./kotlin-dce/kotlin/random/PlatformRandom.kt","webpack://develop/./kotlin-dce/kotlin/reflect/JsClass.kt","webpack://develop/./kotlin-dce/kotlin/reflect/KClassImpl.kt","webpack://develop/./kotlin-dce/kotlin/collections/InternalMap.kt","webpack://develop/./kotlin-dce/kotlin/jsOperators.kt","webpack://develop/./kotlin-dce/kotlin/reflect/primitives.kt","webpack://develop/./kotlin-dce/kotlin/reflect/reflection.kt","webpack://develop/./kotlin-dce/kotlin/regexp.kt","webpack://develop/./kotlin-dce/kotlin/text/StringBuilderJs.kt","webpack://develop/./kotlin-dce/kotlin/text/char.kt","webpack://develop/./kotlin-dce/kotlin/text/numberConversions.kt","webpack://develop/./kotlin-dce/kotlin/text/regex.kt","webpack://develop/./kotlin-dce/generated/_ComparisonsJs.kt","webpack://develop/./kotlin-dce/text/Strings.kt","webpack://develop/./kotlin-dce/kotlin/Comparator.kt","webpack://develop/./kotlin-dce/kotlin/text/stringsCode.kt","webpack://develop/./kotlin-dce/kotlin/time/DurationUnit.kt","webpack://develop/./kotlin-dce/kotlin/time/MonoTimeSource.kt","webpack://develop/./kotlin-dce/kotlin/time/formatToDecimals.kt","webpack://develop/./kotlin-dce/collections/AbstractCollection.kt","webpack://develop/./kotlin-dce/collections/AbstractList.kt","webpack://develop/./kotlin-dce/collections/AbstractMap.kt","webpack://develop/./kotlin-dce/collections/AbstractSet.kt","webpack://develop/./kotlin-dce/collections/IndexedValue.kt","webpack://develop/./kotlin-dce/collections/MapWithDefault.kt","webpack://develop/./kotlin-dce/collections/MutableCollections.kt","webpack://develop/./kotlin-dce/collections/SequenceBuilder.kt","webpack://develop/./kotlin-dce/comparisons/Comparisons.kt","webpack://develop/./kotlin-dce/coroutines/ContinuationInterceptor.kt","webpack://develop/./kotlin-dce/coroutines/CoroutineContext.kt","webpack://develop/./kotlin-dce/coroutines/CoroutineContextImpl.kt","webpack://develop/./kotlin-dce/coroutines/intrinsics/Intrinsics.kt","webpack://develop/./kotlin-dce/random/Random.kt","webpack://develop/./kotlin-dce/random/XorWowRandom.kt","webpack://develop/./kotlin-dce/ranges/Ranges.kt","webpack://develop/./kotlin-dce/text/Appendable.kt","webpack://develop/./kotlin-dce/text/Char.kt","webpack://develop/./kotlin-dce/text/Indent.kt","webpack://develop/./kotlin-dce/text/regex/MatchResult.kt","webpack://develop/./kotlin-dce/time/Duration.kt","webpack://develop/./kotlin-dce/time/DurationUnit.kt","webpack://develop/./kotlin-dce/time/TimeSource.kt","webpack://develop/./kotlin-dce/text/StringBuilder.kt","webpack://develop/./kotlin-dce/time/TimeSources.kt","webpack://develop/./kotlin-dce/util/Lazy.kt","webpack://develop/./kotlin-dce/util/Tuples.kt","webpack://develop/./kotlin-dce/kotlin/UByteArray.kt","webpack://develop/./kotlin-dce/kotlin/ULong.kt","webpack://develop/./kotlin-dce/experimental/bitwiseOperations.kt","webpack://develop/./kotlin-dce/kotlin/UIntArray.kt","webpack://develop/./kotlin-dce/kotlin/UIntRange.kt","webpack://develop/./kotlin-dce/kotlin/UIterators.kt","webpack://develop/./kotlin-dce/kotlin/ULongArray.kt","webpack://develop/./kotlin-dce/kotlin/ULongRange.kt","webpack://develop/./kotlin-dce/kotlin/UProgressionUtil.kt","webpack://develop/./kotlin-dce/kotlin/UShortArray.kt","webpack://develop/./kotlin-dce/generated/_Maps.kt","webpack://develop/./kotlin-dce/generated/_Sets.kt","webpack://develop/./kotlin-dce/kotlin/collections/ArraysJs.kt","webpack://develop/./kotlin-dce/kotlin/currentBeMisc.kt","webpack://develop/./kotlin-dce/collections/Arrays.kt","webpack://develop/./kotlin-dce/kotlin/UStrings.kt","webpack://develop/./kotlin-dce/kotlin/MathH.kt","webpack://develop/./kotlin-dce/kotlin/coroutines/js/internal/EmptyContinuation.kt","webpack://develop/./kotlin-dce/kotlin/text/utf8Encoding.kt","webpack://develop/coroutines.kt","webpack://develop/coroutinesIntrinsics.kt","webpack://develop/CoroutinesLibrary.kt","webpack://develop/Intrinsics.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/ArrayDeque.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/Array2.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/ArrayList.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/CaseInsensitiveStringMap.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/CopyOnWriteFrozenMap.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/Deque.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/GenericSubList.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/IntMap.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/internal/internal.kt","webpack://develop/./kotlin-dce/util/HashCode.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/ListReader.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/Pool.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/PriorityQueue.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/Queue.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/RingBuffer.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/Stack.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_Delegates.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_Extensions.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_GenericSort.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/fakemutable/FakeMutable.kt","webpack://develop/../../../../../kds/src/jsMain/kotlin/com/soywiz/kds/atomic/KdsAtomicRef.kt","webpack://develop/../../../../../kds/src/jsMain/kotlin/com/soywiz/kds/Js.kt","webpack://develop/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Bits.kt","webpack://develop/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/KmemGC.kt","webpack://develop/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ArrayFill.kt","webpack://develop/../../../../../kmem/src/jsMain/kotlin/com/soywiz/kmem/ArrayFillJs.kt","webpack://develop/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Arrays.kt","webpack://develop/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Buffer.kt","webpack://develop/../../../../../kmem/src/jsMain/kotlin/com/soywiz/kmem/BufferJs.kt","webpack://develop/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ByteArrayBuilder.kt","webpack://develop/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ByteArrayReadWrite.kt","webpack://develop/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Numbers.kt","webpack://develop/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/FBuffer.kt","webpack://develop/../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ArrayCopy.kt","webpack://develop/../../../../../kmem/src/jsMain/kotlin/com/soywiz/kmem/KmemGCJs.kt","webpack://develop/../../../../../common/src/Delay.kt","webpack://develop/../../../../../common/src/EventLoop.common.kt","webpack://develop/../../../../../common/src/internal/LockFreeTaskQueue.kt","webpack://develop/../../../../../js/src/JSDispatcher.kt","webpack://develop/../../../../../common/src/AbstractCoroutine.kt","webpack://develop/../../../../../common/src/Builders.common.kt","webpack://develop/../../../../../common/src/CancellableContinuation.kt","webpack://develop/../../../../../common/src/CancellableContinuationImpl.kt","webpack://develop/../../../../../src/commonMain/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","webpack://develop/../../../../../common/src/CompletableDeferred.kt","webpack://develop/../../../../../common/src/CompletedExceptionally.kt","webpack://develop/../../../../../common/src/CoroutineDispatcher.kt","webpack://develop/../../../../../common/src/CompletionHandler.common.kt","webpack://develop/../../../../../common/src/CoroutineExceptionHandler.kt","webpack://develop/../../../../../common/src/CoroutineName.kt","webpack://develop/../../../../../common/src/CoroutineStart.kt","webpack://develop/../../../../../common/src/Job.kt","webpack://develop/../../../../../common/src/JobSupport.kt","webpack://develop/../../../../../js/src/internal/LinkedList.kt","webpack://develop/../../../../../common/src/NonCancellable.kt","webpack://develop/../../../../../common/src/Supervisor.kt","webpack://develop/../../../../../common/src/Timeout.kt","webpack://develop/../../../../../common/src/Yield.kt","webpack://develop/../../../../../common/src/channels/AbstractChannel.kt","webpack://develop/../../../../../common/src/MainCoroutineDispatcher.kt","webpack://develop/../../../../../common/src/channels/ArrayBroadcastChannel.kt","webpack://develop/../../../../../common/src/channels/ArrayChannel.kt","webpack://develop/../../../../../common/src/channels/Channel.kt","webpack://develop/../../../../../common/src/internal/InlineList.kt","webpack://develop/../../../../../common/src/channels/Broadcast.kt","webpack://develop/../../../../../common/src/channels/ChannelCoroutine.kt","webpack://develop/../../../../../common/src/channels/Channels.common.kt","webpack://develop/../../../../../common/src/channels/ConflatedBroadcastChannel.kt","webpack://develop/../../../../../common/src/channels/ConflatedChannel.kt","webpack://develop/../../../../../common/src/channels/Produce.kt","webpack://develop/../../../../../common/src/channels/RendezvousChannel.kt","webpack://develop/../../../../../common/src/flow/Builders.kt","webpack://develop/../../../../../common/src/channels/LinkedListChannel.kt","webpack://develop/../../../../../common/src/flow/internal/SafeCollector.common.kt","webpack://develop/../../../../../common/src/internal/ThreadSafeHeap.kt","webpack://develop/../../../../../common/src/selects/Select.kt","webpack://develop/../../../../../common/src/sync/Semaphore.kt","webpack://develop/../../../../../common/src/flow/Channels.kt","webpack://develop/../../../../../common/src/flow/internal/Merge.kt","webpack://develop/../../../../../common/src/flow/terminal/Collect.kt","webpack://develop/../../../../../common/src/internal/ConcurrentLinkedList.kt","webpack://develop/../../../../../common/src/internal/DispatchedContinuation.kt","webpack://develop/../../../../../common/src/internal/DispatchedTask.kt","webpack://develop/../../../../../common/src/internal/Scopes.kt","webpack://develop/../../../../../common/src/intrinsics/Undispatched.kt","webpack://develop/../../../../../common/src/flow/operators/Zip.kt","webpack://develop/../../../../../common/src/flow/terminal/Collection.kt","webpack://develop/../../../../../common/src/flow/terminal/Reduce.kt","webpack://develop/../../../../../common/src/internal/ArrayQueue.kt","webpack://develop/../../../../../common/src/internal/Atomic.kt","webpack://develop/../../../../../common/src/internal/SystemProps.common.kt","webpack://develop/../../../../../js/src/internal/Synchronized.kt","webpack://develop/../../../../../common/src/intrinsics/Cancellable.kt","webpack://develop/../../../../../js/src/Runnable.kt","webpack://develop/../../../../../common/src/sync/Mutex.kt","webpack://develop/../../../../../js/src/CompletionHandler.kt","webpack://develop/../../../../../js/src/CoroutineContext.kt","webpack://develop/./kotlin-dce/kotlin/jsTypeOf.kt","webpack://develop/../../../../../js/src/Debug.kt","webpack://develop/../../../../../js/src/Dispatchers.kt","webpack://develop/../../../../../js/src/EventLoop.kt","webpack://develop/../../../../../js/src/Window.kt","webpack://develop/../../../../../js/src/flow/internal/SafeCollector.kt","webpack://develop/../../../../../common/src/CoroutineScope.kt","webpack://develop/../../../../../js/src/internal/Concurrent.kt","webpack://develop/../../../../../js/src/internal/CopyOnWriteList.kt","webpack://develop/../../../../../js/src/CoroutineExceptionHandlerImpl.kt","webpack://develop/../../../../../js/src/Promise.kt","webpack://develop/../../../../../js/src/flow/internal/FlowExceptions.kt","webpack://develop/../../../../../js/src/internal/StackTraceRecovery.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeSpan.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/deflate/Deflate.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/lzma/Lzma.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/lzma/SevenZip.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/zip/Zip.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/concurrent/atomic/KorAtomic.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/Vfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/IsoVfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/stream/SyncStream.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/AsyncByteArrayDeque.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/AsyncCloseable.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/AsyncExt.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/AsyncQueue.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/ChannelExt.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/Signal.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/runBlockingNoSuspensions.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/CompressionMethod.kt","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/iterators/_FastArrayIterators.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/util/BitReader.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/deflate/GZIP.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/deflate/ZLib.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/util/Huffman.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/compression/util/SlidingWindow.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/dynamic/KDynamic.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/dynamic/mapper/ObjectMapper.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/PathInfo.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/VfsFile.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/JailVfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/LocalVfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/Exceptions.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/MapLikeStorageVfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/MemoryVfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/MountableVfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/NodeVfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/UniversalVfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/UrlVfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/file/std/ZipVfs.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/internal/BytesExt.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/internal/TempBytes.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/ThreadLocal.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/Charset.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/Closeable.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/StringExt.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/AsyncSocketFactory.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/MimeType.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/QueryString.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/URL.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/http/Http.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/http/HttpClient.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/net/http/HttpServer.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/serialization/json/Json.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/StrReader.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/Indenter.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/serialization/xml/Xml.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/stream/AsyncStream.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/stream/FastByteArrayInputStream.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/ByteArrayExt.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/CharExt.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/ExpectException.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/NumberExt.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/NumberParser.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/OS.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/Once.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/RangeExt.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/RedirectField.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/StringExt.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/checksum/Adler32.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/checksum/CRC32.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/checksum/SimpleChecksum.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/encoding/Base64.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/encoding/Hex.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/util/i18n/Language.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/KorioLocalStorageJsVfs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/KorioNativeJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/KorioNativeJsNodeJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/compression/deflate/DeflateJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/concurrent/atomic/KorAtomicJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/dynamic/DynamicInternal.kt","webpack://develop/./kotlin-dce/org.w3c/org.w3c.dom.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/file/std/LocalVfsJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/lang/ClassExtJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/lang/EnvironmentJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/lang/ExceptionsJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/lang/NativeThreadLocal.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/lang/UTF8.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/net/asyncSocketFactoryJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/net/http/HttpFactoryJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/util/PlatformJs.kt","webpack://develop/../../../../../korio/src/jsMain/kotlin/com/soywiz/korio/util/i18n/LanguageJs.kt","webpack://develop/./kotlin-dce/org.w3c/org.w3c.xhr.kt","webpack://develop/../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/async/KlockExt.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Date.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateException.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateFormat.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTime.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTimeSpan.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/MonthSpan.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTimeTz.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DayOfWeek.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/ISO8601.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/KlockLocale.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Measure.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Month.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/PatternDateFormat.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/MicroStrReader.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/PatternTimeFormat.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/PerformanceCounter.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Time.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeFormat.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeProvider.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimezoneNames.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimezoneOffset.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Year.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/YearMonth.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/hr/HRTimeProvider.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/hr/HRTimeSpan.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/MapExt.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/NiceStr.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/SpinLock.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/internal.kt","webpack://develop/../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/locale/ExtendedTimezoneNames.kt","webpack://develop/../../../../../klock/src/jsMain/kotlin/com/soywiz/klock/internal/AtomicsPlat.kt","webpack://develop/../../../../../klock/src/jsMain/kotlin/com/soywiz/klock/internal/KlockInternal.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/build/js/node_modules/process/browser.js","webpack://develop/../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/FastMap.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/math/Math.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Anchor.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Angle.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/BoundsBuilder.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Matrix.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Point.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Matrix3D.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/MatrixExt.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/PointArrayList.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/QuaternionEuler.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Rectangle.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/ScaleMode.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Size.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Vector3D.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/bezier/Bezier.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/binpack/BinPacker.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/binpack/MaxRects.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/shape/HorizontalLine.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/bezier/SegmentEmitter.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/Edge.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/LineCap.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/LineJoin.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/shape/Shape2d.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/PolygonScanline.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/VectorPath.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/StrokeToFill.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/VectorBuilder.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/vector/Winding.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/internal/Internal.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/interpolation/Easing.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/interpolation/Interpolation.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/math/ArrayExt.kt","webpack://develop/../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/segment/IntSegmentSet.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/TtfFont.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/DXT.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/GIF.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ICO.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap1.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap32.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap4.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap8.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/BitmapIndexed.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/BitmapChannel.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/BitmapSlice.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmaps.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/NativeImage.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/atlas/Atlas.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/BGRA.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/ColorFormat.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/ColorTransform.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/Colors.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGB.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGBA.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/RGBA_16.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/color/YCbCr.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/BitmapFont.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Context2d.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/CharacterSet.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/DefaultTtfFont.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/Font.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/FontRegistry.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/GlyphPath.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/Metrics.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/NativeSystemFontProvider.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/SystemFont.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/TextRenderer.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/BMP.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/font/VectorFont.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/DDS.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageData.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageFormat.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageFormats.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageFrame.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/ImageInfo.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/KRA.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/KorioExt.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/NativeImageFormatProvider.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/PNG.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/renderer/Renderer.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/PSD.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/RegisteredImageFormats.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/SVG.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/format/TGA.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/internal/ClampExt.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/internal/MathExt.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Bitmap32Context2d.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/CompositeOperation.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/CycleMethod.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/GraphicsPath.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/HorizontalAlign.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/paint/Paint.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Drawable.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/LineScaleMode.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Shape.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/ShapeRasterizerMethod.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/VerticalAlign.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/filler/Filler.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/format/SVG.kt","webpack://develop/../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/rasterizer/Rasterizer.kt","webpack://develop/../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/format/HtmlCanvas.kt","webpack://develop/../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/format/HtmlImage.kt","webpack://develop/./kotlin-dce/org.w3c/org.khronos.webgl.kt","webpack://develop/../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/format/NativeImageFormatProviderJs.kt","webpack://develop/./kotlin-dce/org.w3c/org.w3c.files.kt","webpack://develop/../../../../../korim/src/jsMain/kotlin/com/soywiz/korim/font/NativeSystemFontProviderFallback.kt","webpack://develop/(webpack)/buildin/global.js","webpack://develop/../../../../../korinject/src/commonMain/kotlin/com/soywiz/korinject/AsyncInjector.kt","webpack://develop/../../../../../korinject/src/commonMain/kotlin/com/soywiz/korinject/AsyncInjectorSuspendContext.kt","webpack://develop/./kotlin/time/Duration.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Text.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Container.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Graphics.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/src/commonMain/kotlin/org.gamezeug.digitspuzzle.ui/PuzzleUiState.kt","webpack://develop/./kotlin/collections/Collections.kt","webpack://develop/./kotlin/generated/_Collections.kt","webpack://develop/./kotlin/collections/Sets.kt","webpack://develop/./kotlin/collections/Maps.kt","webpack://develop/./kotlin/kotlin/collections.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/src/commonMain/kotlin/main.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/src/commonMain/kotlin/org.gamezeug.digitspuzzle.ui/PuzzleScene.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/src/commonMain/kotlin/org.gamezeug.digitspuzzle/domain/Move.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/src/commonMain/kotlin/org.gamezeug.digitspuzzle/domain/PuzzleArea.kt","webpack://develop/./kotlin/util/Standard.kt","webpack://develop/./kotlin/generated/_Arrays.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/src/commonMain/kotlin/org.gamezeug.digitspuzzle/domain/PuzzlePiece.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/src/commonMain/kotlin/org.gamezeug.digitspuzzle/domain/PuzzleSolver.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/src/commonMain/kotlin/org.gamezeug.digitspuzzle/domain/PuzzleState.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/src/commonMain/kotlin/org.gamezeug.digitspuzzle/domain/Tile.kt","webpack://develop/../../../../../klogger/src/commonMain/kotlin/com/soywiz/klogger/Logger.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korag/shader/shaders.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/service/storage/StorageItem.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/tests/ViewsForTesting.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korag/AG.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/Korge.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korev/EventDispatcher.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/scene/SceneContainer.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/animate/Animate.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/animate/AnimateLibrary.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/View.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/animate/Timed.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/animate/serialization/AnLibraryDeserializer.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/animate/serialization/AniFile.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/bitmapfont/BitmapFontExt.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/component/Component.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/component/docking/DockingComponent.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/component/docking/SortedChildrenByComponent.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/html/Html.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/input/DragComponent.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/input/GamepadEvents.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/input/Input.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/input/KeysEvents.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/input/MouseEvents.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/internal/KormaExt.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/logger/LoggerExt.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/render/AgBitmapTextureManager.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/render/BatchBuilder2D.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/render/DebugLineRenderContext.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/render/RenderContext.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/render/RenderContext2D.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/render/Texture.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/render/TextureWithBitmapSlice.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/render/VertexInfo.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/resources/Path.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/resources/ResourcesRoot.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/scene/CompletableScene.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/scene/DebugBitmapFont.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/scene/Module.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/scene/Scene.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/tween/tween.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/scene/Transition.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/stat/Stats.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/tests/TestCoroutineDispatcher.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/time/HRTimeProviderExt.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/time/TimerComponents.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/ui/UIView.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/ui/defaultSkins.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/ui/skins.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/util/CancellableExt.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/BlendMode.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/DummyView.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/FixedSizeContainer.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Fonts.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Image.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/RectBase.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/ScaleView.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Stage.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/ViewCollision.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Views.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge3d/internal/InternalExt.kt","webpack://develop/../../../../../korge/src/jsMain/kotlin/com/soywiz/korge/service/storage/NativeStorage.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/i18n/ViewsExt.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/service/storage/NativeStorage.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/tiled/TiledMap.kt","webpack://develop/../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/ui/defaultExtensions.kt","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/build/js/node_modules/buffer/index.js","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/build/js/node_modules/base64-js/index.js","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/build/js/node_modules/ieee754/index.js","webpack://develop//home/runner/work/10-digits-puzzle/10-digits-puzzle/develop/build/js/node_modules/isarray/index.js","webpack://develop/./kotlin-dce sync","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/kgl/KmlBufferExt.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/kgl/KmlGl.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/kgl/KmlGlExt.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/kgl/IKmlGl.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korag/DefaultShaders.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korag/OpenglAG.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korag/internal/internal.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korag/log/LogAG.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korag/shader/gl/GlslExt.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korag/shader/gl/GlslGenerator.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korev/internal/fastForEach.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korev/Events.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korev/Input.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korgw/GameWindow.kt","webpack://develop/../../../../../korgw/src/commonMain/kotlin/com/soywiz/korgw/KlockExt.kt","webpack://develop/../../../../../korgw/src/jsMain/kotlin/com/soywiz/kgl/KmlGlJsCanvas.kt","webpack://develop/../../../../../korgw/src/jsMain/kotlin/com/soywiz/kgl/KmlGlJsCanvasExt.kt","webpack://develop/../../../../../korgw/src/jsMain/kotlin/com/soywiz/korag/AGOpenglFactory.kt","webpack://develop/../../../../../korgw/src/jsMain/kotlin/com/soywiz/korag/GlExt.kt","webpack://develop/../../../../../korgw/src/jsMain/kotlin/com/soywiz/korgw/DefaultGameWindowJs.kt","webpack://develop/../../../../../klogger/src/commonMain/kotlin/com/soywiz/klogger/Console.kt","webpack://develop/../../../../../klogger/src/jsMain/kotlin/com/soywiz/klogger/ConsoleJs.kt","webpack://develop/../../../../../klogger/src/jsMain/kotlin/com/soywiz/klogger/DefaultLogOutput.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/format/MP3.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/format/WAV.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/format/mp3/MP3Decoder.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/format/AudioFormat.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/format/OGG.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/internal/ArrayDequeExt.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/internal/Coerce.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/internal/NiceStr.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/internal/SampleConvert.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/sound/AudioData.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/sound/AudioSamples.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/sound/AudioSamplesDeque.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/sound/AudioStream.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/sound/NativeSound.kt","webpack://develop/../../../../../korau/src/commonMain/kotlin/com/soywiz/korau/sound/PlatformAudioOutput.kt","webpack://develop/../../../../../korau/src/jsMain/kotlin/com/soywiz/korau/sound/HtmlNativeSoundProvider.kt","webpack://develop/../../../../../korau/src/jsMain/kotlin/com/soywiz/korau/sound/HtmlSimpleSound.kt","webpack://develop/../../../../../korau/src/jsMain/kotlin/com/soywiz/korau/sound/NativeAudioStreamJs.kt"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Kotlin","_","isBooleanArray","a","Array","isArray","Int8Array","$type$","isByteArray","isShortArray","Int16Array","isCharArray","Uint16Array","isIntArray","Int32Array","isFloatArray","Float32Array","isDoubleArray","Float64Array","isLongArray","isArrayish","ArrayBuffer","isView","arrayToString","toString","String","fromCharCode","map","e","join","arrayEquals","b","length","equals","arrayDeepEquals","kotlin","collections","contentDeepEqualsImpl","arrayHashCode","arr","result","hashCode","arrayDeepHashCode","contentDeepHashCodeImpl","getCallableRef","f","callableName","getPropertyCallableRef","set","setter","obj","cache","$metadata$","implementedInterface","getPropertyRefMetadata","mutable","immutable","constructor","getPropertyRefClass","propertyRefClassMetadataCache","paramCount","buf","bufFloat64","bufFloat32","bufInt32","lowIndex","highIndex","reflect","KMutableProperty0","KProperty0","KMutableProperty1","KProperty1","getObjectHashCode","hash","Math","random","throwMarkerError","Error","imul","toShort","toByte","toChar","numberToLong","Long","fromNumber","numberToInt","toInt","doubleToInt","numberToShort","numberToByte","numberToDouble","numberToChar","toBoxedChar","BoxedChar","unboxChar","obj1","obj2","objType","numberHashCode","Number","str","code","charCodeAt","getStringHashCode","identityHashCode","this","low_","low","high_","high","IntCache_","fromInt","cachedObj","isNaN","ZERO","TWO_PWR_63_DBL_","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL_","fromBits","lowBits","highBits","fromString","radix","opt_radix","charAt","substring","indexOf","radixToPower","pow","size","min","parseInt","power","multiply","add","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","ONE","NEG_ONE","TWO_PWR_24_","toNumber","getLowBitsUnsigned","isZero","isNegative","equalsLong","radixLong","div","rem","subtract","remDiv","digits","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","other","notEqualsLong","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","approx","shiftRight","shiftLeft","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","compareTo_11rb$","inc","dec","valueOf","unaryPlus","unaryMinus","inv","rangeTo","ranges","LongRange","defineInlineFunction","fun","wrapFunction","apply","arguments","suspendCall","coroutineResult","coroutineReceiver","setCoroutineResult","compareTo","typeA","doubleCompareTo","primitiveCompareTo","ia","imulEmulated","doubleToRawBits","doubleFromBits","floatToRawBits","floatFromBits","ensureNotNull","x","throwNPE","startsWith","position","lastIndexOf","searchString","endsWith","subjectString","undefined","lastIndex","sign","trunc","NaN","taylor_2_bound","sqrt","taylor_n_bound","upper_taylor_2_bound","upper_taylor_n_bound","sinh","abs","y","exp","y1","isFinite","cosh","tanh","Infinity","asinh","acosh","atanh","log1p","x2","x3","expm1","hypot","log10","LOG10E","LOG2E","clz32","asUint","__proto__","fill","TypeError","O","len","start","relativeStart","k","end","relativeEnd","final","normalizeOffset","offset","typedArraySlice","begin","subarray","arrays","TypedArray","slice","Function","self","array","callback","totalOrderComparator","sort","compareFunction","Kind","callGetter","thisObject","klass","propertyName","propertyDescriptor","getOwnPropertyDescriptor","getPrototypeOf","isType","proto","kind","OBJECT","klassMetadata","INTERFACE","isInheritanceFromInterface","ctor","iface","metadata","interfaces","superPrototype","superConstructor","isNumber","isChar","isComparable","type","Comparable","isCharSequence","CharSequence","ordinal","element","index","NoSuchElementException","IntRange","destination","item","toCollection","emptyList","listOf","asCollection","list","emptySet","setOf","separator","prefix","postfix","limit","truncated","transform","buffer","count","isEmpty","checkIndexOverflow","iterator","hasNext","last","next","single","collectionSizeOrDefault","optimizeReadOnlyList","optimizeReadOnlySet","to","first","step","EMPTY","minimumValue","maximumValue","contentEquals","storage","contentHashCode","CharIterator","IntIterator","LongIterator","getProgressionLastElement","endInclusive","nextByte","nextChar","nextShort","nextInt","nextLong","nextFloat","nextDouble","nextBoolean","CharProgressionIterator","CharProgression","rangeStart","rangeEnd","IntProgressionIterator","IntProgression","LongProgressionIterator","LongProgression","CharRange","mod","differenceModulo","BooleanIterator","ByteIterator","ShortIterator","FloatIterator","DoubleIterator","context","current","v","currentResult","isFailure","currentException","exceptionOrNull","doResume","outcome","exception","completion","Result","createFailure","intercepted","CoroutineImpl","receiver","src","dst","srcLen","dstLen","source","newSize","defaultValue","collection","checkRadix","ArrayList","fromIndex","toIndex","sortArray","comparator","midPoint","reverseIndex","tmp","toArray","copyToArrayImpl","push","pair","collectionsSort","naturalOrder","copyToArray","throwIndexOverflow","throwCountOverflow","expectedSize","AbstractCollection","AbstractMutableCollection","AbstractMutableList","AbstractMap","AbstractMutableSet","initialCapacity","elements","getStableSortingIsSupported","comparison","mergeSort","_stableSortingIsSupported","median","left","leftIndex","rightIndex","right","leftValue","rightValue","target","remove","modified","it","_index","changed","times","hasPrevious","newValue","oldValue","entries","clear","from","iter","entry","modCount","splice","concat","pop","value1","value2","internalMap","equality","InternalHashCodeMap","loadFactor","createJsMap","keys","original","BaseOutput","BufferedOutput","initialResult","ClassCastException","message","cause","Exception","RuntimeException","pairs","NEGATIVE_INFINITY","toRawBits","bits","POSITIVE_INFINITY","isInfinite","hi26","INV_2_26","low27","INV_2_53","jClass","KClassImpl","createEntrySet","chainOrEntry","chain","isChain","chainSize","keyIndex","itemIndex","state","lastEntry","_head","_tail","node","old","newEntry","println","outputStream","write","messageString","flush","console","cur","NotImplementedError","simpleName","jsClass","PrimitiveKClassImpl","functionClasses","arity","getOrCreateKClass","stringClass","SimpleKClassImpl","kClass","content","capacity","matches","MIN_HIGH_SURROGATE","MAX_HIGH_SURROGATE","MIN_LOW_SURROGATE","MAX_LOW_SURROGATE","toLowerCase","char","pattern","options","RegExp","match","IndexOutOfBoundsException","startIndex","endIndex","reversed","isLowSurrogate","isHighSurrogate","concatToString","_capacity","minimumCapacity","string","newLength","destinationOffset","dstIndex","stringCsq","reset","exec","input","test","findNext","Regex","replace","replacement","lastStart","sb","foundMatch","range","nonGlobalOptions","subSequence","literal","AbstractList","ignoreCase","n1","n2","s1","s2","toUpperCase","regionMatches","suffix","regex","regionMatchesImpl","thisOffset","otherOffset","sourceUnit","targetUnit","sourceCompareTarget","isNode","HrTimeSource","MatchGroup","markNow","TimeMark","process","hrtime","AbstractDoubleTimeSource","startedAt","seconds","nanos","performance","now","decimals","round","toFixed","toLocaleString","json","toExponential","previous","nextIndex","otherIterator","elem","elemOther","AbstractSet","ourValue","ArrayAsCollection","ArithmeticException","safeToConvertToSet","values","contains","isVarargs","putAll","asList","convertToSetForSetOperationWith","toHashSet","filterInPlace","predicate","predicateResultToRemove","writeIndex","readIndex","removeIndex","j","copy","SequenceBuilderIterator","nextStep","block","SequenceScope","sequence","throwOnFailure","GeneratorSequence","seedFunction","nextFunction","FlatteningSequence","itemIterator","nextItemIterator","emptySequence","SubSequence","TakeSequence","nextItem","nextState","safe","getOrThrow","acc","removed","interceptor","CombinedContext","baseKey","operation","initial","newLeft","Random","defaultPlatformRandom","accumulator","until","checkRangeBounds","fastLog2","bitCount","nLow","nHigh","rnd","doubleFromParts","r1","nextDown","steps","remainder","vr","seed","boundsErrorMessage","seed1","seed2","newIndent","lines","isBlank","line","resultSizeEstimate","isWhitespace","firstChar","limitBeforeMul","digitOf","digit","limitForMaxRadix","NumberFormatException","padChar","padStart","chars","indices","indexOfAny","charArrayOf","lastIndexOfAny","currentStartIndex","DelimitedRangesSequence","currentIndex","strings","findAnyOf","second","delimiters","currentOffset","delimiter","isLimited","splitToSequence","lineSequence","Duration","v0","takeUpperBits","nextSearchIndex","groupValues","convertDurationUnit","unit","scale","action","inDays","hoursComponent","minutesComponent","secondsComponent","nanosecondsComponent","inHours","inMinutes","inSeconds","inNanoseconds","absoluteValue","scientific","maxDecimals","absNs","formatScientific","formatUpToDecimals","formatToExactDecimals","shortName","number","hours","nanoseconds","minutes","hasSeconds","hasHours","hasMinutes","nss","AdjustedTimeMark","duration","elapsedNow","mark","adjustment","read","initializer","isInitialized","InitializedLazyImpl","Pair","that","UByte","UByteIterator","UInt","uintCompare","data","ulongCompare","uintDivide","ulongDivide","uintRemainder","ulongRemainder","UIntIterator","UIntProgression","UIntRange","uintToDouble","UIntProgressionIterator","ULong","nextUByte","nextUShort","nextUInt","nextULong","ULongIterator","ULongProgression","ulongToDouble","ulongToString","ULongProgressionIterator","ac","bc","UShort","UShortIterator","v1","v2","divisor","dividend","quotient","base","toMutableList","joinTo","resultSize","sortWith","checkCountOverflow","addAll","sum","toIntExactOrNull","collectionSizeOrNull","fillFrom","booleanArrayIterator","byteArrayIterator","shortArrayIterator","charArrayIterator","intArrayIterator","longArrayIterator","floatArrayIterator","doubleArrayIterator","captureStackTrace","instance","stack","args","typed","UnsafeLazyImpl","rangeSize","subrange","arrayCopyResize","arrayPlusCollection","output","delegate","NullPointerException","intClass","doubleClass","booleanClass","functionClass","booleanArrayClass","charArrayClass","byteArrayClass","shortArrayClass","intArrayClass","longArrayClass","floatArrayClass","doubleArrayClass","arrayClass","anyClass","throwableClass","toIntOrNull","numberFormatError","toLongOrNull","oldChar","newChar","contentDeepEquals","emptyMap","toSet","ReversedComparator","createCoroutineUnintercepted","ClosedDoubleRange","replaceIndent","startFound","missingDelimiterValue","rangesDelimitedBy","NodeJsOutput","BufferedOutputToConsoleLog","trim","arrayCopy","compareValues","selector","coerceAtLeast","mapCapacity","sortedWith","toDouble","toDoubleOrNull","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","cos","sin","tan","atan2","atan","acos","trimEnd","primitiveArrayConcat","g","Korge","Module","Colors","PuzzleScene","buildAll","pieces","PuzzleUiState","puzzleState","PuzzleSolver","puzzleUiState","Scene","puzzleSolver","numberOfStatesToTryEachFrame","hasNextState","lastPuzzleState","isSolved","area","rows","tiles","colIndex","rowIndex","tile","text","stateCounter","puzzleStartTime","formatTimeComponent","statesPerSecondRate","views","virtualWidth","virtualHeight","segmentChar","timeComponent","addUpdater","numberOfColumns","numberOfRows","useNativeRendering","TilePrinter","resourcesVfs","x0","y0","rect","leftSegment","chooseSegmentColor","topSegment","rightSegment","bottomSegment","piece","mirroring","rotation","getEffectiveArea","movesEffectiveArea","coordinate","newTile","tileInThePuzzle","replacements","mutableArea","PuzzleRow","PuzzleArea","newArea","newAreaCoordinate","wideEnough","tallEnough","availableCoordinates","PuzzleAreaCoordinate","filledTiles","hasAnyFilledSegment","foundBlankTiles","TileNavigator","tileNavigator","blankTiles","blankAreaMap","getTile","hasAnyEmptySegment","hasLeftTile","hasEmptyLeftSegment","hasEmptyRightSegment","hasBottomTile","hasEmptyBottomSegment","bottom","hasEmptyTopSegment","hasRightTile","row","stringBuilder","toStringFirstLine","toStringSecondLine","toStringThirdLine","TileReplacement","Tile","csv","split","toList","newCoordinate","numberOfTiles","emptyTile","trimIndent","rotate90DegreesClockwise","rotate180Degrees","rotate270DegreesClockwise","newNumberOfRows","newRows","PuzzlePiece","mirrorHorizontally","build0","build1","build2","build3","build4","build5","build6","build7","build8","build9","charToPrint","mutableListOf","initialState","removeLast","isDeadEnd","getAvailableValidMoves","availableValidMoves","availablePieces","puzzlePiece","move","tileReplacements","mergedTile","PuzzleState","minus","plus","moves","usedPieces","getAvailableCoordinates","Move","getNumberOfFilledTiles","getBlankAreaMap","getNumberOfEmptySegments","numberOfEmptySegments","tileDescription","fullTile","base64","ieee754","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","RangeError","Uint8Array","arg","encodingOrOffset","allocUnsafe","byteOffset","byteLength","fromArrayLike","fromArrayBuffer","encoding","isEncoding","actual","isBuffer","checked","fromObject","assertSize","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","arrayIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","fromByteArray","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","global","foo","typedArraySupport","poolSize","_augment","species","configurable","allocUnsafeSlow","_isBuffer","pos","swap16","swap32","swap64","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","INVALID_BASE64_RE","leadSurrogate","toByteArray","stringtrim","base64clean","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","rt","webpackEmptyContext","req","resolve","id"],"mappings":"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F,GAAU,IAaTA,G6GhFpBuB,E7GgF8BrB,K6GhFzBsB,E7GgF0CtB,KAAZ,GAbNA,K6GnEnBzxB,E7GmEmCyxB,KAAX,G6GhExE,mBACI,MPsHsDK,GOtH7ChwB,EAAI9B,GACb,EPqHsD8xB,GOrH7CpuB,EAAI1D,GACb,OPmDmE0xB,GOnDxDoB,EPmD0ErB,KOnDpEsB,EPmDgFtB,OOnDtF,EP6E6C,IAAAW,GO7EnCU,EP6E8CrB,KAAK,SO7E9CsB,EP6E0DtB,OAb7B,IAAAW,GAAW,IAaVA,GO7EtBU,EP6EiCrB,KAAK,SO7EjCsB,EP6E6CtB,OAblBA,KAAK,IOhE3BzxB,EPgEsCyxB,OO7DtF,mBAmBI,GAAArZ,EAAO,EADuE,O7GsBZoZ,G6GrBlDve,E7GqBmEwe,K6GrB1Dre,E7GqBsEqe,O6GrB/E,EAAcre,E7GoDwB,IAAAme,G6GpDfne,E7GoDyBqe,K6GpDnB,GAAiBre,EAAKH,E7GkQhC,IAAAse,G6GlQuCnZ,I7GoDOqZ,KAAZ,G6GnDrE,GAAArZ,EAAO,EAFuE,O7GsBZoZ,G6GpBlDve,E7GoBmEwe,K6GpB1Dre,E7GoBsEqe,O6GpB/E,EAAcre,E7GsCuB,IAAAme,G6GtCdne,E7GsCwBqe,K6GtClB,GAAiBxe,EAAOG,E7GiQlC,IAAAme,G6GjQwC,GAACnZ,I7GsCGqZ,KAAX,G6GrC5D,MAAa,GAAyB,iBAGlD,mBAmBI,GAAArZ,EAAA,WAAO,EAD2E,OPMfsZ,GOLnDze,EPKqEwe,KOL5Dre,EPKwEqe,OOLjF,EAAcre,EP+B0B,IAAAgf,GO/BjBhf,EP+B4Bqe,KAAK,SO/B3B,GAAiBre,EAAKH,EPyP7B,IAAAmf,GOzPoCha,IP+BUqZ,OO9BpF,GAAArZ,EAAA,WAAO,EAF2E,OPMfsZ,GOJnDze,EPIqEwe,KOJ5Dre,EPIwEqe,OOJjF,EAAcre,EPiByB,IAAAgf,GOjBhBhf,EPiB2Bqe,KAAK,IOjB1B,GAAiBxe,EAAOG,EPwP/B,IAAAgf,GOxPsCha,EAAD,ePiBOqZ,OOhB1E,MAAa,GAAyB,iB5GpDvB,eAEvB,KAF0D,YAE1D,sBACI,eAGqC,IAAAuB,GAAO,GAE5C,eAG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M,oBAYqE,O,2RGiFrE,S,KAMW,E,4BACH,S,QAAA,uE,qNACc,kB,wQF7C4B,mE,4FAJlD,S,6BAiB0D,4G,KAAA,E,+LACjD,mC,qBAwCD,2C,2CADJ,Y,oCGhEgB,MAAe,GAA3B,GAaA,G,GCshBI,GCtZJ,G,mCL8IJ,sF,EAAA,uB,kGMxLkB,Q,qCAEJ,gC,uDChGG,I,EAAA,qB,EAAA,E,8BAcT,0CANa,2C,sFAAA,wT,4BARJ,iPAeb,iB,mFCAJ,oC,cAAA,c,+aCDI,Q,GACM,sC,WAAF,iB,EAAc,a,EAAA,8B,sBrCqBlB,EAAO,KAAP,kB,GqC/CsB,0C,EACtB,eACI,6B,QACJ,6B,OAEJ,IAAO,E,KAPoE,oC,4DA4BrD,qB,wCnLwCf,ImLpCX,IAKiB,EAAb,Q,sCnL+BO,8B,amL7B6B,SAAO,K,uDAE/B,EAAI,2B,kDAUhB,M,SAGyB,EAAQ,yB,0CAEjC,+CnLYO,EmLPwD,anLOxD,6B,GmLHC,G,OAHJ,6B,WAAA,Q,+DnLMG,E,+CmLNC,EAAO,2B,kBAOM,G,mCA2DjB,E,kDAMW,cACP,gBAAM,E,qBAuDsE,a,GAA7D,G,8CAAA,IAAI,IAAU,WhM3FQ,EAAM,U,8BgM2F5B,EAA6D,sB,gBC9BjC,yB,GAClC,sD,QASb,6BAAU,G,QAEN,OAAwB,YlLnKhC,8B,akLuKI,c,MAdY,E,+CAoBR,6BAAa,K,6HDIzB,E,QAAA,E,qCAAA,OACsD,G,+BADtD,M,KACsD,EADtD,G,kBAAA,6B,6DClBI,yC,oBApIiD,UAAjC,sB,iBCsChB,GAAY,gBACZ,a,eAuCI,kC,eAVA,Y,mCnBpI2B,QAAC,UAA2B,IAA3B,kB,yFAUpB,YAPK,QACT,UAAQ,QACR,KAKI,E,gF1B8GI,qB,qCAkBZ,GAAI,IAA0B,EAAS,EAAT,IAA1B,U,aAGA,S,aAGG,qB,mCAMC,KAAU,a,aAqId,SApIA,K,MACI,EADJ,qBAqIa,c,0BA5GL,EAAM,E,2BAItB,iB,SAGW,EAAP,mB,aM4LJ,Q,MNxFQ,EA/FQ,GAFA,IAEO,E,CAEX,IAAI,EAAO,SAJP,IAIO,EAA2B,kBAClC,qBAAe,MAAf,W,mCAUL,EAAP,E,4BM0MA,SA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IADkC,eAClC,aAMY,SACZ,mB,4KYrG4B,Y,GAAQ,oB,2EACiB,G,qBACzD,8B,kHGgCI,KAAS,sB,qDH3B2B,6C,GAExC,gC,GADA,wC,GAIA,yBAvFmC,aAuFnC,U,4DAD6B,Y,sFAC7B,uB,GAAA,sB,wHAoCD,e,GAHC,kB,GACA,U,GACA,+C,oBAAA,mB,GAAA,6C,6HAGA,G,6BwD5HJ,wB,GACA,G,e3CgoCA,c,OAAA,S,yKGrmCQ,Q,gCAxBR,6C,oQEiDI,oB,6CAuCA,W,8CAyNA,O,SAAA,EAAsB,GAAO,EAA7B,G,i9SuCpSmB,4B,0MvOoDvB,2C,4CiD85BA,K,ErBrdA,+B,wOJhgBA,iB,EDqDQ,+B,ECwCR,mD,EAAA,kD,0D0IvBI,iD,EtDhDJ,4C,EtGmxCA,qD,qJiBhrCA,gC,gGiNxIkC,sB,e/NkHlC,4C,GwIlGA,oC,6E3HfA,6B,sCmN0B8C,e,cCurBf,a,IAvdJ,wBAUV,yBnP9QjB,O,mJoPoB6B,kB,kenFK2B,iB,GvJiNxD,yB,gC2OjKgD,W,unB5OThD,sC,stC6OLuB,2B,uK/M1DvB,iC,gTgNgDyB,qB,yX7OyWzB,0C,GAAA,+C,+HK8eA,sC,G4Dx4BA,oB,gJ5DwjCA,uC,0MAmbA,gC,0gByDh5CI,yC,IxEvDJ,yB,Ge4MA,2C,GsG7MA,oC,wP3CmEA,2B,G3Dk0BA,wC,6CL73BA,sC,+DgEiFA,8B,srBA8GA,8B,+kDrDirFA,oBqIt4FA,oC,0M8F4GqD,iB,mVlPkJrD,c,GsGeA,e,GlDmuBgD,0B,4hB+L3gCvB,oBAAC,UAA8B,MAA9B,oBACzB,kBAAyB,GAAc,GACvC,mBAA0B,GAAc,GACxC,YAAmB,MAAe,EAAM,mBAAc,EAApB,GAClC,kBAAwB,EAExB,oIASA,oIAQA,qE,cCzBA,2BACC,kBAAY,e,yqJDOb,W,uCACC,GAAI,gBAAO,EAAG,OAAd,e,8CACA,e,gBAAA,GAAO,kBAAK,eAAgB,wB,CAA5B,e,YACY,e,cAAX,wBAAW,gC,OAAA,W,OADZ,e,mBAGA,kBAAK,cAAM,kBAAQ,kBAAQ,gBACf,e,cAAZ,yBAAY,WAAK,EAAL,wB,OAAA,W,gQANb,oB,MAAA,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AAI,Q,CACV,MAAS,eAAK,YAAL,I2BeP,KlR8NA,YkR9NsB,ElR8NtB,K,8BkR1NF,Y3BbD,IACe,MAFf,EAAQ,EACD,E2BcL,E3BdS,Q2BeR,sBADD,G3Bba,YAAL,M,8B2BkBT,czR+nSS,IA6UM,EA7UN,EAAM,EyR3nSZ,EzR2nSyB,QA6U1B,IAAK,EAAL,MyRx8SC,EzRw8SD,W,CAAa,MyRx8SZ,EzRw8SD,GACI2V,EAAY,UAAcC,EiBzzSkCmN,ewQnJjE,sBACC,OACC,EzR28SMpN,K,oCyRv7ST,cACC,kBAD+B,UAAoB,+BACnD,wBAAsB,ExQ4H2CoN,gBwQ5HjE,EAA4C,G,wEA/C9C,0CCJD,sB,yFACC,Y5BAA,I4BCC,I5BAc,E4BAd,EnRwG4D,ImRvG7C,EAAX,GAAJ,EAAI,cAAM,K5BHX,EAAQ,EACD,EAAI,Q,C4BGT,InRuVQ,EmRvVR,EAAkB,G5BFV,eAAK,YAAL,I4BEU,cAAM,SAAN,EAAmB,GACrC,EAAU,KAAI,wBAAgB,cAAM,GAAI,IAAuB,GAC/D,EAAY,KAAI,wBAAgC,G9QuPb,G8QvPH,K9QuPc,Y8QvPE,GAAhC,EAA4C,IAAuB,GnRoVlF,EAAY,YmRnVW,GnRoVhB,GAAI,Q,CACP,MD/P4C,ICgQ5C,cmRtVmB,EnRsVV,GACT,SAEA,IALJ,E4E7SK,UuMtCE,GAET,OAAO,G,4BAGR,YxK2BU,IAOS,EAPT,EAAU,IAOjB,IAAgB,EwKlC0C,EnR6V0B,QAAQ,W2G3T5E,a,CAAA,ItGs2CH,EsGt2CG,WwKlCyD,ExKmChDxN,E3G6OuC,ImRhRc,ExKmCrDA,E3G0PuC,MKsiCzD,EAAM,EAAa4B,E8Qn0C8D,E9Qm0CtC,KAqElD,IAAa,E8Qx4C2E,E9Qw4C3E,wB,CAAA,eACT,EAAY,U8Qz4CoF,I9Qy4CtEvB,IsGr2Cdqd,GAAZtd,EtGs2CG,G8Q14C2C,2BtPHgBwG,G8EyC3DxG,GwKtC2C,U,4BAErD,Y5BPA,I4BQC,I5BPc,E4BOd,EpR6EkD,IwPtFnD,EAAQ,EACD,E4BSN,E5BTU,Q,CACV,M4BQA,G5BRc,YAAL,I4BQY,iBAAK,iBACzB,EAAS,KAAI,wBAAgB,EAAK,IAAu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AA,kD,OAAA,W,qCAAA,OAAgB,GAAhB,e,0WAC7C,W,+DAtEiH,K,gBhBhZrG,6B,wBgBiZA,e,cAAA,oChB/YM,gBgB+YK,EAqE4C,EArEvD,wB,OAAA,W,OAAX,MAAW,cACX,GAoEkE,IApE9D,EpR9R4C,MAAM,IoR8R9B,uCAA0C,GpR9RkBjF,YoQlHnF,4BgBodsE,GhBpdtD,gBgBodgE,G,8EAAlC,OAtEiE,0CAsEjE,c,qFhBld9C,gCAAK,iB,ybgBodP,W,+DAxEiH,K,gBhBhZrG,6B,wBgBiZA,e,cAAA,oChB/YM,gBgB+YK,EAuE6C,EAvExD,wB,OAAA,W,OAAX,MAAW,cACX,GAsEmE,IAtE/D,EpR9R4C,MAAM,IoR8R9B,uCAA0C,GpR9RkBA,YoQlHnF,4BgBsduE,GhBtdvD,gBgBsdiE,G,8EAAlC,OAxEgE,0CAwEhE,c,qFhBpd/C,gCAAK,iB,ybgBqdP,W,+DAzEiH,K,gBhBhZrG,6B,wBgBiZA,e,cAAA,oChB/YM,gBgB+YK,EAwE4C,EAxEvD,wB,OAAA,W,OAAX,MAAW,cACX,GAuEkE,IAvE9D,EpR9R4C,MAAM,IoR8R9B,uCAA0C,GpR9RkBA,YoQlHnF,4BgBudsE,GhBvdtD,gBgBudgE,G,8EAAlC,OAzEiE,0CAyEjE,c,qFhBrd9C,gCAAK,iB,ybgBudP,W,+DA3EiH,K,gBhBhZrG,6B,wBgBiZA,e,cAAA,oChB/YM,gBgB+YK,EA0E4C,EA1EvD,wB,OAAA,W,OAAX,MAAW,cACX,GAyEkE,IAzE9D,EpR9R4C,MAAM,IoR8R9B,uCAA0C,GpR9RkBA,YoQlHnF,4BgBydsE,GhBzdtD,gBgBydgE,G,8EAAlC,OA3EiE,0CA2EjE,c,qFhBvd9C,gCAAK,iB,ybgBwdP,W,+DA5EiH,K,gBhBhZrG,6B,wBgBiZA,e,cAAA,oChB/YM,gBgB+YK,EA2E6C,EA3ExD,wB,OAAA,W,OAAX,MAAW,cACX,GA0EmE,IA1E/D,EpR9R4C,MAAM,IoR8R9B,uCAA0C,GpR9RkBA,YoQlHnF,4BgB0duE,GhB1dvD,gBgB0diE,G,8EAAlC,OA5EgE,0CA4EhE,c,qFhBxd/C,gCAAK,iB,ybgBgeP,W,+DApFiH,K,gBhBhZrG,6B,wBgBiZA,e,cAAA,oChB/YM,gBgB+YK,EAmF4C,EAnFvD,wB,OAAA,W,OAAX,MAAW,cACX,GAkFkE,IAlF9D,EpR9R4C,MAAM,IoR8R9B,uCAA0C,GpR9RkBA,YoQlHnF,4BgBkesE,GhBletD,gBgBkegE,G,8EAAlC,OApFiE,0CAoFjE,c,qFhBhe9C,gCAAK,iB,ybgBqeP,W,uCAEE,G,yBAAI,mCAAkC,kC,IAChB,gB,cAAL,qBAAK,kC,OAAA,WAEX,qC,IAA4B,e,cAAA,GAAL,qBAAK,wB,OAAA,0BAAL,EAAvB,e,gBAAA,e,gBAAJ,GAAI,c,IACW,e,cAAL,qBAAK,qC,OAAA,W,eAGX,K,gBACC,cAAU,MACrB,e,mBACc,e,cAAL,qBAAK,aAAK,gBAAM,EAAG,gBAAK,OAAnB,wB,OAAA,W,OACb,G,aADa,cACT,cAAK,E,CAAG,e,SAAZ,e,gBACA,eAAI,eAAO,gBAAM,EAAG,cAHrB,e,gBAKI,kBAAJ,eAAI,cAXE,e,gBACN,MAAqB,cAAe,Q,GAC/B,e,cAAA,GAAL,qBAAoB,EAAf,wB,OAAA,W,OAAA,gCAFC,e,gBAHP,gB,oBACsB,8BAAmB,gB,cAAL,qBAAK,oC,OAAA,W,QAAxC,MAAgB,yBAAwB,e,GACnC,gB,cAAA,GAAL,qBAAoB,EAAU,QAAzB,wB,OAAA,W,QAAA,gCAFN,gB,mGADD,yB,6FAkBM,gB,cAAL,qBAAK,8B,OAAA,W,ocAsCP,W,+DAAwD,K,gBhB5iB5C,6B,wBgB4iBuE,GhB1iBjE,gBgB0iB2E,EAAV,cAAiB,e,cAAA,qChB1iBlF,gBgB0iB4F,EAAG,EAAb,wB,OAAA,W,qFAA5C,S,qFhBxiBtD,gCAAK,iB,ybgB0iBP,W,+DAAwD,K,gBhB9iB5C,6B,wBgB8iBuE,GhB5iBjE,gBgB4iB2E,EAAV,cAAiB,e,cAAA,qChB5iBlF,gBgB4iB4F,EAAG,EAAb,wB,OAAA,W,qFAA5C,S,qFhB1iBtD,gCAAK,iB,ybgBkjBP,W,+DAAwD,K,gBhBtjB5C,6B,wBgBsjBuE,GhBpjBjE,gBgBojB2E,EAAV,cAAiB,e,cAAA,qChBpjBlF,gBgBojB4F,EAAG,EAAb,wB,OAAA,W,qFAA5C,S,qFhBljBtD,gCAAK,iB,wTgBkkBN,oBACC,iBAAK,aAAK,EAAU,EAAQ,EAAQ,I,2BAErC,oBACC,iBAAK,cAAM,EAAU,EAAQ,EAAQ,I,+BAEtC,cAA8C,OAAM,mBAAN,G,uBAC9C,YAAyC,iBAAK,Q,mOAkB/C,W,uCAEC,QAF8D,gDAAiB,OAE3E,mCAAuB,uC,IACnB,e,cAAP,kBAAO,cAAM,0BAAK,KAAK,KAAM,8BAAS,QAAS,0BAAK,QAAU,8BAAS,QAAxB,EAAxC,wB,OAAA,WADR,e,8CAEC,OAAoB,eAAb,0BAAK,S,wBAGD,cAAU,sB,yBAEtB,e,mBACkB,e,cAAA,GAAL,qBAAU,iBAAL,wB,OAAA,W,OACjB,G,iBADiB,cACb,kBAAS,E,CAAG,e,SAAhB,e,mBACO,e,cAAP,kBAAO,cAAM,iBAAO,EAAG,iBAAhB,wB,OAAA,W,OACP,+DAAc,mBAJf,e,gBAMA,OAAO,sB,yOAsFP,kBAA2E,iBAAK,aAAK,EAAQ,EAAQ,I,mBACrG,YAA4C,QAAP,OAAM,OAAC,oCAAD,UAAN,G,2JACrC,W,2CAA4C,IAAD,4BAAC,yCAAD,wC,IAAiD,e,cAAA,iE,OAAA,WAAjD,e,8CAAA,kBAAiD,cAAjD,e,gBAAA,yB,wOAA3C,c,MAAA,e,OAAA,sB,2JACA,W,2CAA0C,IAAD,4BAAC,yCAAD,sC,IAA6C,e,cAAA,+D,OAAA,WAA7C,e,8CAAA,kBAA6C,cAA7C,e,gBAAA,yB,sOAAzC,c,MAAA,e,OAAA,sB,0EAIA,kBACC,qCAAyB,cAAM,EAAQ,EAAQ,I,mBAEhD,YAA4C,QAAP,O,8BAAM,OAAC,wDAAD,UAAN,G,yFA0CpC,WAAQ,iBAAK,M,IACb,YAAmB,oB,+BAEpB,cAA8C,OAAM,aAAgB,UAAtB,G,uBAC9C,YAAyC,OAAQ,eAAR,e,mCAEzC,YAA8C,aAAW,GAAG,GAAU,mC,0BAEtE,oBAEC,GADA,2BAAc,IACV,GAAa,KAAQ,cAArB,GAA8B,OAAO,EAC/B,MAAiB,eAAb,KAAK,SAAT,EAA2B,qBAAW,IAChC,G5O+RyCrB,EAAA,gBAAK4B,IAAL,EAAQ5B,EAAO4B,G4O/RnD,SAAM,GAAU,QAArC,E5OkPkD,EAAW6J,IAAI,E4OlPnB,GAC9C,EAAU,KAAK,KAAK,KAApB,EAA0B,EAAS,QACnC,OjQ7NEiqB,EAAU,EiQ4NgC,EAAQ,EjQ5NlD,E8HziBwC,EmIqwBkB,EnIrwBlB,GmIswBnC,G,2BAGR,oBACC,2BAAc,GACd,gBAAY,EAAI,UAAK,KAAT,EAAgB,qBAAW,IAAK,QAA5C,O5O2OkD,EAAWjqB,IAAIzL,EAAG4B,GrB7clE8zB,EiQmOQ,EAAgB,KAAK,KAAK,KAAM,EAAS,QAAjC,IAA0C,EnI5wBlB,I,mBmIgxB3C,YAA+B,U,sBAE/B,WAAkC,+BAAyB,UAAK,KAA9B,K,wIAyBnC,iE9CjpBA,8I8CipBA,8BAA+C,UAAgB,M9ChpB9D,MAAa,E8CipB0B,GACtC,E9CjpBO,EAAiB,I8CgpBzB,kB9C9oBO,EAAO,c8C8oBd,6B,iDCrzBgB,WAAQ,eAAG,U,oDACR,WAAQ,eAAG,OAAO,YAAV,K,kDACN,WAAQ,sBAAY,K,8CACxB,WAAQ,OAAC,gB,0BAE1B,YAC6B,6B,iCAE7B,YACC,MAA0B,GAAP,YAAqB,aACxC,uBAAW,EAAe,YAAQ,I,oBAGnC,WAgGC,MA/FgC,GAAH,QAAU,aAAzB,OAgGd,wBAhGwB,EAgGxB,EACO,G,oBAhGR,WA8FC,MA9FgC,GAAH,QAAU,aAAzB,OA+Fd,wBA/FwB,EA+FxB,EACO,G,uBA9FR,WA4FC,MA3FmC,GAAH,QAAa,aAA5B,OA4FjB,wBA5F2B,EA4F3B,EACO,G,uBA3FR,WAyFC,MAzFmC,GAAH,QAAa,aAA5B,OA0FjB,wBA1F2B,EA0F3B,EACO,G,uBA1FR,WAwFC,MAxFmC,GAAH,QAAa,aAA5B,OAyFjB,wBAzF2B,EAyF3B,EACO,G,uBAzFR,WAuFC,MAvFmC,GAAH,QAAa,aAA5B,OAwFjB,wBAxF2B,EAwF3B,EACO,G,uBAvFR,WAqFC,MApFmC,GAAH,QAAa,aAA5B,OAqFjB,wBArF2B,EAqF3B,EACO,G,uBArFR,WAmFC,MAnFmC,GAAH,QAAa,aAA5B,OAoFjB,wBApF2B,EAoF3B,EACO,G,uBApFR,WAkFC,MAlFmC,GAAH,QAAa,aAA5B,OAmFjB,wBAnF2B,EAmF3B,EACO,G,uBAnFR,WAiFC,MAjFmC,GAAH,QAAa,aAA5B,OAkFjB,wBAlF2B,EAkF3B,EACO,G,uBAjFR,WA+EC,MA9EmC,GAAH,QAAa,aAA5B,OA+EjB,wBA/E2B,EA+E3B,EACO,G,uBA/ER,WA6EC,MA7EmC,GAAH,QAAa,aAA5B,OA8EjB,wBA9E2B,EA8E3B,EACO,G,uBA9ER,WA4EC,MA5EmC,GAAH,QAAa,aAA5B,OA6EjB,wBA7E2B,EA6E3B,EACO,G,uBA7ER,WA2EC,MA3EmC,GAAH,QAAa,aAA5B,OA4EjB,wBA5E2B,EA4E3B,EACO,G,uBA3ER,WAyEC,MAxEmC,GAAH,QAAa,aAA5B,OAyEjB,wBAzE2B,EAyE3B,EACO,G,uBAzER,WAuEC,MAvEmC,GAAH,QAAa,aAA5B,OAwEjB,wBAxE2B,EAwE3B,EACO,G,uBAvER,WAqEC,MApEmC,GAAH,QAAa,aAA5B,OAqEjB,wBArE2B,EAqE3B,EACO,G,uBArER,WAmEC,MAnEmC,GAAH,QAAa,aAA5B,OAoEjB,wBApE2B,EAoE3B,EACO,G,+BAnER,YAiEC,MAhEiD,GAAH,QAAiB,YAAd,GAAtB,OAiE3B,wBAjEqC,EAiErC,EACO,G,sCAhER,YAC+C,MAAkB,EAAR,IA6DxD,EA7DwE,GAAH,QAAoB,YAAjB,GAA1B,OA8D9C,wBAAU,EAAV,EACO,G,sCA9DR,YAA+C,MAAkB,EAAR,IA4DxD,EA5DwE,GAAH,QAAoB,YAAjB,GAA1B,OA6D9C,wBAAU,EAAV,EACO,G,qCA5DR,YAA6C,MAAkB,EAAR,IA0DtD,EA1DsE,GAAH,QAAmB,YAAhB,GAA1B,OA2D5C,wBAAU,EAAV,EACO,G,qCA3DR,YAA6C,MAAkB,EAAR,IAyDtD,EAzDsE,GAAH,QAAmB,YAAhB,GAA1B,OA0D5C,wBAAU,EAAV,EACO,G,oCAzDR,YAA2C,MAAkB,EAAR,IAuDpD,EAvDoE,GAAH,QAAkB,YAAf,GAA1B,OAwD1C,wBAAU,EAAV,EACO,G,oCAxDR,YAA2C,MAAkB,EAAR,IAsDpD,EAtDoE,GAAH,QAAkB,YAAf,GAA1B,OAuD1C,wBAAU,EAAV,EACO,G,qCAtDR,YAA6C,MAAkB,EAAR,IAoDtD,EApDsE,GAAH,QAAmB,YAAhB,GAA1B,OAqD5C,wBAAU,EAAV,EACO,G,qCArDR,YAA6C,MAAkB,EAAR,IAmDtD,EAnDsE,GAAH,QAAmB,YAAhB,GAA1B,OAoD5C,wBAAU,EAAV,EACO,G,sCAnDR,YAA+C,MAAkB,EAAR,IAiDxD,EAjDwE,GAAH,QAAoB,YAAjB,GAA1B,OAkD9C,wBAAU,EAAV,EACO,G,sCAlDR,YAA+C,MAAkB,EAAR,IAgDxD,EAhDwE,GAAH,QAAoB,YAAjB,GAA1B,OAiD9C,wBAAU,EAAV,EACO,G,uCAhDR,YAAiD,MAAkB,EAAR,IA8C1D,EA9C0E,GAAH,QAAqB,YAAlB,GAA1B,OA+ChD,wBAAU,EAAV,EACO,G,uCA/CR,YAAiD,MAAkB,EAAR,IA6C1D,EA7C0E,GAAH,QAAqB,YAAlB,GAA1B,OA8ChD,wBAAU,EAAV,EACO,G,sBA7CR,WAEC,MAAa,cACb,OAAyB,IAAT,IAAX,IAEsB,IAAX,OADhB,EAAqB,IAAX,EAAqB,eAAa,KAGf,IAAb,SADhB,EAAqB,MAAX,EAAuB,eAAa,MAGf,IAAf,WADhB,EAAqB,QAAX,EAAyB,eAAa,KALb,EAOnC,EAAqB,UAAX,EAA0B,eAAa,I,sBAIlD,WACC,MAAQ,gBAER,EAAa,IAAO,EACpB,OAFyB,IAAN,EAAN,IAEI,GAAC,GAAS,EAAV,EAAiB,G,gCAGnC,cACoD,YAA3B,UAAmB,IAAuB,GAAf,uBAAU,GAAc,I,iCAE5E,mBAA0B,UAAmB,IAC5C,MAAU,uBAAU,GACpB,EAAgB,GAAJ,EAAc,GAAF,IACxB,OAAiD,GAAtC,GAAJ,EAAe,EAAQ,EAAG,EAAS,GAAgB,I,iCAG3D,iBAAgB,UAAmB,IAClC,MAAkB,YAClB,EAAe,GAAH,QAAa,GAAF,GAAY,aACnC,EAAc,GAAS,EAAG,EAAW,QAAG,OACxC,EAAyD,GAA5C,GAAH,QAAe,EAAa,EAAM,EAAN,GAA4B,GAElE,OADA,YAAa,GAAS,EAAG,EAAM,EAAN,EAAa,EAC/B,G,kCAGR,YAAoD,YAAnC,UAAmB,IAAgB,wBAAW,gBAAY,I,yBAE3E,cAEC,MAAU,IAEV,OADA,wBAAU,EAAV,EACO,G,qG/C7GR,kB,YAA4B,UAAc,QAAG,UAAW,EAAO,OAAO,EAAd,GAAxD,6C,kBACA,WAAiC,QAAf,K8BMlB,EAAW,U,IAEV,E9BR6C,kB8BQ7B,E9BRsC,EAAG,GAAK,EvFyBT,IqHjBrC,E9BRoD,IAAiB,E,Q8BUrF,aAAK,G9BVY,U,+FAIlB,uBAA6B,UAAc,QAAG,UAAW,EAAO,OAAO,EAAd,GAAzD,8C,2BACA,YAAsC,MAAf,K8BCvB,EAAW,U,IAEM,E9BHiC,GAAU,MAAU,mB8BGrD,E9BH+D,EAAG,G,Q8BKlF,aAAK,K,mB9BJN,a,oSAiBA,a,+FAKA,YAAgC,OAAI,kBAAK,EAAU,eAAW,EAAG,IAAM,EAA4B,IAAzB,eAAU,IAAyB,G,0BAC7G,kBAAmF,a,2BACnF,kBAAqF,M,iDACnC,WAAQ,a,IAAhC,YAAS,Q,mBACnC,a,+HAG0C,2C,IAAA,yC,kCAG1C,gBACC,MAAW,UAAK,aAAK,cAAU,EAAQ,EAAQ,GAE/C,OADA,+CAAY,IACL,G,kBAGR,WAEC,OADW,kBAAK,iBAAW,EAAG,IAClB,GAAU,EvFrB+B,IuFsB9C,iBAAU,I,mCAGlB,gBACC,UAAK,cAAM,cAAU,EAAQ,EAAQ,GACrC,+CAAY,K,2BAGb,YACC,iBAAU,GAAU,GAAL,GACf,mBAAM,iBAAW,EAAG,I,iDAKpB,WAAQ,iBAAK,Q,IADb,YAAmB,sB,oDAGA,WAAQ,4BAAS,kB,mBAErC,WACC,UAAK,S,mBAGN,WAA6B,UAAK,S,mBAElC,WAAc,cAAW,UAAM,gB,sBAE/B,WAAkC,oBAAa,UAAb,KAAoB,cAApB,gB,gDAvC4C,kD,IAAA,gD,+HAyD7E,WAAQ,gC,IADR,YAAa,MAAM,Q,6BAGpB,YAA4C,OAAS,GAAT,EAAe,uBAAW,uB,gCAEtE,cACC,GAAI,wBAAe,MAAM,GAAyB,oBAClD,MAA0B,qBAAc,KAAK,kBAAL,IAAiB,IAEzD,EADwB,qBAAc,qBAAsB,KAC3C,SAAoB,GAAqB,QAC1D,OAAO,OAAK,EAAqB,I,0BAGlC,kB,MACwC,wBAAiB,EAAU,GAA7D,iBAAqB,iBAC1B,OAAO,kBAAK,aAAK,EAAqB,EAAQ,EAAQ,I,2BAGvD,kB,MACwC,wBAAiB,EAAU,GAA7D,iBAAqB,iBAC1B,OAAO,kBAAK,cAAM,EAAqB,EAAQ,EAAQ,I,mBAGxD,a,sBAEA,WAAkC,8BAAuB,kBAAvB,KAA8B,uBAA9B,gBAA0C,qBAA1C,gB,0HA4EjC,WAAQ,iBAAK,M,IACb,YAAmB,oB,iDAGnB,WAAQ,OAAU,eAAV,UAAK,O,IACb,YAAmB,eAAkB,a,mCAEtC,YAA8C,aAAW,GAAG,GAAU,mC,0BAEtE,kBACC,2BAAc,GACd,MAAW,EAAS,QAEpB,IAAI,GAAa,KAAQ,cAArB,GAA8B,OAAO,EAC/B,MAAI,KAAK,QAAT,EAAkB,EAAO,EAAP,EACZ,E9LsyBkC,EAAWztB,IAAIjI,EAAG4B,G8LtyBzC,EAAN,EAArB,E9L6yBkD,EAAW6J,IAAI,E8L7yB/B,GAElC,OnN8VEiqB,EmN/VQ,KAAK,KAAK,KAAY,EAAQ,EAAd,IAAsB,ErF1MN,GqF2MnC,G,2BAGR,kBACC,2BAAc,GACd,gBAAY,EAAI,UAAK,KAAT,EAAgB,qBAAW,IAAK,QAA5C,O9LsyBkD,EAAWjqB,IAAIzL,EAAG4B,GrB7clE8zB,EmNxVQ,EAAgB,KAAK,KAAK,KAAM,EAAS,QAAjC,IAA0C,ErFjNlB,I,mBqFoN3C,a,sBAEA,WAAkC,8BAAwB,UAAK,KAA7B,K,oOkDjOnC,W,kEAC0B,K,wBAExB,e,cAAA,4C,OAAA,W,6GACC,kBAFF,QAGC,kBAAS,E,+BAEV,GAAI,yBAAkB,kEAAiB,kBACtC,MAAM,OAAkB,iBAAO,mB,uTAIjC,2GAAoG,4BAA0B,EAA1B,sE,+FNHlG,YACC,GAAI,GAAS,eAAQ,OrQc0B,MAAM,OAAoB,yDqQdlB,GACvD,OAAW,GAAS,EAAG,GAAQ,eAAQ,I,sEAXzC,0C,8BAoBkB,eAAC,YACD,eAAC,qBACH,eAAC,qBACO,eAAC,gBACxB,sB,4IAJA,WAAkB,kB,0BAAlB,+BAAkB,oB,sBAAlB,iBAAkB,qCAAlB,K,sBAAA,0BAAkB,gC,oBAAlB,mHAAkB,4B,8CACA,wC,mFAAlB,WAAkB,iB,0BAAlB,+BAAkB,mB,sBAAlB,iBAAkB,mCAAlB,K,sBAAA,0BAAkB,+B,oBAAlB,mHAAkB,0B,8CACF,wC,iFAAhB,WAAgB,iB,0BAAhB,+BAAgB,mB,sBAAhB,iBAAgB,iCAAhB,K,sBAAA,0BAAgB,+B,oBAAhB,mHAAgB,0B,yFAChB,WAAwB,sB,0BAAxB,+BAAwB,wB,sBAAxB,iBAAwB,mDAAxB,K,sBAAA,0BAAwB,oC,oBAAxB,mHAAwB,oC,8EACxB,0CACA,sB,uEAAA,0CACA,sB,yEAAA,0CAMD,sBAME,MAAe,OAHhB,WAKQ,E,wFAPR,YAKC,MAAe,OAL2B,OAAI,EAM9C,GACO,EAP6C,Y,mGAIrD,wEACC,MAAe,MAEf,OADS,EAAT,GACO,O,4BAGR,YAAoC,cAAS,IAAmB,OAAK,O,4BAErE,YAPC,MAAe,OAO2C,OAAI,EAN9D,GACO,G,4BAMR,YAA6C,2BAAO,I,mCAEpD,cACC,IACe,EADf,EAAc,GAAM,a,K5NwDf,IAAIxT,E4NvDF,E5NuDU,a4NvDM,G5NwDlB,GAAa,MAATA,E,CAAe,E4NxDD,E5NwDc7gB,WAAb,QAEnB,IAAIoiB,EAAY,EAChB,E4N3DkB,E5N2DC5hB,OACnB,EAAS,GAAcA,G,GAEnB,I4N7DR,E5N6DQ,EAAiB,EAAAqgB,GACjBwB,EAAG,e4N/DW,E5N+DGD,EAAWE,EAAWC,MAAMzS,OAC7CuS,EAAG,e4N/DX,qB5N+D4BC,E4N/DR,YAAP,YAAmB,KAAhC,EAAuC,I5NgE/BF,EAAYE,EAAWC,MAAM3M,aAAe,EAAhC,EACZiL,EAAQyB,EAAW5N,aACd0N,EAAY5hB,GAAmB,MAATqgB,GAE3BuB,EAAY5hB,GACZ6hB,EAAG,e4NtEW,E5NsEGD,EAAW5hB,GAGhC,EAAO6hB,EAAGriB,iB,G4NzEf,U,wEAlBF,0CA6EuB,mBACtB,mBACA,wBACA,gBAEA,SAAU,KACV,UAAW,EAEX,cAAc,EACd,iBAAkB,EAClB,qBAAqB,EOrHvB,iBAA+C,OAAc,GrSmStB,OqSnSQ,GAAuB,GACtE,iBAAgD,OAAe,G/LiTrB,O+LjTM,GAAwB,GCJxE,sB,4BR2DC,YAA0B,YAAkB,gBAAQ,UAAW,WAArC,M,0BAC1B,YAA+B,YAAkB,gBAAQ,eAAgB,mBAA1C,M,0BAC/B,YAAwB,YAAkB,gBAAQ,UAAW,WAArC,M,0BACxB,YACK,SAAa,kBAAK,I,0BAGvB,YAAsB,YAAkB,gBAAQ,UAAW,WAArC,M,kCAEtB,YACsC,MAKrC,OALA,KAAK,gBAAQ,UAAW,QAAa,eACpC,MAAe,OAAf,OACS,EAAT,GACA,MAEM,M,4FAGR,cACC,kB1NuJ4D,I0NvJnD,E1NuJyCQ,O0NvJ1B,IAAW,EAAF,MAejC,e,IAdO,I,QAkBN,iBAhBD,OADA,kBAAK,KACE,Q,4FAGR,uBAA6B,UAAgB,SAAI,UAAiB,IACjE,M1NgJ4D,I0NhJ3C,E1NgJiCA,O0NhJhB,GAAQ,IAAG,EAC7C,kB1N+I4D,I0N/InD,E1N+IyCA,O0N/I1B,IAAG,EAAe,EAAF,KAAQ,GAOhD,e,IANO,I,QAUN,iBARD,OADA,kBAAK,IAAG,GACD,Q,gGAGR,YACC,e,IAEC,I,QAEA,iBAED,OAAO,Q,qBAGR,WACC,qBAAQ,iB,uBAGT,WACC,qBAAQ,iB,+BAeR,YAA6B,gBAAI,eAAO,I,+BACxC,YAA2B,gBAAI,eAAO,I,oBAEtC,WACK,eAAU,uBAAU,IACxB,wBACA,cAAU,G,0BAGX,YnCjID,IACe,MAFf,EAAQ,EACD,EmCkIL,EnClIS,M,CACV,ImCkIQ,EnClIR,EmCiIC,EnCjIQ,aAAK,YAAL,ImCmIN,YADK,EACL,I,CACC,GAAI,a,CACC,OAAC,sBAAD,IAAgC,E1N6FmB,I0N7F9B,EAAO,I1N6FaA,Q0N7F7C,EACC,cAEI,cAAU,uBAAU,iBAAQ,mBAAmB,uBAAU,KAI/D,GADA,uBAAU,EAAO,KACb,e,CACH,IjRu1Ba,EiRv1Bb,YjRs1BC4T,EAAQ,EACZ,IAAgB,KiRv1BL,EAAO,KjRu1BF,a,CAAA,mBiRv1BoB,KAAN,GjRu1BM,GAAApB,MAAU,SiRv1B3C,YjRw1BIoB,EiRx1BJ,EACA,mBAEA,cAAU,EAEX,qBAAiB,OAElB,SAlBK,EAkBL,IAA0B,kBAAK,EAAO,WAAW,iBACjD,EAnBK,EAmBL,SAnBK,EAmBL,OACC,qBAAiB,EACjB,mCAAmB,UAAyB,GAAQ,GAApD,GAED,EAvBK,EAuBL,MACK,sBACH,cACA,qBAAiB,GAGnB,SA7BK,EA6BL,KACC,8BAAoB,SAAK,UAAM,EAAO,Q,kGAO3C,cACmE,MAA3D,OAAkB,EAAa,sBAAkB,GAAxD,OrQ7FE,EqQ6FwE,aAAK,sBrQ5FtE,EqQ4FiF,IAAI,Y,gGAG/F,qBAAkC,UAAiB,IAzFlD,M1NgJ4D,I0NtDzC,E1NsD+B5T,O0NhJhB,GAAQ,IA0FvB,EAzFnB,kB1N+I4D,I0NtDvD,E1NsD6CA,O0N/I1B,IAAG,EAyFtB,EAzFmC,KAAQ,GAOhD,e,IAkFsC,I,QA9ErC,iBA8ED,OAvFA,kBAAK,KACE,Q,sGAwFR,YAAyC,yBAAK,M,yFAE9C,8FlR/CD,8CkR+CC,qBACgC,MAAjB,gCAAiB,EAAjB,EAAM,WAAW,aAAK,IAAtB,wBAAoD,GAApD,MlR1CiC,MAAM,EkR0CyB,kBlR1CKR,YkR0CnF,MAAc,EACd,kBAAK,GAxFL,e,IA0FC,I,QAtFA,iBAwFD,kBAAK,KAAI,EAAJ,U,8BAGN,YACC,6BAAuB,GAAwB,I,8BAEhD,mBAAa,WAAoB,QAAM,UAAsB,MAC5D,MAAU,sBAAuB,KAAiB,GAClD,OAAW,IAAe,MAAM,EAAa,GAAJ,EAAY,KAAM,I,sBAG5D,WAAkC,6BAAS,MAAiB,I,yFQnM5D,uBAA0B,UAAa,QAAG,UAAW,EAAI,aAAQ,UAAa,IAC7E,OAAe,EACf,EAAU,E,EACJ,UAAU,EAAV,EAAsB,EAAtB,I,CACL,MAAQ,aAAI,GACZ,GAAS,KAAL,GAAiB,KAAL,EACf,EAAiB,KAAL,M,CAEZ,MAAc,GAAF,GACZ,GAAI,EAAQ,EAAG,QAEf,GADA,WAAO,IACA,EAAP,GAGF,OAAW,EAAU,EAAS,GAAC,G,iCAGhC,qBAA6B,UAAa,QAAG,UAAW,EAAI,QAQ3D,IAPA,MAAU,EACV,EAAW,EACX,GAAgB,EAChB,GAAY,EACZ,GAAa,EACb,GAAqB,EACrB,EAAe,EACf,EAAU,EAAV,EAAsB,EAAtB,I,CACC,MAAQ,aAAI,GACZ,OAAM,G,KACL,I,KAAA,GAAY,GAAQ,EAApB,M,KACA,GACK,EAAO,GAAiB,EAAU,GAAS,EADhD,M,KAGA,GAAO,GAAY,EAAnB,M,QAEK,EAEH,GADA,EAAY,GAAZ,KACc,GAAF,GAAZ,GAEI,IAAW,GAAQ,IACvB,GAAO,GACP,GAAS,GAAF,KAKA,IAAmB,EAAQ,EAAgB,GAAC,EAAc,EAArE,EAAW,EAAM,ElPqWmC,EAAW0G,IkPrWtC,GlPqWkD,GkPpW3E,OAAW,GAAS,EAAS,G,2EA/C/B,0CAmDA,eAEC,UAAQ,IAAO,GAAQ,GAAO,EAAO,GACrC,GAAQ,IAAO,GAAQ,IAAO,EAAO,GAAM,GAAb,EAC9B,GAAQ,IAAO,GAAQ,GAAO,EAAO,GAAM,GAAb,GACtB,ECvDT,cAEuB,MAFvB,QAEC,yBAAiB,IAAK,kBAAE,iBzR6K2C8Z,iByR1KnE,8BAAsB,GAAK,8BAAE,sBzR0KsCA,eyR1KxC,QAE3B,yBAAiB,GAAK,8BAAE,OAAU,GAAV,YAAmB,QAArB,QAGtB,uBAAe,GAAK,8BAAE,OAAU,GAAV,YAAmB,QAAoB,GAAV,YAAmB,QAAoB,GAAV,YAAmB,QAA/E,QACpB,qBAAa,GAAK,8BAAE,OAAU,GAAV,YAAmB,QAArB,QAElB,qBAAa,GAAK,8BAAE,OAAU,GAAV,YAAmB,QAArB,QAClB,yBAAiB,GAAK,8BAAE,OAAe,GAAf,iBAAwB,YAA1B,QACnB,yBAAiB,GAAK,8BAAE,OAAU,GAAV,YAAmB,YAArB,QACtB,sBAAc,GAAK,8BAAE,OAAU,GAAV,YAAmB,SAArB,Q,kDAfV,WAAQ,e,oDACpB,W,OpMoC2F,yBAAA/iB,S,uDoMlC1E,WAAQ,a,yDACzB,W,OpMiC2F,8BAAAA,S,oDoM/B3F,W,OpM+B2F,yBAAAA,S,iDoM9BhF,WAAQ,OAAC,kB,kDACR,WAAQ,OAAC,kB,kDACrB,W,OpM4B2F,uBAAAA,S,gDoM3B3F,W,OpM2B2F,qBAAAA,S,gDoMzB3F,W,OpMyB2F,qBAAAA,S,oDoMxB3F,W,OpMwB2F,yBAAAA,S,oDoMvBxF,W,OpMuBwF,yBAAAA,S,iDoMtBxF,W,OpMsBwF,sBAAAA,S,+CoMpBlF,WAAQ,OAAgB,GAAhB,GAAyB,S,mDAC7B,WAAQ,YAAmB,a,0DACjB,WAAQ,uBAAa,iBAAc,aAAU,iBAAc,e,gDACxE,WAAQ,YAAmB,U,oDAEvB,WAAQ,6BAAkB,e,qDACzB,WAAQ,6BAAkB,c,sDACzB,WAAQ,6BAAkB,a,qDAC3B,WAAQ,6BAAkB,gB,8DACjB,WAAQ,yBAAe,mB,oEA3BhD,0CCCA,cACC,gBAAgB,EAqBjB,cACC,aAA4B,KAI4B,sFC9BzD,eAA6B,OAAW,eAAX,EAAK,OAAL,QAAuC,eAAlB,EAAK,eCK1B,eAAC,gBbAf,mBACd,UADgC,UAAmB,aAAQ,UAAe,GAA3D,WAAiB,YAA2B,WAK3D,YAAkB,KAAK,IAAI,OAJ3B,sB,4FWAA,YACM,iBACJ,gBAAY,EACZ,Q,kNAqBsD,W,0CAAE,e,cAAA,oD,OAAA,W,qCAAA,qB,2OAF1D,cAEwD,MAEvD,OAHU,qBACA,aAAU,GAAiB,WAAkB,kB,MAAA,Y,OAAA,yBAEhD,gBAAU,U,4KE1BlB,cAAyE,qBAAS,S,gHAClF,gBAAgF,cAAS,IAAI,M,qGbA5F,YAA8C,YAAS,iB5PKamc,G4PLC,GAAL,M,wEADjE,0CAuJc,mBAKb,KAJA,cACA,aACA,eAEA,sB,oDAvJkB,WAAQ,mBAAS,KAAK,IAAd,K,8CACV,WAAQ,OAAC,KAAK,KAAO,KAAK,IAAI,U,kDAC1B,WAAQ,OAAC,KAAK,IAAM,KAAK,IAAI,U,mBAElD,WAAoB,SAAW,G,iCAC/B,YAA2C,gCAAY,EAAM,MAAO,EAAM,aAAe,EAArB,I,iCACpE,cAAsE,YAAtD,UAAa,KAAK,UAAK,UAAW,KAAK,KAAe,OAAO,EAAO,EAAK,O,+BAEzF,YACC,MAAY,OAAO,KAAK,IAAK,KAAK,IAAM,EAAX,EAAmB,MAEhD,OADA,cAAK,IAAO,EAAZ,EACO,G,+FAGR,YACC,MAAY,KAAK,IACjB,IACA,MAAU,KAAK,IACf,OAAW,EAAM,EAAO,KAAK,cAAM,EAAO,GAAU,Q,2BAGrD,cAA0C,YAAK,I/QmKgDrT,U+QnKlC,EAAO,I,0BACpE,YAA+B,qBAAO,KAAK,IAAK,I,kBAChD,WAAmB,OAAI,aAAS,KAAK,IAAL,WAAS,KAAK,KAAU,G,sBACxD,WAAuB,OAAI,aAAS,KAAK,IAAL,WAAS,KAAK,KAAU,G,0BAC5D,YAAgD,MAAjB,KAAK,aAAK,GAAV,OAAyB,qBpQ4C9C,G,+BoQ3CV,YACC,MAAuB,GAAT,KAAK,IAAY,EAAM,UACrC,SAAW,GAAW,EAAG,EAAa,a,uCAEvC,YACC,uBAAU,GACN,cAAW,sBAAc,GAAM,kBAAK,I,uGAEzC,YAEC,KAAO,cAAW,EAAO,KAAK,aAC7B,KAAK,c,uGAIP,YACO,KAAO,eAAY,EAAY,kBAAkB,mB,wGAExD,iCARC,IArBA,MAAY,KAAK,IAqBV,cAAW,EAAY,kBACxB,gBApBN,MAAU,KAAK,IA2B2C,OA1B/C,EAAM,EAAO,KAAK,cAAM,EAAO,GAAU,U,+BA4BrD,YA/BC,MAAY,KAAK,IA+BuB,0BA7BxC,MAAU,KAAK,IA6BY,OA5BhB,EAAM,EAAO,KAAK,cAAM,EAAO,GAAU,M,uCA6BrD,YAhCC,MAAY,KAAK,IAgC+B,kCA9BhD,MAAU,KAAK,IA8BoB,OA7BxB,EAAM,EAAO,KAAK,cAAM,EAAO,GAAU,M,sGA8BrD,iCAZC,IAYsD,MAjCtD,EAAY,KAAK,IAqBV,cAAW,EAAY,kBACxB,gBApBN,MAAU,KAAK,IA+BkC,cAAK,EA9B3C,EAAM,EAAO,KAAK,cAAM,EAAO,GAAU,MA8BH,EAAoC,Q,sGACtF,iCAPO,IAOgD,MAlCtD,EAAY,KAAK,IA2BJ,eAAY,EAAY,kBAAkB,gBAzBvD,MAAU,KAAK,IAgCkC,cAAK,EA/B3C,EAAM,EAAO,KAAK,cAAM,EAAO,GAAU,MA+BH,EAAoC,Q,4BACtF,YAA6B,YAAlB,UAAa,GAAK,KAAa,IAAb,KAAkB,IAAL,IAAb,M,sBAC7B,WAAuB,OAAI,aAAS,KAAK,IAAL,WAAS,eAAQ,IAAS,G,kBAC9D,WAAmB,OAAI,aAAS,KAAK,IAAL,WAAS,eAAQ,IAAS,G,uBAC1D,YAEC,MAAU,KAAK,IAEf,OADA,cAAK,IAAO,EAAZ,EACO,G,2BAGR,WAA8B,yBAAK,iB,gCAEnC,YACC,MAAa,KAAK,aAAK,EAAS,QAChC,IAAI,IAAU,GAAU,MAAM,GAAyB,aAAY,EAAZ,gBAAkC,EAAlC,QAA8C,UACrG,OAAO,G,gCAGR,YACC,MAAkB,GAAL,KAAK,YAClB,GAAI,IAAU,EAAU,MAAM,GAAyB,iCAAY,GAAZ,oCAAkC,GAAlC,QAA8C,W,4BAGtG,YAA6B,+BAAW,oBAAE,K,0BAC1C,YAA2B,YAAlB,UAAa,GAAK,KAAa,IAAb,KAAkB,IAAL,IAAb,M,sBAC3B,cACa,MAAL,KAAK,IAAc,EAAS,KAAK,OAAd,EzOq6BwB,EAAWK,IyOr6B/B,EzOq6BsCrG,GyOr6BnB,EAAI,EAAM,EAAN,EAAJ,EAAkB,KAAK,OAAxD,EzOq6BkC,EAAWqG,IAAIjI,EAAG,GyOr6BpE,O/Q4G8F,EAAA4H,UAAA,EAAsBya,I,4B+QzGrH,YACC,OAAI,gBAAO,KAAK,IAAK,EAAI,QAAW,IACpC,cAAK,IAAO,EAAI,OAAhB,EACO,GAFyC,M,iCAKjD,YACC,OAAI,gBAAO,KAAK,IAAK,EAAI,QAAW,GAAK,KAAK,kBAAU,EAAI,QAAa,M,8BAE1E,YAAqC,2BAAO,I,mCAC5C,YAA0C,gCAAY,I,uCAEtD,YlC5FA,IkC6Fc,IlC5FC,EkC4FD,EAAb,EAAK,QlC9FN,EAAQ,EACD,EAAI,U,CACV,MAAS,GAAK,YAAL,IkC6FR,GAAS,mBAAS,cAAY,SAAK,IAAO,OAAY,uBAAU,GAEjE,OAAO,M,wBAGR,WA9DC,O,CAAO,MA8DW,KA9DX,Q,GAAA,IAAW,EA8DiC,GAAH,GAA9B,KA9DY,e,QA8DZ,KA7DZ,WA6DY,a,6BAEnB,WAhEC,IArBA,MAAY,KAAK,M,CAqBV,wB,CAAW,MAAY,gBAAZ,EAgEqB,GAAH,QAAwC,KAAN,OAAmB,MAAN,OAAmB,KAAN,M,YA/D1F,gBApBN,MAAU,KAAK,IAmFQ,OAlFZ,EAAM,EAAO,KAAK,cAAM,EAAO,GAAU,M,4CAmFrD,WACmB,IAAX,SAAW,GAAL,KAAK,a,KACjB,G,KAAA,GAxFD,MAAY,KAAK,IA0Fd,EAAqB,oBAChB,uBAAU,GACV,gBA1FR,MAAU,KAAK,IAuFR,EAtFI,EAAM,EAAO,KAAK,cAAM,EAAO,GAAU,KAqFnD,M,QAOQ,OART,U,8BAYD,YACgB,MAAc,EAAT,KAAK,IAAI,EAAU,KAAK,IAA/B,UAAE,EAAF,EAAE,a/QkEoD,EAAYza,UAAUwa,K+QlEpC,OAAO,KAA5D,IACA,EAAQ,EADK,EACE,OAAP,YAAc,IAAK,MAE3B,OADA,cAAK,IAAO,EAAE,OAAd,EACO,G,mCAGR,YACgB,MAAc,EAAT,KAAK,IAAI,EAAU,KAAK,IAA/B,UAAE,EAAF,EAAE,a/Q2DoD,EAAYxa,UAAUwa,K+Q3DpC,OAAO,KAA5D,MAAa,EACb,OAAO,KAAK,kBAAU,IAAO,OAAP,YAAc,IAAK,MAAM,S,mCAGhD,cACC,IAAI,gBAAO,KAAK,IAAK,EAAM,QAAW,GAAO,OAAO,KACpD,MAAiB,KAAK,IACtB,EAAqB,GAAT,KAAK,IAAY,EAAK,KAAK,KACvC,OAAI,EAAQ,EAAU,MAEtB,SAAW,EAAQ,EAAI,OAAZ,EACJ,KAAK,cAAM,EAAY,KAAK,O,mBAGpC,WAAyB,cAAU,SAAK,UAAM,W,6BAE9C,YACC,QAAI,oBAAK,EAAI,QAAW,KACvB,kBAAK,EAAI,SACF,I,4BAWP,YACC,6B5PxJkEnH,G4PwJpD,GAAL,E1RrEuC,Q,8B0RuEjD,YhSs/RQ,IA6UM,EA7UN,EAAM,EgSp/RC,EhSo/RY,QA6U1B,IAAK,EAAL,MgSj0Sc,EhSi0Sd,W,CAAa,MgSj0SC,EhSi0Sd,GACIxG,EAAY,UAAcC,EgSl0SF,QlC9J/B,IkC8JG,IlC7JY,EkC6JZ,E5P5JkEuG,G4P4JT,GAAX,GAAT,GhSm0S9BxG,MgSl0SP,EzR7D0D,IuPnG7D,EAAQ,EACD,EkCgKJ,ElChKQ,Q,CACV,MkC+JE,GlC/JY,YAAL,IvPsOP,cyRtEK,GAAO,GAEZ,OAAO,OAAS,EAAM,EAAK,I,wEAX7B,0CA4BW,mBACX,KADY,WAAc,WAAc,cACxC,sB,8BAdA,YAA4B,kBAAI,kBAAY,I,6BAE5C,clCzKD,IkC0KU,IlCzKK,EkCyKL,EAAR,alC3KF,EAAQ,EACD,EAAI,U,CkC2KR,MAAa,OlC1KN,GAAK,YAAL,KkC2KP,GAAI,sBAAS,GAAK,OAAO,EAE1B,OAAO,M,sBAGR,WAA0B,kBAAiB,GAAL,YAAkB,KAA9B,K,wFAKzB,cACe,MAAI,EAAE,IAAN,EAAW,EAAE,IAAb,EzO2zBkC,EAAWxM,IAAI,EAAG,GyO3zBjC,EAAI,EAAE,IAAN,EAAW,EAAE,IAA9C,OAAO,SzOk0ByC,EAAWwD,IAAI,EAAG,GyOl0Bd,EAAE,S,iCAGvD,YACC,GAAI,EAAK,UAAW,OAAO,KlClM9B,IkCmMG,IlClMY,EkCkMZ,EAAY,cAAK,GACjB,KAAU,EAAM,KAChB,KAAU,EAAM,KlCtMnB,EAAQ,EACD,EkCsMJ,ElCtMQ,M,CACV,MkCqME,ElCrMO,aAAK,YAAL,IkCsMA,EAAI,IAAJ,EAAS,EAAE,IAAjB,IzOkzB+C,EAAWxD,IAAIjI,EAAG4B,GyOjzB3D,MAAI,IAAJ,EAAS,EAAE,IAAjB,IzOwzB+C,EAAW6J,IAAI,EAAG,GyOtzBlE,OAAO,OAAO,IAAK,IAAK,EAAM,S,yBAG/B,WAAoB,cAAO,EAAG,EAAG,OAAU,M,wEAjB5C,0CchMF,iBAA4D,OAAS,GAAL,EAAc,GAAiB,GAAL,EAAoB,GAAgB,KAC9H,iBAA6D,OAAS,GAAL,EAAc,GAAiB,GAAL,EAAqB,GAAgB,KCDhI,sBACC,YAAyB,MAEzB,2BAA4B,E,8BfiN3B,YAAoC,UAAS,KAAK,KAAO,GAAS,KAAK,K,sBACvE,WAA0B,OAAE,SAAF,eAAO,U,+CAEhB,WAAQ,YAAK,OAAO,Q,+CACpB,WAAS,YAAK,OAAO,cAAM,KAAK,IAAK,KAAK,Q,6BAE3D,WAAgC,cAAO,KAAK,IAAK,KAAK,IAAK,KAAK,S,2BAChE,WAA8B,cAAO,KAAK,IAAK,KAAK,IAAK,KAAK,S,8BAC9D,YAAoC,cAAO,KAAK,IAAM,EAAX,EAAmB,KAAK,IAAM,EAAX,EAAmB,KAAK,S,4FAGvF,YAGO,IAUH,OAbc,WAAwB,GACzC,MAAU,KACV,EAAa,gBACb,OAAM,G,KACL,G,KAAA,S,QACQ,GAAU,0BAGnB,IADA,OAAa,EACN,c,CACN,MAAQ,gBACR,GAAS,KAAL,E,CACH,MAAS,gBAER,OAAM,G,KACL,GAAQ,KAAR,M,KAAc,GAAO,KAAP,M,KAAY,GAAQ,KAAR,M,KAAc,GAAO,KAAP,M,KACxC,GAAO,IAAP,M,KAAa,IAAO,KAAP,M,KAAiB,IAAO,KAAP,M,KAAa,IAAO,KAAP,M,KAAa,IAAO,IAAP,M,KACxD,IAA2B,KAAZ,GAAR,kBAAK,GAAS,KAArB,M,QACQ,MAAM,OAAY,qCAAgB,GAAhB,KAL5B,EAAI,sBAQE,IAAI,IAAK,E,CACf,GAAS,EACT,MAEA,EAAI,eAAO,IAGb,IAAK,GAAU,EACd,MAAM,GAAiB,+BAA+B,KAAK,IAApC,KAExB,OAAO,EAAI,Y,gCAIZ,YACC,MAAiB,EACjB,EAAe,EACf,EAAW,E,EACL,MAAQ,U,CACP,MAAQ,gBACb,UACC,kBAAK,GACL,GAAQ,EAAR,QAED,SAAG,MAAK,IAAR,oBAQC,QAPA,MAAY,EAAI,GAChB,kBAAK,GACL,QAEA,GADA,EAAY,GAAZ,KACY,EAAZ,GAOH,OAAyB,IAAd,EAAiB,EAAa,G,mCAG1C,iBAAkB,UAAkB,GAAO,KA1O1C,IA2OA,MAAY,W,CA3OL,wB,CAAW,MAAO,KAAK,WAAZ,EA8OhB,OAAM,IAAO,OAAM,IAAe,KAAN,OAAqB,KAAN,OAAqB,MAAN,OAAqB,KAAN,OAAqB,KAAN,M,YA7OzF,KAAK,WA+ON,MAAU,SACV,OAAI,IAAO,EAAc,EAClB,KAAa,oBAAY,KAAK,IAAK,EAAO,I,+BAGlD,YACuB,QAAJ,EAAI,OAAtB,UAAU,EAAV,QACC,GAAS,GAAL,KAAK,mBAAW,MAAM,aAAI,GAAI,OAAO,EAG1C,OADA,kBAAK,EAAI,SACF,G,+BAGR,YACC,OAAI,sBAAc,IAClB,kBAAK,IACE,I,gCAGR,iBAAe,UAAc,GAAoB,MAAT,KAAK,IAAI,EAAU,SAAM,EAAN,EAAnB,OAAS,GhRlNnC6I,GAAS,GAAKA,GAAS,MAAW,aAAIA,GAAY,GgRkNW,S,+BAE3E,YACC,SADc,UAAuB,OAAe,KAC5C,U,CACP,MAAW,SACX,EAAY,kBAA6B,wBAGzC,GAFA,kBACW,WACC,EjR/KkC,MAAM,IiR+K5B,qBAAoB,EAApB,QAA8B,SAA9B,KjR/K0DjT,YiRgLlF,EAAK,YAAI,GAGV,OAAO,G,6BAGR,YAGwB,MAFvB,SADW,UAA0B,EAAU,KACvC,U,CACP,MAAW,SACX,EAAS,OAAa,EAAb,kBAAa,aAAb,EAA4B,GAGrC,GAFA,kBACW,WACC,EjR5LkC,MAAM,IiR4L5B,yBAAwB,EAAxB,QAAkC,SAAlC,KjR5L0DA,YiR6LlF,EAAK,UAAI,GAGV,OAAO,G,8BAGR,YACC,SADY,UAAqB,OAAa,KACtC,U,CACP,MAAW,SACX,EAAQ,kBAAa,mBAAW,GAGhC,GAFA,kBACW,WACC,EjRzMkC,MAAM,IiRyM5B,kBAAiB,EAAjB,QAA2B,SAA3B,KjRzM0DA,YiR0MlF,EAAK,YAAI,GAGV,OAAO,G,uBAIR,WA7SC,IA8SA,MAAY,W,CA9SL,wB,CAAW,MAAO,KAAK,WAAZ,EAiThB,OAAM,IAAO,OAAM,IAAS,OAAM,IAAO,OAAM,KAAS,OAAM,IAAO,OAAM,IAAe,KAAN,OAAqB,KAAN,M,YAhTpG,KAAK,WAkTN,MAAU,SACV,OAAI,IAAO,EAAc,KAClB,KAAK,I/QjKkFuG,U+QiKpE,EAAO,I,mHelWlC,gD,oCAEA,kBAIwB,MAHvB,EAAU,IAAS,EAAO,MAC1B,EAAU,IAAS,GAAQ,MAEJ,IAAS,EAAT,EAAvB,UAAU,EAAV,QAEC,GAAM,GADN,GAAM,GAA0B,IAApB,EAAK,IAAX,GAAmC,OACnC,GAAW,MAElB,OAAQ,GAAO,GAAO,G,wEAbxB,0CCAA,sBACC,4BAA4B,EAEP,InTaL,EmTbK,iBAAS,KnTad,IAAM,OAAO,EAAb,EAAb,UAAU,EAAV,S,CmTXF,IADA,MnTasB,EmTZtB,EAAU,EAAV,EAAkB,EAAlB,IAAqB,EAAsB,IAAN,EAAN,IAAe,UAAiB,IAAO,EAAQ,IAAO,EnTY/E,EAAM,GmTXZ,EAHD,mBnTgBU,E,uDmTlBV,iD,oCAQA,kBAGwB,MAFvB,GAAQ,EACR,EAAY,mBACW,IAAS,EAAT,EAAvB,UAAU,EAAV,QAAqC,EAAI,EAA6C,KAAtC,EAA2B,IAApB,EAAK,KAAqC,IAAO,EACxG,OAAO,G,sEAbT,0C,eCQA,qBAA8F,YAAlD,UAAc,QAAG,UAAW,EAAK,OAAO,EAAZ,GAAsB,iBAAO,eAAc,EAAM,EAAQ,GCJjI,sBACI,aACiB,oEAGnB,IADoC,IACvB,QADuB,EAAhB,eAAS,KAC7B,EAAU,EAAV,GAAa,IAAb,ItRuEE,EsRvEqB,IAAK,EAClB,GAAM,KAAN,uCAAV,sBtRsEE,EsRtEqC,EAAT,wBAAM,IAAc,EAHhD,ctR0EO,E,4BqR5EV,oB,YAAsC,UAAc,QAAG,UAAW,EAAK,OAAO,EAAZ,GAAlE,mD,6FCQA,YAWO,IAVN,IAac,cAbd,EAAU,cAAiC,IAAT,EAAb,EAAI,OAAJ,GAAkB,EAAnB,MACF,EAAkB,EAAI,OAOlC,EAAQ,EACR,EAAQ,EACD,EAAI,GAEP,GADQ,cAVoD,KAAZ,EAAR,aAUrB,KACX,EACJ,YADJ,CAIA,MAAS,cAfmD,KAAZ,EAAR,cAepB,YAfoB,MAgBxC,EAAS,cAhBmD,KAAZ,EAAR,cAgBpB,YAhBoB,MAiBxC,EAAS,cAjBmD,KAAZ,EAAR,cAiBpB,YAjBoB,MAkBxC,EAAS,cAlBmD,KAAZ,EAAR,cAkBpB,YAlBoB,MAAnB,GAmBjB,YAAJ,IAAoC,GAAxB,GAAO,EAAM,GAAO,GAC5B,EAAK,KApBY,GAqBb,YAAJ,IAAoC,GAAxB,GAAO,EAAM,GAAO,GAC5B,EAAK,KAtBQ,GAuBT,YAAJ,IAA4B,GAAhB,GAAO,EAAK,KAvB1C,OAAW,GAAJ,EA2BM,I,4BAxBd,cAMO,IAGQ,kBALR,EAAQ,EACR,EAAQ,EACD,EALa,EAAI,QAOpB,GADQ,cANyC,IAAZ,EAMlB,IACX,EACJ,YADJ,CAIA,MAAS,cAXwC,IAAZ,GAWjB,YAXiB,KAYrC,EAAS,cAZwC,IAAZ,GAYjB,YAZiB,KAarC,EAAS,cAbwC,IAAZ,GAajB,YAbiB,KAcrC,EAAS,cAdwC,IAAZ,GAcjB,YAdiB,KAA1B,GAeP,YAAJ,IAAoC,GAAxB,GAAO,EAAM,GAAO,GAC5B,EAAK,KAhBE,GAiBH,YAAJ,IAAoC,GAAxB,GAAO,EAAM,GAAO,GAC5B,EAAK,KAlBF,GAmBC,YAAJ,IAA4B,GAAhB,GAAO,EAAK,KAnBlC,OAuBK,G,4BArBX,gBAGI,IAGQ,IAGgB,EACA,EACA,EACA,EAChB,EAEI,EAEI,EAhBhB,EAAQ,EACR,EAAQ,EACD,EAAI,GAEP,GADQ,cAAO,EAAI,IACX,EACJ,YADJ,CAIA,MAAS,cAAO,GAAI,YAAJ,KAChB,EAAS,cAAO,GAAI,YAAJ,KAChB,EAAS,cAAO,GAAI,YAAJ,KAChB,EAAS,cAAO,GAAI,YAAJ,KAChB,GAAI,YAAJ,IAAoC,GAAxB,GAAO,EAAM,GAAO,GAC5B,EAAK,KACL,GAAI,YAAJ,IAAoC,GAAxB,GAAO,EAAM,GAAO,GAC5B,EAAK,KACL,GAAI,YAAJ,IAA4B,GAAhB,GAAO,EAAK,KAIpC,OAAO,G,4BAGd,cAAoD,2BAAW,GAAJ,EAAgB,K,4BAExE,YAAqC,2BAAO,EAAK,EAAG,EAAI,S,4BAE3D,gBAMC,IASsB,MAMC,EAA6B,EAnBpD,EAAU,GAA+B,IAAT,EAAP,KAAY,EAAb,MACxB,EAAW,EACL,EAAW,EAAQ,EAAR,EACjB,EAAiB,EAAO,EACjB,GAAO,EAAO,EAAP,I,CACb,MAAc,GAAJ,EAAc,GACxB,IAAQ,EAAR,EACA,EAAI,eAAO,wBAAO,IAAS,GAAQ,KACnC,EAAI,eAAO,wBAAO,IAAS,GAAQ,KACnC,EAAI,eAAO,wBAAO,IAAS,EAAO,KAClC,EAAI,eAAO,wBAAO,IAAS,EAAO,KAEnC,GAAkB,IAAd,E,CACH,MAAc,GAAJ,GAAW,YAAP,IACd,EAAI,eAAO,wBAAM,IAAS,IAC1B,EAAI,eAAO,wBAAO,GAAQ,EAAO,KACjC,EAAI,eAAO,IACX,EAAI,eAAO,SACL,GAAkB,IAAd,E,CACV,MAAe,GAAJ,GAAW,YAAP,KAAmB,EAAU,GAAJ,GAAW,YAAP,IAC5C,EAAI,eAAO,wBAAM,IAAS,KAC1B,EAAI,eAAO,wBAAO,IAAS,EAAO,KAClC,EAAI,eAAO,wBAAO,GAAQ,EAAO,KACjC,EAAI,eAAO,IAEZ,OAAO,EAAI,Y,qEAxEb,0CCJA,sBACC,cAA2B,mBAC3B,kBAAmB,clSwKgD0c,ckSvKnE,kBAAmB,clS+KgDzC,c,gCkS7KnE,YACC,WAAG,MAAK,IAAR,iBADoC,GACrB,EAAI,GACnB,IAAG,MAAK,KAAR,iBAFoC,GAErB,EAAI,GAAM,GAAV,EACf,IAAG,MAAK,IAAR,iBAHoC,GAGrB,EAAI,GAAM,GAAV,GACP,G,qCAGT,YAAoC,uCAAa,K,qCACjD,YAAoC,uCAAa,K,gCAEjD,YAAmC,+BAAW,IAAM,G,4BAEpD,YAKuB,MAQhB,EAZN,EAAU,eAAW,EAAI,OAAS,EAAb,GAAkB,EAAnB,GACpB,EAAW,EACX,EAAc,EACd,EAAY,EACU,EAAJ,EAAI,OAAtB,UAAU,EAAV,Q,CACC,MAAQ,aAAI,GACZ,EAAS,wBAAW,GAChB,GAAM,IACT,EAAS,GAAU,EAAM,EACzB,SAEc,IAAX,IACH,GAAI,YAAJ,IAAoB,GAAN,GACd,EAAU,EACV,EAAQ,GAGV,OAAW,IAAQ,EAAI,OAAU,GAAJ,EAAW,GAAW,G,iCAGpD,YAA0C,yBAAW,EAAK,oB,iCAC1D,YAA0C,yBAAW,EAAK,oB,0BAE1D,mBAAwC,UAAiB,eAExD,IADA,MAAU,GAA0B,EAAZ,EAAK,OAAL,GACxB,EAAU,EAAV,EAAkB,EAAK,OAAvB,I,CACC,MAA4B,IAApB,EAAK,GACb,EAAI,eAAO,aAAQ,IAAO,EAAO,KACjC,EAAI,eAAO,aAAQ,IAAO,EAAO,KAElC,OAAO,EAAI,Y,mGAhDb,0CAsDiB,eAAQ,YAAI,eAAO,GAClB,eAAQ,YAAI,oBAAY,GAEtB,eAAQ,WAAI,MAE/B,eAEC,IADA,MAAU,GACV,EAAU,EAAV,EAAkB,EAAlB,I,CACC,MAAS,KAAqB,GAAT,EAAI,EAAJ,GAAD,GAAkB,GACtC,uBAAW,GAAJ,KAAI,wBAAgB,KAE5B,OAAO,EC5DU,qBADnB,cACoB,eAAqB,eADzC,2DAEC,uBAAS,KAAM,OACf,sBAAQ,KAAM,OACd,qBAAO,KAAM,OACb,sBAAQ,KAAM,OACd,qBAAO,KAAM,OACb,sBAAQ,KAAM,OACd,oBAAM,KAAM,OACZ,yBAAW,KAAM,OACjB,sBAAQ,KAAM,OACd,qBAAO,KAAM,OACb,uBAAQ,KAAM,OAGd,KAbA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BAGA,sBACwB,IpTs9SR,EoTt9SQ,EAAT,KpTyoSL,EAAM,EAAa,UA6U1B,IAAK,EAAL,mB,CAAa,MAAb,KACIpN,EAAY,UoTv9SW,EpTu9SGC,EoTv9SA,KnS8JkCmN,cjByzSlCnN,IoTv9SsC,IpTs9SvD,EoTt9SuD,EAAT,KpTyoSpD,EAAM,EAAa,UA6U1B,IAAK,EAAL,mB,CAAa,MAAb,KACI,EAAY,UoTv9S0D,EpTu9S5C,EoTv9S+C,QpTu9S/C,IoTv9SlB,IpTs9SC,EoTn9S0B,EAH3B,KpTw9SLD,EAAA,GoTx9SiG,EAAT,KpTyoSxF,EAAM,EAAa,UA6U1B,IAAK,EAAL,mB,CAAa,MAAb,KACI,EAAY,UoTv9S8F,EpTu9ShF,EoTv9SmF,QpTu9SnF,IoTv9ShC,WAAqI,GAAvH,KpTw9SL,IoTr9ST,4BAAoC,IAAK,kBAAwB,IxSslD/C,EwStlD+C,EAAtB,KxSg3ClC,EAAa,IAsOpB,IAAgB,4B,CAAA,IA9NK,EA8NL,WA9NK,SwSx3CuD,kBAAS,GxSslDxDJ,EwStlDwE,OxSw3C1C,ewSx3ClB,OxSy3ClCI,KwSx3CT,sBAAwB,GAAK,8BAAe,MAAb,cAAa,KAAb,mBAA8B,MAAhC,Q,yBAH7B,YAA0C,4BAAM,I,uDAEhD,W,O9MkB0F,4BAAA3V,S,iD8MjB1F,W,O9MiB0F,sBAAAA,S,kD8MbzF,WAAQ,YAAiB,O,IADzB,YAAmB,gB,mGARrB,+CAfD,6EA4BA,c,O9MS4F,GAAAA,M+MnCzE,eADnB,c,O/MoC4F,GAAAA,MgNtB5F,c,OhNsB4F,GAAAA,MgNH5F,c,OhNG4F,GAAAA,MgNF5F,c,OhNE4F,GAAAA,MgND5F,c,OhNC4F,GAAAA,MgNChF,cAAQ,OAAC,OAAU,OAAa,KAY5C,eAAmC,OAAhC,EAAF,EACD,cAA4B,SAC5B,cAA8B,SAC9B,eAA0C,OAAzC,OAAM,KAAM,GACb,eAAqD,4BAAU,GAAa,KAAvB,MAErD,ezThD2D,IAI1C,EAJ0C,EAAa,GyTgDjB,EAAI,QzT5C1C,IAAM,OAAO,EAAb,EAAb,UAAU,EAAV,SACI,EAAM,GyT2CuD,EzT3C7C,GyT2CmB,OzTzChC,EyTiDX,eAEc,MADb,EAd2B,GAe3B,YAAa,EAAb,W,CAAa,QAAb,GAAoB,EAAI,EAAK,OAAS,EAAK,OAC3C,OAAO,EAGR,eAA4D,I1S80C3C,E0S90C2C,EAAb,EAAK,Q1SywCzC,EAAM,EAAamX,EAAwB,OAqElD,IAAa,4B,CAAA,eACTxB,EAAY,U0S/0C8C,E1S+0ChCC,E0S/0CmC,I1S+0CnCA,E0S/0C6C,QAA1C,UlR7DiCuG,GxB64C3DxG,G0Sh1C0B,SAErC,eAIwB,MAHvB,GAAI,QAAa,OAAO,KACxB,M/S+B6D,I+S9B7D,EAAW,GAAa,GACD,EAAL,EAAK,OAAvB,UAAU,EAAV,Q,CACC,MAAU,EAAK,GACf,EAAM,EAAF,WAAJ,EAAc,EAAI,GAAlB,E/SgKE,YAAI,EAAK,G+S9JZ,OAAO,ExRuDkC,kCAClC,MAAW,EAAmB8E,EAAFrb,IAA5B,OACA,EAAM2qB,GACNA,EAAKC,cyR/Hb,eAAmD,OjN0ByC,GAAAhqB,MiN1B7B,GAI/D,eAAiC,qBAAU,GAG3C,eAAyC,SACzC,eACC,MAAQ,EACR,OAAO,eAAW,EAAE,OAAQ,EAAE,WAAY,EAAE,QAG7C,eAA+C,OAAK,GAAL,GAC/C,mBACC,OAAO,GAAY,OAAO,KAAK,EAAM,EAAQ,GAE9C,cAAyB,cA4BG,kCAEO,MAGjB,EAJf,EAAsB,EAAI,WAC1B,EAA4B,OAAI,EAAJ,EAAI,eAAJ,EAAqB,GACjD,EAAmB,EAAI,QACvB,EDR2B,GCK3B,OAIA,EAAI,GAAG,QAAQ,gBAAO,SAAK,KAAK,MAChC,EAAI,GAAG,MAAO,sCAIa,MAKvB,EARH,EAAe,GAAY,OAAO,OAAO,GACzC,EAAc,cAAU,GACxB,EAAU,cAAU,EAAQ,QACF,EAAR,EAAQ,OAA1B,UAAU,EAAV,QAAkC,EAAI,GAAK,EAAQ,GAKA,I3S+iCnC,E2S/iCmC,EAAhD,YAAc,IAAd,EAA+B,IhTmW3B,EAAY,GAAoB,GAAY,SK4sBnD,IAAgB,EL9vBT,UK8vBS,wB,CAAA,eL9vBa,EK+vBb,YAAgBuV,EL/vBe,IgTjTgB,G3SgjCNA,E2ShjCY,QAJrE,MAAe,OACL,EACI,EACE,GhTkTa,GgT/Sd,GAAJ,IAVX,OAeA,EAAS,eAAS,IAhBL,cAkBD,kCACb,SAAS,8BAA6B,GAAiB,UAAS,EAAT,cAG5B,oCAI5B,OAHK,EAAS,aACZ,EAAE,QAEJ,GA3DD,2MAuED,cAKgC,MALR,cACvB,eAAwC,wBACxC,eAAoE,GAEpE,UAAW,GAAa,QACxB,YAAa,UAAK,cAAa,qBAC9B,UAAkB,aAAS,0B,MAAA,gB,OAAA,qCAK5B,4FAaU,+DAAS,sBAwB8E,wCAChD,MAI9C,OAJC,EAAI,MAAW,GAAL,EAAoB,EAAQ,IAAO,eAE7C,OADC,EzRjHF,mBD6CQ,IAAAgF,E0RoEG,IACV,KAED,GALA,mIAOqD,kCAC5C,MAIT,OAJC,EAAI,KAAI,eAER,OADC,EzRxHF,mBD6CQ,IAAAA,E0R2EG,IACV,KAED,GALA,qEAtCa,2HAgDsE,sCAEtD,MAGhC,OAJC,YAAU,EAAE,QACZ,SAAO,OAAO,EAAM,EAAM,KAAK,eAE/B,OADC,EzRnIC,mBD6CQ,IAAAA,E0RsFA,IACV,KACD,GALA,6GAa8D,kCAEhD,MAGd,OAJC,YAAU,EAAE,QACZ,SAAO,OAAM,eAEb,OADC,EzRhJC,mBD6CQ,IAAAA,E0RmGA,IACV,KACD,GALA,qEA5EoE,+E,MAAA,c,OAAA,qBAIxC,gJAgFN,eAAC,wBACvB,WAAkB,GAAa,OAC/B,kBAAkC,KAClC,aAAoB,OAEpB,0BAAkC,EAClC,YAAgC,GAAb,OAAyB,uBAQpC,yHAFiB,kCACtB,IACK,IADL,EAAY,ErRyiBYrH,QqRziBxB,OACA,yBAAK,sB,MAAA,c,OAAA,yBANuE,sCAa/E,OAZC,eAAa,QAAI,iBAAiB,EAAM,EAAM,gCAE7C,MACA,EAOD,OATC,aAAY,EACZ,oCACA,+BAAe,OAAQ,OAMvB,EzRvKC,mBD6CQ,IAAAqH,E0R0HA,IACV,GAV8C,OAY/C,GAbA,6GAeA,oIAS8F,wCAC7F,MAAsD,EAIvD,OAJC,kCAAyB,GAAP,EAAsB,EAAQ,IAAM,eAEtD,OADC,EzRvLC,mBD6CQ,IAAAA,E0R0IA,IACV,KAED,GALA,oIAYD,eAqBA,cAAuB,cACtB,QAAS,GAAa,M,eA8BmC,iHAA9B,oCAAwB,yBAAM,sB,MAAA,c,OAAA,iCACC,iHAA/B,oCAAyB,yBAAM,sB,MAAA,c,OAAA,iCAMwC,oCACrD,MAK7C,OALC,KAAG,MAAM,gBAAY,GAAa,GAAN,MAAY,IAAI,gBACzC,MAAQ,QAEX,OAFC,EzR9PC,mBD6CQ,IAAAA,EC7CkBva,IyRgQ5B,KAED,GANA,2FAQkF,sCACnC,MAK/C,OALC,KAAG,OAAO,gBAAY,GAAM,gBAAY,IAAM,gBAC3C,MAAQ,QAEX,OAFC,EzRtQC,mBD6CQ,IAAAua,EC7CkBva,IyRwQ5B,KAED,GANA,2GAQsE,oCACxC,MAK9B,OALC,KAAG,OAAO,gBAAY,IAAO,gBAC1B,MAAQ,QAEX,OAFC,EzR9QC,mBD6CQ,IAAAua,EC7CkBva,IyRgR5B,KAED,GANA,yFAQqE,oCACxC,MAK7B,OALC,KAAG,MAAM,gBAAY,IAAO,gBACzB,MAAQ,QAEX,OAFC,EzRtRC,mBD6CQ,IAAAua,EC7CkBva,IyRwR5B,KAED,GANA,yFAQA,oIAkByB,wCAWxB,OAVC,KAAG,KAAK,gBAAY,GAAO,EAAO,yCAEjC,GAAI,SAAe,Q,CACf,MAAH,EAAG,EAAoB,OAAsB,eAAc,EAAd,gBAAgC,EAAhC,aAA6C,IzRzS3F,qBD2CQ,IAAAua,EAAOC,EC3CWH,S,CyR2StB,MAAH,EAAG,EAAkC,GAA3B,OAAa,EAAM,KAAI,IzRpTlC,qBD6CQ,IAAAE,EC7CkBva,IyRuT3B,UARkC,aAUnC,GAbD,8GAmBiB,mBAAmE,cAAlE,YAAmB,UAAiB,UAKsD,0CAY5G,OAXC,cACA,KAAG,KAAK,KAAW,GAAP,GAAyB,EAAQ,EAAK,EAAS,WAAY,qCACtE,GAAI,Q,CACD,MAAF,EAAE,EAAoB,OAAY,sBAAqB,OAArB,WAAkC,EAAlC,YzR/TlC,qBD2CQ,IAAAua,EAAOC,EC3CWH,UyRkU1B,EzR3UA,mBD6CQ,IAAAE,E0R8RC,IAGX,UARuE,OAUxE,GAZA,4JAc8G,0CAW9G,OAVC,cACA,KAAG,MAAM,KAAW,GAAP,GAAyB,EAAQ,EAAK,EAAS,WAAY,qCACvE,GAAI,Q,CACD,MAAF,EAAE,EAAoB,OAAY,qBAAoB,OAApB,WAAiC,EAAjC,YzR7UlC,qBD2CQ,IAAAA,EAAOC,EC3CWH,UyR+U1B,EzRxVA,mBD6CQ,IAAAE,E0R2SC,IAGX,UAPwE,OASzE,GAXA,4JAaqE,oCAWrE,OAVC,cACA,KAAG,UAAU,KAAI,EAAM,WAAY,iCAClC,GAAI,Q,CACD,MAAF,EAAE,EAAoB,OAAY,2BAA0B,OAA1B,WAAuC,EAAvC,YzR1VlC,qBD2CQ,IAAAA,EAAOC,EC3CWH,UyR4V1B,EzRrWA,mBD6CQ,IAAAE,E0RwTC,IAGX,UAPmC,OASpC,GAXA,0FAa0D,kCAY1D,OAXC,cACA,KAAG,MAAM,KAAI,mCAKD,IAAM,EAAgB,EAJjC,GAAI,Q,CACD,MAAF,EAAE,EAAoB,OAAY,6BAA4B,OAA5B,WAAyC,EAAzC,YzRvWlC,qBD2CQ,IAAAA,EAAOC,EC3CWH,UyR0WM,oBAAtB,iBAAM,EAAN,EAAM,MAAN,OAAV,EzRnXA,mBD6CQ,IAAAE,EAAA,I0RyUV,UARa,OAUd,GAZA,qEAoB0B,kCAYxB,OAXC,KAAG,MAAM,KAAI,iCASb,OARC,KAAK,KAGJ,EzRrYF,mBD6CQ,IAAAA,E0RwVG,IAKX,GATa,OAWd,GAhBF,qECnaD,eAAyD,cAAgB,GCIzE,eACC,cAAc,GCPf,sBACC,iBAAkB,IAAX,EAA0B,EAAS,O,6FNG3C,sB,IAAA,uB,IAAA,sB,IAAA,qB,IAAA,sB,IAAA,qB,IAAA,sB,IAAA,oB,IAAA,yB,IAAA,sB,IAAA,qB,IAAA,sB,QAAA,gE,yBCGE,cAAiD,oBAAa,I,yBAC9D,gBAAuD,OAAM,aMsmIM,KNtmIZ,G,4BACvD,cAA2C,oBAAa,WAAW,I,kMEwBpE,W,uCAcgB,M,oBARA,EAA8B,KAG7C,MAAW,GAAa,QAExB,EADY,GAAa,OACR,MAAM,gBACvB,EDU0B,GCR1B,IAAe,6C,CAAA,eACd,EAAW,EAAO,OAAS,EAAO,OAGnC,MDI0B,GCuC1B,GA1CA,SAAa,kBAAO,KACpB,OAAW,WACX,OAAW,OACX,OAAW,OACX,SAAY,EACZ,WAAe,KACf,UAAc,E,aAEN,EAAK,QAAQ,EAAK,yBAwBxB,GAAG,QAAS,yBAId,oBAAS,2BAAmB,sCAMxB,yB,IACW,e,cAAA,GAAR,mBAAQ,wB,OAAA,WAEd,aAAE,MAHH,e,8CACC,aAAE,IAAsB,GAAV,gBADf,e,mBAMgB,e,cAAT,oBAAS,8B,OAAA,W,OAAhB,OAAgB,c,4PAnEjB,sB,MAAA,uB,OAAA,sB,gOAkFA,W,0CACO,e,cAAA,8DAAyB,mBAAzB,wB,OAAA,W,ySADP,gB,MAAA,iB,OAAA,sB,8BAcG,cACgB,MAAf,iBAAI,GAAG,QAAQ,gBAEf,OADC,EAAQ,cAAU,EAA+B,SAClD,M,iCAGD,cACe,MAAd,iBAAI,GAAG,OAAO,eAEd,OADC,IACD,KACA,iBAAI,GAAG,QAAS,8BAEhB,OADC,IACD,GAFgB,M,iCAKjB,kBAGgB,MAAf,IAFA,4BAAiB,EACjB,+BAAoB,EACL,4B,CAAA,eACd,iBAAI,UAAU,EAAO,MAAO,EAAO,U,2JAIrC,W,0CzRbA,e,cAAsC,GyRawD,6EzRbxD,CAAtC,wB,OAAA,W,qCyRa6E,OzRb7E,cyRa6E,c,mPAA7E,oB,MAAA,qB,OAAA,sB,2JAOA,W,0CzRpBA,e,cAAsC,GyRoBe,2BzRpBf,CAAtC,wB,OAAA,W,qCyRoBoC,OzRpBpC,cyRoBoC,c,iOAApC,c,MAAA,e,OAAA,sB,kMAtCa,W,uCAId,IvT62Sc,EuT72Sd,EAAa,iBAAY,eAAI,QAC7B,EAAU,eAAI,IACuC,EAA1B,GAAU,eAAI,YvT8hSjC,EAAM,EAAa,UA6U1B,IAAK,EAAL,mB,CAAa,MAAb,KACI5E,EAAY,UuT52S0C,GvT42S5BC,IuT52S/B,MAAmB,OAAgD,GvT62S3DD,I,GuT52SR,e,cAAA,gEAAyB,EAAQ,EAAK,EAAS,QAA/C,wB,OAAA,W,qCANA,OAMA,c,wPATF,cAEgB,MADf,eAAU,UACV,gBAAe,sB,MAAA,gB,OAAA,wB,2JAgDhB,W,0CzR9BG,e,cAAsC,GyR8B6C,+CzR9B7C,CAAtC,wB,OAAA,W,qCyR8B4D,OzR9B5D,cyR8B4D,c,2PAA/D,kB,MAAA,mB,OAAA,sB,qDAQC,WAEC,OAAO,GAAY,YAAO,UAAU,S,2JAGtC,W,0CzR3CG,e,cAAsC,GyR2CqB,ezR3CrB,CAAtC,wB,OAAA,W,qCyR2CoC,OzR3CpC,cyR2CoC,c,0OAAvC,c,MAAA,e,OAAA,sB,2JA5EoE,W,uCAAc,S,wYAItD,W,0CAC1B,e,cAAA,0CAAQ,uBAAK,uBAAb,wB,OAAA,W,qCAAA,qB,uUAoFF,4C,IAAA,0C,2JASQ,W,0CACE,e,cAAN,0CAAM,cAAM,8BAAN,iC,OAAA,W,qCAAN,OAAM,c,0WAPV,W,0CzR3DG,e,cAAsC,GyR2DsC,+CzR3DtC,CAAtC,wB,OAAA,W,qCyR2D2D,OzR3D3D,cyR2D2D,c,4OAA9D,kB,MAAA,mB,OAAA,sB,2JAeA,W,uCACC,MAIC,E,GAJD,8C,wBAEc,e,cAAN,mBAAM,aAAK,kBAAQ,kBAAQ,eAArB,wB,OAAA,W,sDAAb,e,kBAAa,c,4IAEb,6C,wTALF,oB,MAAA,qB,OAAA,sB,2JASA,W,0CzRnFG,e,cAAsC,GyRmFqD,kEzRnFrD,CAAtC,wB,OAAA,W,qCyRmF0E,OzRnF1E,cyRmF0E,c,kPAA7E,oB,MAAA,qB,OAAA,sB,mBAOA,YACC,8C,4HAMA,W3RjNgD,MAAM,OAAoB,uD,+C2RmN1E,W3RnNgD,MAAM,OAAoB,uD,kD2RqN1E,W3RrNgD,MAAM,OAAoB,uD,+C2RuN1E,W3RvNgD,MAAM,OAAoB,uD,oB2RyN3E,Y3RzNiD,MAAM,OAAoB,qD,0B2R6N3E,kBAAuE,a,mBAGpE,YAA+B,U,sJASlC,YACC,OAAqB,GAAT,GAAL,K,2JAyBiD,W,0CAAU,e,cAAR,2BAAQ,cAAW,GAAL,yBAAN,wB,OAAA,W,qCAAR,OAAQ,c,0WACT,W,0CAAU,e,cAAR,2BAAQ,cAAW,GAAL,yBAAN,wB,OAAA,W,qCAAR,OAAQ,c,iPAZpE,oBACC,IAYoB,EAZpB,EAAc,GAAa,iBAAiB,MAAiB,GAAX,GnRvQkBwG,GmRuQa,GAAX,EAAgB,IAAmB,IACxG,QAAS,GACT,QAAa,GAAJ,IACT,aAAc,UACd,WAAW,MAGZ,EAAyB,GAAb,OAAyB,WACrC,EAAuB,IAMvB,OAJA,EAAQ,OAAO,GAAG,OAAQ,SAC1B,EAAQ,OAAO,GAAG,OAAQ,SAC1B,EAAQ,GAAG,SAAS,gBAAe,SAAiB,eAAS,MAEtD,EAAiB,U,2JAGzB,W,0CzR1JG,e,cAAsC,GyR0JyD,+BzR1JzD,CAAtC,wB,OAAA,W,qCyR0J8E,OzR1J9E,cyR0J8E,c,0OAAjF,kB,MAAA,mB,OAAA,sB,2JAQA,W,0CzRlKG,e,cAAsC,GyRkKyC,6CzRlKzC,CAAtC,wB,OAAA,W,qCyRkK8D,OzRlK9D,cyRkK8D,c,2OAAjE,kB,MAAA,mB,OAAA,sB,2JAQA,W,0CzR1KG,e,cAAsC,GyR0K6B,+BzR1K7B,CAAtC,wB,OAAA,W,qCyR0KkD,OzR1KlD,cyR0KkD,c,2OAArD,gB,MAAA,iB,OAAA,sB,2JAQA,W,0CzRlLG,e,cAAsC,GyRkL4B,+BzRlL5B,CAAtC,wB,OAAA,W,qCyRkLiD,OzRlLjD,cyRkLiD,c,0OAApD,gB,MAAA,iB,OAAA,sB,2JAQA,W,uCACa,OAAM,gBAAN,M,IACX,OAAoB,oBAApB,e,aACA,QAAqB,qBAArB,e,aACA,qBAAkC,qBAAlC,e,aACA,a,GACK,e,cAAA,wBAAK,gBAAL,wB,OAAA,W,IAGL,SAAsB,sBAAtB,e,aACA,SAAsB,oBAAtB,e,yDATW,e,8CAKV,GAAI,cAAW,OAAQ,MAAM,OAA2B,iBACxD,qBAFD,e,gBAJD,sB,GAYO,e,cAAA,yBAAM,gBAAM,EAAZ,wB,OAAA,W,OAAP,OAAO,c,yOAbR,kB,MAAA,mB,OAAA,sB,2JAgBA,W,uCACC,MAAgB,wBAAK,iB,GzR3MnB,e,cAAsC,GyR4MhB,kDzR5MgB,CAAtC,wB,OAAA,W,qCyR4MF,OzR5ME,cyR4MK,c,0OAFR,kB,MAAA,mB,OAAA,sB,sBAgBA,WAAkC,wB,0FAIlC,WACC,GAAI,cxS9N2C,MAAM,IwS8N/B,QAAO,UAAP,mBxS9N6D5Z,a,2JwSiOpF,W,0CzRlOG,e,cAAsC,GyRkOmE,sFzRlOnE,CAAtC,wB,OAAA,W,qCyRkOwF,OzRlOxF,cyRkOwF,c,yOAA3F,sB,MAAA,uB,OAAA,sB,2JAcA,W,0CzRhPG,e,cAAsC,GyRgPqE,sFzRhPrE,CAAtC,wB,OAAA,W,qCyRgP0F,OzRhP1F,cyRgP0F,c,0OAA7F,sB,MAAA,uB,OAAA,sB,2JAaA,W,0CzR7PG,e,cAAsC,GyR6P4B,gCzR7P5B,CAAtC,wB,OAAA,W,qCyR6PiD,OzR7PjD,cyR6PiD,c,8OAApD,gB,MAAA,iB,OAAA,sB,2JAaA,W,0CzR1QG,e,cAAsC,GyR0QiB,ezR1QjB,CAAtC,wB,OAAA,W,qCyR0QsC,OzR1QtC,cyR0QsC,c,sOAAzC,c,MAAA,e,OAAA,sB,2JAgBA,W,uCAGC,GAAI,oB,IzR7RF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cAA6E,YAAtC,UAAiB,GAAmC,IAAV,GAA2B,IAAV,EAAe,KAAU,OAAU,OAAe,cAAU,EAAQ,K,gDAGhJ,WAAQ,OAAwB,EAAvB,YAAO,MAAQ,gB,iDACvB,WAAQ,OAAyB,EAAxB,YAAO,OAAS,gB,4BAElD,cAAyF,MrDwXnF,EqDxXyE,ErDwX5D,EACb,EqDzXyE,ErDyX5D,EACb,EqD1XyE,ErD0X5D,EACb,EqD3XyE,ErD2X5D,EACb,EqD5XyE,ErD4X3D,GACd,EqD7XyE,ErD6X3D,G,IqD5XA,gBAAM,YAAQ,arD8XxB,EqD7XA,I,QAFqE,ErDiYrE,EAAS,EqDjY4D,ErDkYrE,EAAS,EqDlY4D,ErDmYrE,EAAS,EqDnY4D,ErDoYrE,EAAS,EqDpY4D,ErDqYrE,GAAU,EqDrY2D,ErDsYrE,GAAU,EqDtY2D,U,2BAK/E,cACC,IANwF,EAMxF,EAAa,EAAM,UrDkXd,EqDxXyE,ErDwX5D,EACb,EqDzXyE,ErDyX5D,EACb,EqD1XyE,ErD0X5D,EACb,EqD3XyE,ErD2X5D,EACb,EqD5XyE,ErD4X3D,GACd,EqD7XyE,ErD6X3D,G,IqD5XA,gBAAM,YAAQ,arD8XxB,EqDzXuB,I,QAN8C,ErDiYrE,EAAS,EqDjY4D,ErDkYrE,EAAS,EqDlY4D,ErDmYrE,EAAS,EqDnY4D,ErDoYrE,EAAS,EqDpY4D,ErDqYrE,GAAU,EqDrY2D,ErDsYrE,GAAU,EqDhYnB,U,4BAED,cAFC,MAEoE,EAFjD,UrDkXd,EqDxXyE,ErDwX5D,EACb,EqDzXyE,ErDyX5D,EACb,EqD1XyE,ErD0X5D,EACb,EqD3XyE,ErD2X5D,EACb,EqD5XyE,ErD4X3D,GACd,EqD7XyE,ErD6X3D,G,IqD5XA,gBAAM,YAAQ,aAO4C,YAAO,oB,QARN,ErDiYrE,EAAS,EqDjY4D,ErDkYrE,EAAS,EqDlY4D,ErDmYrE,EAAS,EqDnY4D,ErDoYrE,EAAS,EqDpY4D,ErDqYrE,GAAU,EqDrY2D,ErDsYrE,GAAU,I,uCqD1XpB,sBrD4WM,MqD3WQ,ErD2WK,EACb,EqD5WQ,ErD4WK,EACb,EqD7WQ,ErD6WK,EACb,EqD9WQ,ErD8WK,EACb,EqD/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,yBAO7B,YACC,UlcHM,UkcGE,GACR,oBAAO,EAAK,K9gB6LX,cAAI,E8gB7Le,I,8GAGrB,cACe,I9gBqSN,E8gBrSM,EAAP,Y9gBoSN,EAAY,Y8gBpSU,G9gBqSf,GAAI,Q,C8gBpSA,MAAX,IACC,UlcVI,UvD+BL,GrB+QI,MqB9QG,ErB+QH,c8gBvSkB,E9gBuST,GACT,SAEA,I8gB1SL,O9gBqSC,K,2F8gBzRH,YAA8C,I9gByRpC,E8gBzRoC,EAAT,cAZrB,EAAP,S9gBoSN,EAAY,Y8gBxRwC,G9gByR7C,GAAI,Q,C8gBpSA,MAWiD,UAV3D,OlcVI,UvD+BL,GrB+QI,MqB9QG,ErB+QH,c8gB3RgD,E9gB2RvC,GACT,SAEA,I8gB9R8B,O9gByRlC,G,2B8gBxRH,YAAwC,I9gBwR9B,E8gBxR8B,EAAP,YAbjB,EAAP,S9gBoSN,EAAY,Y8gBvRkC,G9gBwRvC,GAAI,Q,C8gBpSA,MAY2C,eAXrD,OlcVI,UvD+BL,GrB+QI,MqB9QG,ErB+QH,c8gB1R0C,E9gB0RjC,GACT,SAEA,I8gB7R0B,O9gBwR9B,G,kB8gBvRH,WACC,EAAQ,avRpET,IuRqEe,IvRpEA,EuRoEA,EAAd,cAAS,KvRtEV,EAAQ,EACD,EAAI,QuRsET,EAAQ,MvRrEA,eAAK,YAAL,KuRuET,EAAQ,WvRxET,IuRyEa,IvRxEE,EuRwEF,EAAZ,YAAO,KvR1ER,EAAQ,EACD,EAAI,QuR0ET,EAAQ,MvRzEA,eAAK,YAAL,M,iJgP2EP,8IAA6D,kBACzD,uCAAc,EAAF,GAAgB,EAAF,GAA1B,wBACA,sCAAW,EAAX,6B,+C0CnEc,yC,4BAGlB,Y1RdH,I0Ree,I1RdA,E0RcA,EAAR,e1RhBP,EAAQ,EACD,EAAI,QACD,eAAK,YAAL,I0RcmB,I,wBAG1B,YACI,erc0BC,Uqc1BU,I,2BAGf,YACI,ercsDC,aqctDU,I,0BAGf,cAAyC,yBAAU,GAAL,GAAL,I,2JACzC,W,0EAAuE,+B,gFAA5B,OhXsJ/C,cgXtJ+C,c,yOAA3C,gB,MAAA,iB,OAAA,sB,2JAEA,W,0C1f0GA,e,cAAsC,G0f1GW,e1f0GX,CAAtC,wB,OAAA,W,qC0f1G0B,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AA6B,MAAS,kB9EpN0B,6BAAmB,I,iC8EqNnF,WAA4B,kCAAoB,I,yCAChD,YAAgE,MAAZ,iBniB9L9C,EmiB8LiE,S9EtNP,6BrdyBzD,I,2CmiB8LP,cAAoG,MAAd,mBniB/LhF,EmiB+LqG,OniB9LpG,EmiB8L4H,Q9EvNnE,6BrdyBzD,I,6CmiB+LP,YAA4E,MAAhB,qBniBhMtD,EmiBgM6E,a9ExNnB,6BrdyBzD,I,0CmiBiMP,kBACI,QAAG,gBAAQ,EAAO,GACI,MAAb,4BniBnNb,EmiBoNQ,IniBpNR,EmiBqNQ,IniBrNR,EmiBsNQ,QniBtNR,EmiBuNQ,S9EhOwD,6BrdUzD,I,sCmiB0NP,oBACsB,MAAT,cniB5Nb,EmiB6NQ,KniB7NR,EmiB8NQ,UAAiB,MniB9NzB,EmiB+NQ,MniB/NR,EmiBgOQ,UniBhOR,EmiBiOQ,O9E1OwD,6BrdUzD,I,8CmiBoOP,2BACyE,WAA6B,GAWlG,gCAAmB,EAAM,EAAI,EAAG,EAAG,EATrB,EACK,EACA,EACA,GACD,GACD,GACD,GACC,GACC,GAEd,GAAqB,UACrB,qCAA0C,EAAI,EAAG,EAAG,EAX1C,EACK,EACA,EACA,GACD,GACD,GACD,GACC,GACC,I,wCAOtB,sCAMwB,MAAX,gBniB7Pb,EmiB8PQ,OniB9PR,EmiB+PQ,KniB/PR,EmiBgQQ,IniBhQR,EmiBiQQ,IniBjQR,EmiBkQQ,SniBlQR,EmiBmQQ,UniBnQR,EmiBoQQ,eniBpQR,EmiBqQQ,eniBrQR,EmiBsQQ,eniBtQR,EmiBuQQ,cniBvQR,EmiBwQQ,aniBxQR,EmiByQQ,YniBzQR,EmiB0QQ,aniB1QR,EmiB2QQ,c9EpRwD,6BrdUzD,I,0CmiB8QP,WAAqC,4C,yCACrC,WAAoC,4C,wCACpC,WAAmC,4C,6CACnC,YAAqD,gBAAW,mBAAW,I,gDAC3E,gBAAgE,gBAAW,cAAM,EAAI,EAAG,I,mCACxF,WAA8B,MAAS,gB9E7RyB,6BAAmB,I,2J8EiSnD,W,kEAEpB,e,cAAA,oD,OAAA,W,OADJ,OACI,c,sDACF,kBAFF,OAGI,EAAQ,2BACN,GAAF,GACA,oCAAU,EALd,U,qTAHR,YAEg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EoFwC1D,OpFxC0D,EoF8C1D,GAAU,EpF9CgD,EoF+C1D,QAAkB,UACE,O,IAChB,I,OAAA,M,IAAe,I,OAAA,M,IAAe,I,OAAA,M,IAAe,I,OAAA,M,IAC7C,I,OAAA,M,IAAe,I,OAAA,M,IAAe,I,OAAA,M,IAAe,I,OAAA,M,IAC7C,I,OAAA,M,IAAe,I,OAAA,M,IACf,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAC1C,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAC1C,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAC1C,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAC1C,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAC1C,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAAc,I,OAAA,M,IAC1C,I,OAAA,M,IAAc,I,OAAA,M,IACd,K,OAAA,M,IAAgB,K,OAAA,M,IAAgB,K,OAAA,M,IAAgB,K,OAAA,M,IAChD,K,OAAA,M,IAAgB,K,OAAA,M,IAAgB,K,OAAA,M,IAAgB,K,OAAA,M,IAChD,K,OAAA,M,IAAgB,M,OAAA,M,IAAkB,M,OAAA,M,IAAkB,M,OAAA,M,IACpD,M,OAAA,M,IAAkB,M,OAAA,M,IAAkB,M,OAAA,M,IAAkB,M,OAAA,M,IACtD,M,OAAA,M,IAAkB,M,OAAA,M,IAAkB,M,OAAA,M,IAAkB,M,OAAA,M,IACtD,M,OAAA,M,IAAkB,M,OAAA,M,IAAkB,M,OAAA,M,IAAkB,M,OAAA,M,IACtD,M,OAAA,M,IACA,I,OAAA,M,IACA,I,OAAA,M,QACQ,OAAS,Q,IACb,W,OAAA,M,IACA,Y,OAAA,M,IACA,Y,OAAA,M,IACA,a,OAAA,M,IACA,c,OAAA,M,IACA,e,OAAA,M,IACA,U,OAAA,M,IACA,W,OAAA,M,IACA,Q,OAAA,M,IACA,U,OAAA,M,IACA,Y,OAAA,M,IACA,Y,OAAA,M,IACA,a,OAAA,M,IACA,Q,OAAA,M,IACA,S,OAAA,M,IACA,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","file":"develop.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"develop\"] = factory();\n\telse\n\t\troot[\"develop\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('kotlin', ['exports'], factory);\n    }\n    else if (typeof exports === 'object') {\n        factory(module.exports);\n    }\n    else {\n        root.kotlin = {};\n        factory(root.kotlin);\n    }\n}(this, function (Kotlin) {\n    var _ = Kotlin;\n\n    insertContent();\n}));\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.isBooleanArray = function (a) {\n    return (Array.isArray(a) || a instanceof Int8Array) && a.$type$ === \"BooleanArray\"\n};\n\nKotlin.isByteArray = function (a) {\n    return a instanceof Int8Array && a.$type$ !== \"BooleanArray\"\n};\n\nKotlin.isShortArray = function (a) {\n    return a instanceof Int16Array\n};\n\nKotlin.isCharArray = function (a) {\n    return a instanceof Uint16Array && a.$type$ === \"CharArray\"\n};\n\nKotlin.isIntArray = function (a) {\n    return a instanceof Int32Array\n};\n\nKotlin.isFloatArray = function (a) {\n    return a instanceof Float32Array\n};\n\nKotlin.isDoubleArray = function (a) {\n    return a instanceof Float64Array\n};\n\nKotlin.isLongArray = function (a) {\n    return Array.isArray(a) && a.$type$ === \"LongArray\"\n};\n\nKotlin.isArray = function (a) {\n    return Array.isArray(a) && !a.$type$;\n};\n\nKotlin.isArrayish = function (a) {\n    return Array.isArray(a) || ArrayBuffer.isView(a)\n};\n\nKotlin.arrayToString = function (a) {\n    var toString = Kotlin.isCharArray(a) ? String.fromCharCode : Kotlin.toString;\n    return \"[\" + Array.prototype.map.call(a, function(e) { return toString(e); }).join(\", \") + \"]\";\n};\n\nKotlin.arrayDeepToString = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepToStringImpl(arr);\n};\n\nKotlin.arrayEquals = function (a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Kotlin.isArrayish(b) || a.length !== b.length) {\n        return false;\n    }\n\n    for (var i = 0, n = a.length; i < n; i++) {\n        if (!Kotlin.equals(a[i], b[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\nKotlin.arrayDeepEquals = function (a, b) {\n    return Kotlin.kotlin.collections.contentDeepEqualsImpl(a, b);\n};\n\nKotlin.arrayHashCode = function (arr) {\n    var result = 1;\n    for (var i = 0, n = arr.length; i < n; i++) {\n        result = ((31 * result | 0) + Kotlin.hashCode(arr[i])) | 0;\n    }\n    return result;\n};\n\nKotlin.arrayDeepHashCode = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepHashCodeImpl(arr);\n};\n\nKotlin.primitiveArraySort = function (array) {\n    array.sort(Kotlin.doubleCompareTo)\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.getCallableRef = function(name, f) {\n    f.callableName = name;\n    return f;\n};\n\nKotlin.getPropertyCallableRef = function(name, paramCount, getter, setter) {\n    getter.get = getter;\n    getter.set = setter;\n    getter.callableName = name;\n    return getPropertyRefClass(getter, setter, propertyRefClassMetadataCache[paramCount]);\n};\n\nfunction getPropertyRefClass(obj, setter, cache) {\n    obj.$metadata$ = getPropertyRefMetadata(typeof setter === \"function\" ? cache.mutable : cache.immutable);\n    obj.constructor = obj;\n    return obj;\n}\n\nvar propertyRefClassMetadataCache = [\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty0 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty0 }\n        }\n    },\n    {\n        mutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KMutableProperty1 }\n        },\n        immutable: { value: null, implementedInterface: function () {\n            return Kotlin.kotlin.reflect.KProperty1 }\n        }\n    }\n];\n\nfunction getPropertyRefMetadata(cache) {\n    if (cache.value === null) {\n        cache.value = {\n            interfaces: [cache.implementedInterface()],\n            baseClass: null,\n            functions: {},\n            properties: {},\n            types: {},\n            staticMembers: {}\n        };\n    }\n    return cache.value;\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.compareTo = function (a, b) {\n    var typeA = typeof a;\n    if (typeA === \"number\") {\n        if (typeof b === \"number\") {\n            return Kotlin.doubleCompareTo(a, b);\n        }\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    if (typeA === \"string\" || typeA === \"boolean\") {\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    return a.compareTo_11rb$(b);\n};\n\nKotlin.primitiveCompareTo = function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n};\n\nKotlin.doubleCompareTo = function (a, b) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a === b) {\n        if (a !== 0) return 0;\n\n        var ia = 1 / a;\n        return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n    }\n\n    return a !== a ? (b !== b ? 0 : 1) : -1\n};\n\nKotlin.charInc = function (value) {\n    return Kotlin.toChar(value+1);\n};\n\nKotlin.charDec = function (value) {\n    return Kotlin.toChar(value-1);\n};\n\nKotlin.imul = Math.imul || imul;\n\nKotlin.imulEmulated = imul;\n\nfunction imul(a, b) {\n    return ((a & 0xffff0000) * (b & 0xffff) + (a & 0xffff) * (b | 0)) | 0;\n}\n\n(function() {\n    var buf = new ArrayBuffer(8);\n    var bufFloat64 = new Float64Array(buf);\n    var bufFloat32 = new Float32Array(buf);\n    var bufInt32 = new Int32Array(buf);\n    var lowIndex = 0;\n    var highIndex = 1;\n\n    bufFloat64[0] = -1; // bff00000_00000000\n    if (bufInt32[lowIndex] !== 0) {\n        lowIndex = 1;\n        highIndex = 0;\n    }\n\n    Kotlin.doubleToBits = function(value) {\n        return Kotlin.doubleToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.doubleToRawBits = function(value) {\n        bufFloat64[0] = value;\n        return Kotlin.Long.fromBits(bufInt32[lowIndex], bufInt32[highIndex]);\n    };\n\n    Kotlin.doubleFromBits = function(value) {\n        bufInt32[lowIndex] = value.low_;\n        bufInt32[highIndex] = value.high_;\n        return bufFloat64[0];\n    };\n\n    Kotlin.floatToBits = function(value) {\n        return Kotlin.floatToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.floatToRawBits = function(value) {\n        bufFloat32[0] = value;\n        return bufInt32[0];\n    };\n\n    Kotlin.floatFromBits = function(value) {\n        bufInt32[0] = value;\n        return bufFloat32[0];\n    };\n\n    // returns zero value for number with positive sign bit and non-zero value for number with negative sign bit.\n    Kotlin.doubleSignBit = function(value) {\n        bufFloat64[0] = value;\n        return bufInt32[highIndex] & 0x80000000;\n    };\n\n    Kotlin.numberHashCode = function(obj) {\n        if ((obj | 0) === obj) {\n            return obj | 0;\n        }\n        else {\n            bufFloat64[0] = obj;\n            return (bufInt32[highIndex] * 31 | 0) + bufInt32[lowIndex] | 0;\n        }\n    }\n})();\n\nKotlin.ensureNotNull = function(x) {\n    return x != null ? x : Kotlin.throwNPE();\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nif (typeof String.prototype.startsWith === \"undefined\") {\n    String.prototype.startsWith = function(searchString, position) {\n        position = position || 0;\n        return this.lastIndexOf(searchString, position) === position;\n    };\n}\nif (typeof String.prototype.endsWith === \"undefined\") {\n    String.prototype.endsWith = function(searchString, position) {\n        var subjectString = this.toString();\n        if (position === undefined || position > subjectString.length) {\n            position = subjectString.length;\n        }\n        position -= searchString.length;\n        var lastIndex = subjectString.indexOf(searchString, position);\n        return lastIndex !== -1 && lastIndex === position;\n    };\n}\n// ES6 Math polyfills\nif (typeof Math.sign === \"undefined\") {\n    Math.sign = function(x) {\n        x = +x; // convert to a number\n        if (x === 0 || isNaN(x)) {\n            return Number(x);\n        }\n        return x > 0 ? 1 : -1;\n    };\n}\nif (typeof Math.trunc === \"undefined\") {\n    Math.trunc = function(x) {\n        if (isNaN(x)) {\n            return NaN;\n        }\n        if (x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n}\n\n(function() {\n    var epsilon = 2.220446049250313E-16;\n    var taylor_2_bound = Math.sqrt(epsilon);\n    var taylor_n_bound = Math.sqrt(taylor_2_bound);\n    var upper_taylor_2_bound = 1/taylor_2_bound;\n    var upper_taylor_n_bound = 1/taylor_n_bound;\n\n    if (typeof Math.sinh === \"undefined\") {\n        Math.sinh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 6;\n                }\n                return result;\n            } else {\n                var y = Math.exp(x);\n                var y1 = 1 / y;\n                if (!isFinite(y)) return Math.exp(x - Math.LN2);\n                if (!isFinite(y1)) return -Math.exp(-x - Math.LN2);\n                return (y - y1) / 2;\n            }\n        };\n    }\n    if (typeof Math.cosh === \"undefined\") {\n        Math.cosh = function(x) {\n            var y = Math.exp(x);\n            var y1 = 1 / y;\n            if (!isFinite(y) || !isFinite(y1)) return Math.exp(Math.abs(x) - Math.LN2);\n            return (y + y1) / 2;\n        };\n    }\n\n    if (typeof Math.tanh === \"undefined\") {\n        Math.tanh = function(x){\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result -= (x * x * x) / 3;\n                }\n                return result;\n            }\n            else {\n                var a = Math.exp(+x), b = Math.exp(-x);\n                return a === Infinity ? 1 : b === Infinity ? -1 : (a - b) / (a + b);\n            }\n        };\n    }\n\n    // Inverse hyperbolic function implementations derived from boost special math functions,\n    // Copyright Eric Ford & Hubert Holin 2001.\n\n    if (typeof Math.asinh === \"undefined\") {\n        var asinh = function(x) {\n            if (x >= +taylor_n_bound)\n            {\n                if (x > upper_taylor_n_bound)\n                {\n                    if (x > upper_taylor_2_bound)\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                        return Math.log(x) + Math.LN2;\n                    }\n                    else\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 1\n                        return Math.log(x * 2 + (1 / (x * 2)));\n                    }\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x + 1));\n                }\n            }\n            else if (x <= -taylor_n_bound)\n            {\n                return -asinh(-x);\n            }\n            else\n            {\n                // approximation by taylor series in x at 0 up to order 2\n                var result = x;\n                if (Math.abs(x) >= taylor_2_bound)\n                {\n                    var x3 = x * x * x;\n                    // approximation by taylor series in x at 0 up to order 4\n                    result -= x3 / 6;\n                }\n                return result;\n            }\n        };\n        Math.asinh = asinh;\n    }\n    if (typeof Math.acosh === \"undefined\") {\n        Math.acosh = function(x) {\n            if (x < 1)\n            {\n                return NaN;\n            }\n            else if (x - 1 >= taylor_n_bound)\n            {\n                if (x > upper_taylor_2_bound)\n                {\n                    // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                    return Math.log(x) + Math.LN2;\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x - 1));\n                }\n            }\n            else\n            {\n                var y = Math.sqrt(x - 1);\n                // approximation by taylor series in y at 0 up to order 2\n                var result = y;\n                if (y >= taylor_2_bound)\n                {\n                    var y3 = y * y * y;\n                    // approximation by taylor series in y at 0 up to order 4\n                    result -= y3 / 12;\n                }\n\n                return Math.sqrt(2) * result;\n            }\n        };\n    }\n    if (typeof Math.atanh === \"undefined\") {\n        Math.atanh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 3;\n                }\n                return result;\n            }\n            return Math.log((1 + x) / (1 - x)) / 2;\n        };\n    }\n    if (typeof Math.log1p === \"undefined\") {\n        Math.log1p = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (-x4 / 4 + x3 / 3 - x2 / 2 + x);\n            }\n            return Math.log(x + 1);\n        };\n    }\n    if (typeof Math.expm1 === \"undefined\") {\n        Math.expm1 = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (x4 / 24 + x3 / 6 + x2 / 2 + x);\n            }\n            return Math.exp(x) - 1;\n        };\n    }\n})();\nif (typeof Math.hypot === \"undefined\") {\n    Math.hypot = function() {\n        var y = 0;\n        var length = arguments.length;\n\n        for (var i = 0; i < length; i++) {\n            if (arguments[i] === Infinity || arguments[i] === -Infinity) {\n                return Infinity;\n            }\n            y += arguments[i] * arguments[i];\n        }\n        return Math.sqrt(y);\n    };\n}\nif (typeof Math.log10 === \"undefined\") {\n    Math.log10 = function(x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n}\nif (typeof Math.log2 === \"undefined\") {\n    Math.log2 = function(x) {\n        return Math.log(x) * Math.LOG2E;\n    };\n}\nif (typeof Math.clz32 === \"undefined\") {\n    Math.clz32 = (function(log, LN2) {\n        return function(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0; // the \"| 0\" acts like math.floor\n        };\n    })(Math.log, Math.LN2);\n}\n\n// For HtmlUnit and PhantomJs\nif (typeof ArrayBuffer.isView === \"undefined\") {\n    ArrayBuffer.isView = function(a) {\n        return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;\n    };\n}\n\nif (typeof Array.prototype.fill === \"undefined\") {\n    // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill\n    Array.prototype.fill = function() {\n      // Steps 1-2.\n      if (this == null) {\n        throw new TypeError('this is null or not defined');\n      }\n\n      var O = Object(this);\n\n      // Steps 3-5.\n      var len = O.length >>> 0;\n\n      // Steps 6-7.\n      var start = arguments[1];\n      var relativeStart = start >> 0;\n\n      // Step 8.\n      var k = relativeStart < 0 ?\n        Math.max(len + relativeStart, 0) :\n        Math.min(relativeStart, len);\n\n      // Steps 9-10.\n      var end = arguments[2];\n      var relativeEnd = end === undefined ?\n        len : end >> 0;\n\n      // Step 11.\n      var final = relativeEnd < 0 ?\n        Math.max(len + relativeEnd, 0) :\n        Math.min(relativeEnd, len);\n\n      // Step 12.\n      while (k < final) {\n        O[k] = value;\n        k++;\n      }\n\n      // Step 13.\n      return O;\n    };\n}\n\n(function() {\n    function normalizeOffset(offset, length) {\n        if (offset < 0) return Math.max(0, offset + length);\n        return Math.min(offset, length);\n    }\n    function typedArraySlice(begin, end) {\n        if (typeof end === \"undefined\") {\n            end = this.length;\n        }\n        begin = normalizeOffset(begin || 0, this.length);\n        end = Math.max(begin, normalizeOffset(end, this.length));\n        return new this.constructor(this.subarray(begin, end));\n    }\n\n    var arrays = [Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array];\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.fill === \"undefined\") {\n            TypedArray.prototype.fill = Array.prototype.fill;\n        }\n        if (typeof TypedArray.prototype.slice === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'slice', {\n                value: typedArraySlice\n            });\n        }\n    }\n\n    // Patch apply to work with TypedArrays if needed.\n    try {\n        (function() {}).apply(null, new Int32Array(0))\n    } catch (e) {\n        var apply = Function.prototype.apply;\n        Object.defineProperty(Function.prototype, 'apply', {\n            value: function(self, array) {\n                return apply.call(this, self, [].slice.call(array));\n            }\n        });\n    }\n\n\n    // Patch map to work with TypedArrays if needed.\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.map === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'map', {\n                value: function(callback, self) {\n                    return [].slice.call(this).map(callback, self);\n                }\n            });\n        }\n    }\n\n    // Patch sort to work with TypedArrays if needed.\n    // TODO: consider to remove following function and replace it with `Kotlin.doubleCompareTo` (see misc.js)\n    var totalOrderComparator = function (a, b) {\n        if (a < b) return -1;\n        if (a > b) return 1;\n\n        if (a === b) {\n            if (a !== 0) return 0;\n\n            var ia = 1 / a;\n            return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n        }\n\n        return a !== a ? (b !== b ? 0 : 1) : -1\n    };\n\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.sort === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'sort', {\n                value: function(compareFunction) {\n                    return Array.prototype.sort.call(this, compareFunction || totalOrderComparator);\n                }\n            });\n        }\n    }\n})();\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.equals = function (obj1, obj2) {\n    if (obj1 == null) {\n        return obj2 == null;\n    }\n\n    if (obj2 == null) {\n        return false;\n    }\n\n    if (obj1 !== obj1) {\n        return obj2 !== obj2;\n    }\n\n    if (typeof obj1 === \"object\" && typeof obj1.equals === \"function\") {\n        return obj1.equals(obj2);\n    }\n\n    if (typeof obj1 === \"number\" && typeof obj2 === \"number\") {\n        return obj1 === obj2 && (obj1 !== 0 || 1 / obj1 === 1 / obj2)\n    }\n\n    return obj1 === obj2;\n};\n\nKotlin.hashCode = function (obj) {\n    if (obj == null) {\n        return 0;\n    }\n    var objType = typeof obj;\n    if (\"object\" === objType) {\n        return \"function\" === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);\n    }\n    if (\"function\" === objType) {\n        return getObjectHashCode(obj);\n    }\n    if (\"number\" === objType) {\n        return Kotlin.numberHashCode(obj);\n    }\n    if (\"boolean\" === objType) {\n        return Number(obj)\n    }\n\n    var str = String(obj);\n    return getStringHashCode(str);\n};\n\n\nKotlin.toString = function (o) {\n    if (o == null) {\n        return \"null\";\n    }\n    else if (Kotlin.isArrayish(o)) {\n        return \"[...]\";\n    }\n    else {\n        return o.toString();\n    }\n};\n\n/** @const */\nvar POW_2_32 = 4294967296;\n// TODO: consider switching to Symbol type once we are on ES6.\n/** @const */\nvar OBJECT_HASH_CODE_PROPERTY_NAME = \"kotlinHashCodeValue$\";\n\nfunction getObjectHashCode(obj) {\n    if (!(OBJECT_HASH_CODE_PROPERTY_NAME in obj)) {\n        var hash = (Math.random() * POW_2_32) | 0; // Make 32-bit singed integer.\n        Object.defineProperty(obj, OBJECT_HASH_CODE_PROPERTY_NAME, { value:  hash, enumerable: false });\n    }\n    return obj[OBJECT_HASH_CODE_PROPERTY_NAME];\n}\n\nfunction getStringHashCode(str) {\n    var hash = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code  = str.charCodeAt(i);\n        hash  = (hash * 31 + code) | 0; // Keep it 32-bit.\n    }\n    return hash;\n}\n\nKotlin.identityHashCode = getObjectHashCode;\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/**\n * @param {string} id\n * @param {Object} declaration\n */\nKotlin.defineModule = function (id, declaration) {\n};\n\nKotlin.defineInlineFunction = function(tag, fun) {\n    return fun;\n};\n\nKotlin.wrapFunction = function(fun) {\n    var f = function() {\n        f = fun();\n        return f.apply(this, arguments);\n    };\n    return function() {\n        return f.apply(this, arguments);\n    };\n};\n\nKotlin.isTypeOf = function(type) {\n    return function (object) {\n        return typeof object === type;\n    }\n};\n\nKotlin.isInstanceOf = function (klass) {\n    return function (object) {\n        return Kotlin.isType(object, klass);\n    }\n};\n\nKotlin.orNull = function (fn) {\n    return function (object) {\n        return object == null || fn(object);\n    }\n};\n\nKotlin.andPredicate = function (a, b) {\n    return function (object) {\n        return a(object) && b(object);\n    }\n};\n\nKotlin.kotlinModuleMetadata = function (abiVersion, moduleName, data) {\n};\n\nKotlin.suspendCall = function(value) {\n    return value;\n};\n\nKotlin.coroutineResult = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineController = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineReceiver = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.setCoroutineResult = function(value, qualifier) {\n    throwMarkerError();\n};\n\nKotlin.getReifiedTypeParameterKType = function(typeParameter) {\n    throwMarkerError();\n};\n\nfunction throwMarkerError() {\n    throw new Error(\n        \"This marker function should never been called. \" +\n        \"Looks like compiler did not eliminate it properly. \" +\n        \"Please, report an issue if you caught this exception.\");\n}\n\nKotlin.getFunctionById = function(id, defaultValue) {\n    return function() {\n        return defaultValue;\n    }\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.toShort = function (a) {\n    return (a & 0xFFFF) << 16 >> 16;\n};\n\nKotlin.toByte = function (a) {\n    return (a & 0xFF) << 24 >> 24;\n};\n\nKotlin.toChar = function (a) {\n    return a & 0xFFFF;\n};\n\nKotlin.numberToLong = function (a) {\n    return a instanceof Kotlin.Long ? a : Kotlin.Long.fromNumber(a);\n};\n\nKotlin.numberToInt = function (a) {\n    return a instanceof Kotlin.Long ? a.toInt() : Kotlin.doubleToInt(a);\n};\n\nKotlin.numberToShort = function (a) {\n    return Kotlin.toShort(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToByte = function (a) {\n    return Kotlin.toByte(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToDouble = function (a) {\n    return +a;\n};\n\nKotlin.numberToChar = function (a) {\n    return Kotlin.toChar(Kotlin.numberToInt(a));\n};\n\nKotlin.doubleToInt = function(a) {\n    if (a > 2147483647) return 2147483647;\n    if (a < -2147483648) return -2147483648;\n    return a | 0;\n};\n\nKotlin.toBoxedChar = function (a) {\n    if (a == null) return a;\n    if (a instanceof Kotlin.BoxedChar) return a;\n    return new Kotlin.BoxedChar(a);\n};\n\nKotlin.unboxChar = function(a) {\n    if (a == null) return a;\n    return Kotlin.toChar(a);\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @constructor\n * @final\n */\nKotlin.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\nKotlin.Long.$metadata$ = {\n    kind: \"class\",\n    simpleName: \"Long\",\n    interfaces:[]\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @private\n */\nKotlin.Long.IntCache_ = {};\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Kotlin.Long.IntCache_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Kotlin.Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Kotlin.Long.IntCache_[value] = obj;\n  }\n  return obj;\n};\n\n\n/**\n * Converts this number value to `Long`.\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is `NaN`, `Long.MIN_VALUE` if it's less than `Long.MIN_VALUE`,\n * `Long.MAX_VALUE` if it's bigger than `Long.MAX_VALUE`.\n * @param {number} value The number in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromNumber = function(value) {\n  if (isNaN(value)) {\n    return Kotlin.Long.ZERO;\n  } else if (value <= -Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MIN_VALUE;\n  } else if (value + 1 >= Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Kotlin.Long.fromNumber(-value).negate();\n  } else {\n    return new Kotlin.Long(\n        (value % Kotlin.Long.TWO_PWR_32_DBL_) | 0,\n        (value / Kotlin.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromBits = function(lowBits, highBits) {\n  return new Kotlin.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return Kotlin.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Kotlin.Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Kotlin.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Kotlin.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Kotlin.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_24_DBL_ = 1 << 24;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_32_DBL_ =\n    Kotlin.Long.TWO_PWR_16_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_31_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ / 2;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_48_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_64_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_63_DBL_ =\n    Kotlin.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ZERO = Kotlin.Long.fromInt(0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ONE = Kotlin.Long.fromInt(1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.NEG_ONE = Kotlin.Long.fromInt(-1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MAX_VALUE =\n    Kotlin.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MIN_VALUE = Kotlin.Long.fromBits(0, 0x80000000 | 0);\n\n\n/**\n * @type {!Kotlin.Long}\n * @private\n */\nKotlin.Long.TWO_PWR_24_ = Kotlin.Long.fromInt(1 << 24);\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\nKotlin.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\nKotlin.Long.prototype.toNumber = function() {\n  return this.high_ * Kotlin.Long.TWO_PWR_32_DBL_ +\n         this.getLowBitsUnsigned();\n};\n\n/** @return {number} The 32-bit hashCode of this value. */\nKotlin.Long.prototype.hashCode = function() {\n  return this.high_ ^ this.low_;\n};\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\nKotlin.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Kotlin.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\nKotlin.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\nKotlin.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\nKotlin.Long.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ?\n      this.low_ : Kotlin.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\nKotlin.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\nKotlin.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\nKotlin.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\nKotlin.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\nKotlin.Long.prototype.equalsLong = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\nKotlin.Long.prototype.notEqualsLong = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\nKotlin.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\nKotlin.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\nKotlin.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\nKotlin.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {Kotlin.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\nKotlin.Long.prototype.compare = function(other) {\n  if (this.equalsLong(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!Kotlin.Long} The negation of this value. */\nKotlin.Long.prototype.negate = function() {\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.MIN_VALUE;\n  } else {\n    return this.not().add(Kotlin.Long.ONE);\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {Kotlin.Long} other Long to add to this one.\n * @return {!Kotlin.Long} The sum of this and the given Long.\n */\nKotlin.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {Kotlin.Long} other Long to subtract from this.\n * @return {!Kotlin.Long} The difference of this and the given Long.\n */\nKotlin.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {Kotlin.Long} other Long to multiply with this.\n * @return {!Kotlin.Long} The product of this and the other.\n */\nKotlin.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  } else if (other.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return other.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return this.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(Kotlin.Long.TWO_PWR_24_) &&\n      other.lessThan(Kotlin.Long.TWO_PWR_24_)) {\n    return Kotlin.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {Kotlin.Long} other Long by which to divide.\n * @return {!Kotlin.Long} This Long divided by the given one.\n */\nKotlin.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    if (other.equalsLong(Kotlin.Long.ONE) ||\n        other.equalsLong(Kotlin.Long.NEG_ONE)) {\n      return Kotlin.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return Kotlin.Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equalsLong(Kotlin.Long.ZERO)) {\n        return other.isNegative() ? Kotlin.Long.ONE : Kotlin.Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Kotlin.Long.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Kotlin.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Kotlin.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Kotlin.Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {Kotlin.Long} other Long by which to mod.\n * @return {!Kotlin.Long} This Long modulo the given one.\n */\nKotlin.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!Kotlin.Long} The bitwise-NOT of this value. */\nKotlin.Long.prototype.not = function() {\n  return Kotlin.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to AND.\n * @return {!Kotlin.Long} The bitwise-AND of this and the other.\n */\nKotlin.Long.prototype.and = function(other) {\n  return Kotlin.Long.fromBits(this.low_ & other.low_,\n                                 this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to OR.\n * @return {!Kotlin.Long} The bitwise-OR of this and the other.\n */\nKotlin.Long.prototype.or = function(other) {\n  return Kotlin.Long.fromBits(this.low_ | other.low_,\n                                 this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to XOR.\n * @return {!Kotlin.Long} The bitwise-XOR of this and the other.\n */\nKotlin.Long.prototype.xor = function(other) {\n  return Kotlin.Long.fromBits(this.low_ ^ other.low_,\n                                 this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the left by the given amount.\n */\nKotlin.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Kotlin.Long.fromBits(\n          low << numBits,\n          (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Kotlin.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount.\n */\nKotlin.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >> numBits);\n    } else {\n      return Kotlin.Long.fromBits(\n          high >> (numBits - 32),\n          high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\nKotlin.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >>> numBits);\n    } else if (numBits == 32) {\n      return Kotlin.Long.fromBits(high, 0);\n    } else {\n      return Kotlin.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n// Support for Kotlin\nKotlin.Long.prototype.equals = function (other) {\n    return other instanceof Kotlin.Long && this.equalsLong(other);\n};\n\nKotlin.Long.prototype.compareTo_11rb$ = Kotlin.Long.prototype.compare;\n\nKotlin.Long.prototype.inc = function() {\n    return this.add(Kotlin.Long.ONE);\n};\n\nKotlin.Long.prototype.dec = function() {\n    return this.add(Kotlin.Long.NEG_ONE);\n};\n\nKotlin.Long.prototype.valueOf = function() {\n    return this.toNumber();\n};\n\nKotlin.Long.prototype.unaryPlus = function() {\n    return this;\n};\n\nKotlin.Long.prototype.unaryMinus = Kotlin.Long.prototype.negate;\nKotlin.Long.prototype.inv = Kotlin.Long.prototype.not;\n\nKotlin.Long.prototype.rangeTo = function (other) {\n    return new Kotlin.kotlin.ranges.LongRange(this, other);\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.Kind = {\n    CLASS: \"class\",\n    INTERFACE: \"interface\",\n    OBJECT: \"object\"\n};\n\nKotlin.callGetter = function (thisObject, klass, propertyName) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.get != null) {\n        return propertyDescriptor.get.call(thisObject);\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        return thisObject[propertyName];\n    }\n\n    return Kotlin.callGetter(thisObject, Object.getPrototypeOf(klass), propertyName);\n};\n\nKotlin.callSetter = function (thisObject, klass, propertyName, value) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.set != null) {\n        propertyDescriptor.set.call(thisObject, value);\n        return;\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        thisObject[propertyName] = value;\n        return\n    }\n\n    Kotlin.callSetter(thisObject, Object.getPrototypeOf(klass), propertyName, value);\n};\n\nfunction isInheritanceFromInterface(ctor, iface) {\n    if (ctor === iface) return true;\n\n    var metadata = ctor.$metadata$;\n    if (metadata != null) {\n        var interfaces = metadata.interfaces;\n        for (var i = 0; i < interfaces.length; i++) {\n            if (isInheritanceFromInterface(interfaces[i], iface)) {\n                return true;\n            }\n        }\n    }\n\n    var superPrototype = ctor.prototype != null ? Object.getPrototypeOf(ctor.prototype) : null;\n    var superConstructor = superPrototype != null ? superPrototype.constructor : null;\n    return superConstructor != null && isInheritanceFromInterface(superConstructor, iface);\n}\n\n/**\n *\n * @param {*} object\n * @param {Function|Object} klass\n * @returns {Boolean}\n */\nKotlin.isType = function (object, klass) {\n    if (klass === Object) {\n        switch (typeof object) {\n            case \"string\":\n            case \"number\":\n            case \"boolean\":\n            case \"function\":\n                return true;\n            default:\n                return object instanceof Object;\n        }\n    }\n\n    if (object == null || klass == null || (typeof object !== 'object' && typeof object !== 'function')) {\n        return false;\n    }\n\n    if (typeof klass === \"function\" && object instanceof klass) {\n        return true;\n    }\n\n    var proto = Object.getPrototypeOf(klass);\n    var constructor = proto != null ? proto.constructor : null;\n    if (constructor != null && \"$metadata$\" in constructor) {\n        var metadata = constructor.$metadata$;\n        if (metadata.kind === Kotlin.Kind.OBJECT) {\n            return object === klass;\n        }\n    }\n\n    var klassMetadata = klass.$metadata$;\n\n    // In WebKit (JavaScriptCore) for some interfaces from DOM typeof returns \"object\", nevertheless they can be used in RHS of instanceof\n    if (klassMetadata == null) {\n        return object instanceof klass;\n    }\n\n    if (klassMetadata.kind === Kotlin.Kind.INTERFACE && object.constructor != null) {\n        return isInheritanceFromInterface(object.constructor, klass);\n    }\n\n    return false;\n};\n\nKotlin.isNumber = function (a) {\n    return typeof a == \"number\" || a instanceof Kotlin.Long;\n};\n\nKotlin.isChar = function (value) {\n    return value instanceof Kotlin.BoxedChar\n};\n\nKotlin.isComparable = function (value) {\n    var type = typeof value;\n\n    return type === \"string\" ||\n           type === \"boolean\" ||\n           Kotlin.isNumber(value) ||\n           Kotlin.isType(value, Kotlin.kotlin.Comparable);\n};\n\nKotlin.isCharSequence = function (value) {\n    return typeof value === \"string\" || Kotlin.isType(value, Kotlin.kotlin.CharSequence);\n};",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\npublic class Enum<T : Enum<T>> : Comparable<Enum<T>> {\n    @JsName(\"name$\") private var _name: String = \"\"\n    @JsName(\"ordinal$\") private var _ordinal: Int = 0\n\n    val name: String\n        get() = _name\n\n    val ordinal: Int\n        get() = _ordinal\n\n    override fun compareTo(other: Enum<T>) = ordinal.compareTo(other.ordinal)\n\n    override fun equals(other: Any?) = this === other\n\n    override fun hashCode(): Int = js(\"Kotlin.identityHashCode\")(this)\n\n    override fun toString() = name\n\n    companion object\n}",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntRange.random(random: Random): Int {\n    try {\n        return random.nextInt(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongRange.random(random: Random): Long {\n    try {\n        return random.nextLong(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharRange.random(random: Random): Char {\n    try {\n        return random.nextInt(first.toInt(), last.toInt() + 1).toChar()\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntRange.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return random.nextInt(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongRange.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return random.nextLong(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharRange.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return random.nextInt(first.toInt(), last.toInt() + 1).toChar()\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(element: Int?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(element: Long?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun CharRange.contains(element: Char?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Byte): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Byte): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Byte): Boolean {\n    return contains(value.toShort())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Byte): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Byte): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Double): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Double): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Double): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Double): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Double): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Float): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Float): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Float): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Float): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Float): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Int): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Int): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Int): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Int): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Int): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Long): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Long): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Long): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Long): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Long): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Short): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Short): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Short): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Short): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Short): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Byte): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Char.downTo(to: Char): CharProgression {\n    return CharProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Int): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this, to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Short): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun IntProgression.reversed(): IntProgression {\n    return IntProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun LongProgression.reversed(): LongProgression {\n    return LongProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun CharProgression.reversed(): CharProgression {\n    return CharProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun IntProgression.step(step: Int): IntProgression {\n    checkStepIsPositive(step > 0, step)\n    return IntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun LongProgression.step(step: Long): LongProgression {\n    checkStepIsPositive(step > 0, step)\n    return LongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun CharProgression.step(step: Int): CharProgression {\n    checkStepIsPositive(step > 0, step)\n    return CharProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\ninternal fun Int.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toInt()..Byte.MAX_VALUE.toInt()) this.toByte() else null\n}\n\ninternal fun Long.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toLong()..Byte.MAX_VALUE.toLong()) this.toByte() else null\n}\n\ninternal fun Short.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toShort()..Byte.MAX_VALUE.toShort()) this.toByte() else null\n}\n\ninternal fun Double.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toDouble()..Byte.MAX_VALUE.toDouble()) this.toByte() else null\n}\n\ninternal fun Float.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toFloat()..Byte.MAX_VALUE.toFloat()) this.toByte() else null\n}\n\ninternal fun Long.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toLong()..Int.MAX_VALUE.toLong()) this.toInt() else null\n}\n\ninternal fun Double.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toDouble()..Int.MAX_VALUE.toDouble()) this.toInt() else null\n}\n\ninternal fun Float.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toFloat()..Int.MAX_VALUE.toFloat()) this.toInt() else null\n}\n\ninternal fun Double.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toDouble()..Long.MAX_VALUE.toDouble()) this.toLong() else null\n}\n\ninternal fun Float.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toFloat()..Long.MAX_VALUE.toFloat()) this.toLong() else null\n}\n\ninternal fun Int.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toInt()..Short.MAX_VALUE.toInt()) this.toShort() else null\n}\n\ninternal fun Long.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toLong()..Short.MAX_VALUE.toLong()) this.toShort() else null\n}\n\ninternal fun Double.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toDouble()..Short.MAX_VALUE.toDouble()) this.toShort() else null\n}\n\ninternal fun Float.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toFloat()..Short.MAX_VALUE.toFloat()) this.toShort() else null\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Byte): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Byte): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Char.until(to: Char): CharRange {\n    if (to <= '\\u0000') return CharRange.EMPTY\n    return this .. (to - 1).toChar()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Int): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Short): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Short): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Byte.coerceAtLeast(minimumValue: Byte): Byte {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Short.coerceAtLeast(minimumValue: Short): Short {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Int.coerceAtLeast(minimumValue: Int): Int {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Long.coerceAtLeast(minimumValue: Long): Long {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Float.coerceAtLeast(minimumValue: Float): Float {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Double.coerceAtLeast(minimumValue: Double): Double {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Byte.coerceAtMost(maximumValue: Byte): Byte {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Short.coerceAtMost(maximumValue: Short): Short {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Int.coerceAtMost(maximumValue: Int): Int {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Long.coerceAtMost(maximumValue: Long): Long {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Float.coerceAtMost(maximumValue: Float): Float {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Double.coerceAtMost(maximumValue: Double): Double {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T {\n    if (minimumValue !== null && maximumValue !== null) {\n        if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n        if (this < minimumValue) return minimumValue\n        if (this > maximumValue) return maximumValue\n    }\n    else {\n        if (minimumValue !== null && this < minimumValue) return minimumValue\n        if (maximumValue !== null && this > maximumValue) return maximumValue\n    }\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Byte.coerceIn(minimumValue: Byte, maximumValue: Byte): Byte {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Short.coerceIn(minimumValue: Short, maximumValue: Short): Short {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(minimumValue: Int, maximumValue: Int): Int {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(minimumValue: Long, maximumValue: Long): Long {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Float.coerceIn(minimumValue: Float, maximumValue: Float): Float {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Double.coerceIn(minimumValue: Double, maximumValue: Double): Double {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInFloatingPointRange\n */\n@SinceKotlin(\"1.1\")\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedFloatingPointRange<T>): T {\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        // this < start equiv to this <= start && !(this >= start)\n        range.lessThanOrEquals(this, range.start) && !range.lessThanOrEquals(range.start, this) -> range.start\n        // this > end equiv to this >= end && !(this <= end)\n        range.lessThanOrEquals(range.endInclusive, this) && !range.lessThanOrEquals(this, range.endInclusive) -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<T>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(range: ClosedRange<Int>): Int {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Int>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(range: ClosedRange<Long>): Long {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Long>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UByte @PublishedApi internal constructor(@PublishedApi internal val data: Byte) : Comparable<UByte> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UByte can have.\n         */\n        public const val MIN_VALUE: UByte = UByte(0)\n\n        /**\n         * A constant holding the maximum value an instance of UByte can have.\n         */\n        public const val MAX_VALUE: UByte = UByte(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 1\n\n        /**\n         * The number of bits used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BITS: Int = 8\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UByte = UByte(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UByte = UByte(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UByte): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UByte): UByte = UByte(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UByte): UByte = UByte(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UByte): UByte = UByte(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UByte = UByte(data.inv())\n\n    /**\n     * Converts this [UByte] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UByte`. Otherwise the result is negative.\n     *\n     * The resulting `Byte` value has the same binary representation as this `UByte` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data\n    /**\n     * Converts this [UByte] value to [Short].\n     *\n     * The resulting `Short` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Short` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort() and 0xFF\n    /**\n     * Converts this [UByte] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Int` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFF\n    /**\n     * Converts this [UByte] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Long` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFF\n\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = this\n    /**\n     * Converts this [UByte] value to [UShort].\n     *\n     * The resulting `UShort` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = UShort(data.toShort() and 0xFF)\n    /**\n     * Converts this [UByte] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFF)\n    /**\n     * Converts this [UByte] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFF)\n\n    /**\n     * Converts this [UByte] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UByte] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UByte].\n *\n * If this value is positive, the resulting `UByte` value represents the same numerical value as this `Byte`.\n *\n * The resulting `UByte` value has the same binary representation as this `Byte` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUByte(): UByte = UByte(this)\n/**\n * Converts this [Short] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Short`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Int] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Long] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUByte(): UByte = UByte(this.toByte())\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UInt @PublishedApi internal constructor(@PublishedApi internal val data: Int) : Comparable<UInt> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UInt can have.\n         */\n        public const val MIN_VALUE: UInt = UInt(0)\n\n        /**\n         * A constant holding the maximum value an instance of UInt can have.\n         */\n        public const val MAX_VALUE: UInt = UInt(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 4\n\n        /**\n         * The number of bits used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BITS: Int = 32\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UInt): Int = uintCompare(this.data, other.data)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = UInt(this.data.plus(other.data))\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = UInt(this.data.minus(other.data))\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = UInt(this.data.times(other.data))\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = uintDivide(this, other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = uintRemainder(this, other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UInt = UInt(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UInt = UInt(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UInt): UIntRange = UIntRange(this, other)\n\n    /** Shifts this value left by the [bitCount] number of bits. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): UInt = UInt(data shl bitCount)\n    /** Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): UInt = UInt(data ushr bitCount)\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UInt): UInt = UInt(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UInt): UInt = UInt(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UInt): UInt = UInt(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UInt = UInt(data.inv())\n\n    /**\n     * Converts this [UInt] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UInt` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UInt] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Short` value is represented by the least significant 16 bits of this `UInt` value.\n     * Note that the resulting `Short` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    /**\n     * Converts this [UInt] value to [Int].\n     *\n     * If this value is less than or equals to [Int.MAX_VALUE], the resulting `Int` value represents\n     * the same numerical value as this `UInt`. Otherwise the result is negative.\n     *\n     * The resulting `Int` value has the same binary representation as this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data\n    /**\n     * Converts this [UInt] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `Long` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF_FFFF\n\n    /**\n     * Converts this [UInt] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /**\n     * Converts this [UInt] value to [UShort].\n     *\n     * If this value is less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UShort` value is represented by the least significant 16 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = this\n    /**\n     * Converts this [UInt] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `ULong` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF_FFFF)\n\n    /**\n     * Converts this [UInt] value to [Float].\n     *\n     * The resulting value is the closest `Float` to this `UInt` value.\n     * In case when this `UInt` value is exactly between two `Float`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toDouble().toFloat()\n    /**\n     * Converts this [UInt] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UInt`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = uintToDouble(data)\n\n    public override fun toString(): String = toLong().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `Byte` value,\n * whereas the most significant 24 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Short] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Short`.\n *\n * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `Short` value,\n * whereas the most significant 16 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Int] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Int`.\n *\n * The resulting `UInt` value has the same binary representation as this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUInt(): UInt = UInt(this)\n/**\n * Converts this [Long] value to [UInt].\n *\n * If this value is positive and less than or equals to [UInt.MAX_VALUE], the resulting `UInt` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UInt` value is represented by the least significant 32 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUInt(): UInt = UInt(this.toInt())\n\n/**\n * Converts this [Float] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Float` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Float.toUInt(): UInt = doubleToUInt(this.toDouble())\n/**\n * Converts this [Double] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Double.toUInt(): UInt = doubleToUInt(this)\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UShort @PublishedApi internal constructor(@PublishedApi internal val data: Short) : Comparable<UShort> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UShort can have.\n         */\n        public const val MIN_VALUE: UShort = UShort(0)\n\n        /**\n         * A constant holding the maximum value an instance of UShort can have.\n         */\n        public const val MAX_VALUE: UShort = UShort(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 2\n\n        /**\n         * The number of bits used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BITS: Int = 16\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UShort = UShort(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UShort = UShort(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UShort): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UShort): UShort = UShort(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UShort): UShort = UShort(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UShort): UShort = UShort(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UShort = UShort(data.inv())\n\n    /**\n     * Converts this [UShort] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UShort` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UShort] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UShort`. Otherwise the result is negative.\n     *\n     * The resulting `Short` value has the same binary representation as this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data\n    /**\n     * Converts this [UShort] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Int` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFFFF\n    /**\n     * Converts this [UShort] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Long` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF\n\n    /**\n     * Converts this [UShort] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = this\n    /**\n     * Converts this [UShort] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFFFF)\n    /**\n     * Converts this [UShort] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF)\n\n    /**\n     * Converts this [UShort] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UShort] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `Byte` value,\n * whereas the most significant 8 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Short] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Short`.\n *\n * The resulting `UShort` value has the same binary representation as this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUShort(): UShort = UShort(this)\n/**\n * Converts this [Int] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Long] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUShort(): UShort = UShort(this.toShort())\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * A range of values of type `Char`.\n */\npublic class CharRange(start: Char, endInclusive: Char) : CharProgression(start, endInclusive, 1), ClosedRange<Char> {\n    override val start: Char get() = first\n    override val endInclusive: Char get() = last\n\n    override fun contains(value: Char): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first.toInt() + last.toInt())\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Char. */\n        public val EMPTY: CharRange = CharRange(1.toChar(), 0.toChar())\n    }\n}\n\n/**\n * A range of values of type `Int`.\n */\npublic class IntRange(start: Int, endInclusive: Int) : IntProgression(start, endInclusive, 1), ClosedRange<Int> {\n    override val start: Int get() = first\n    override val endInclusive: Int get() = last\n\n    override fun contains(value: Int): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first + last)\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Int. */\n        public val EMPTY: IntRange = IntRange(1, 0)\n    }\n}\n\n/**\n * A range of values of type `Long`.\n */\npublic class LongRange(start: Long, endInclusive: Long) : LongProgression(start, endInclusive, 1), ClosedRange<Long> {\n    override val start: Long get() = first\n    override val endInclusive: Long get() = last\n\n    override fun contains(value: Long): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))).toInt()\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Long. */\n        public val EMPTY: LongRange = LongRange(1, 0)\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return ArrayList<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction)\n}\n\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashSet<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashSet<E>(mapCapacity(capacity)).apply(builderAction)\n}\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"PLATFORM_CLASS_MAPPED_TO_KOTLIN\")\n\npackage kotlin.text\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(): Byte? = toByteOrNull(radix = 10)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(radix: Int): Byte? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Byte.MIN_VALUE || int > Byte.MAX_VALUE) return null\n    return int.toByte()\n}\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(): Short? = toShortOrNull(radix = 10)\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(radix: Int): Short? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Short.MIN_VALUE || int > Short.MAX_VALUE) return null\n    return int.toShort()\n}\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(): Int? = toIntOrNull(radix = 10)\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(radix: Int): Int? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Int.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Int.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Int.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Int.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(): Long? = toLongOrNull(radix = 10)\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(radix: Int): Long? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Long\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Long.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Long.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Long.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Long.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0L\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n\ninternal fun numberFormatError(input: String): Nothing = throw NumberFormatException(\"Invalid number format: '$input'\")\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"UnsignedKt\")\n@file:UseExperimental(ExperimentalUnsignedTypes::class)\npackage kotlin\n\n@PublishedApi\ninternal fun uintCompare(v1: Int, v2: Int): Int = (v1 xor Int.MIN_VALUE).compareTo(v2 xor Int.MIN_VALUE)\n@PublishedApi\ninternal fun ulongCompare(v1: Long, v2: Long): Int = (v1 xor Long.MIN_VALUE).compareTo(v2 xor Long.MIN_VALUE)\n\n@PublishedApi\ninternal fun uintDivide(v1: UInt, v2: UInt): UInt = (v1.toLong() / v2.toLong()).toUInt()\n@PublishedApi\ninternal fun uintRemainder(v1: UInt, v2: UInt): UInt = (v1.toLong() % v2.toLong()).toUInt()\n\n// Division and remainder are based on Guava's UnsignedLongs implementation\n// Copyright 2011 The Guava Authors\n\n@PublishedApi\ninternal fun ulongDivide(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) ULong(0) else ULong(1)\n    }\n\n    // Optimization - use signed division if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend / divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(quotient + if (ULong(rem) >= ULong(divisor)) 1 else 0)\n\n}\n\n@PublishedApi\ninternal fun ulongRemainder(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) {\n            v1 // dividend < divisor\n        } else {\n            v1 - v2 // dividend >= divisor\n        }\n    }\n\n    // Optimization - use signed modulus if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend % divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(rem - if (ULong(rem) >= ULong(divisor)) divisor else 0)\n}\n\n@PublishedApi\ninternal fun doubleToUInt(v: Double): UInt = when {\n    v.isNaN() -> 0u\n    v <= UInt.MIN_VALUE.toDouble() -> UInt.MIN_VALUE\n    v >= UInt.MAX_VALUE.toDouble() -> UInt.MAX_VALUE\n    v <= Int.MAX_VALUE -> v.toInt().toUInt()\n    else -> (v - Int.MAX_VALUE).toInt().toUInt() + Int.MAX_VALUE.toUInt()      // Int.MAX_VALUE < v < UInt.MAX_VALUE\n}\n\n@PublishedApi\ninternal fun doubleToULong(v: Double): ULong = when {\n    v.isNaN() -> 0u\n    v <= ULong.MIN_VALUE.toDouble() -> ULong.MIN_VALUE\n    v >= ULong.MAX_VALUE.toDouble() -> ULong.MAX_VALUE\n    v < Long.MAX_VALUE -> v.toLong().toULong()\n\n    // Real values from Long.MAX_VALUE to (Long.MAX_VALUE + 1) are not representable in Double, so don't handle them.\n    else -> (v - 9223372036854775808.0).toLong().toULong() + 9223372036854775808uL      // Long.MAX_VALUE + 1 < v < ULong.MAX_VALUE\n}\n\n\n@PublishedApi\ninternal fun uintToDouble(v: Int): Double = (v and Int.MAX_VALUE).toDouble() + (v ushr 31 shl 30).toDouble() * 2\n\n@PublishedApi\ninternal fun ulongToDouble(v: Long): Double = (v ushr 11).toDouble() * 2048 + (v and 2047)\n\n\ninternal fun ulongToString(v: Long): String = ulongToString(v, 10)\n\ninternal fun ulongToString(v: Long, base: Int): String {\n    if (v >= 0) return v.toString(base)\n\n    var quotient = ((v ushr 1) / base) shl 1\n    var rem = v - quotient * base\n    if (rem >= base) {\n        rem -= base\n        quotient += 1\n    }\n    return quotient.toString(base) + rem.toString(base)\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n/**\n * Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\n * provided by that function.\n * The values are evaluated lazily, and the sequence is potentially infinite.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence(crossinline iterator: () -> Iterator<T>): Sequence<T> = object : Sequence<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\npublic fun <T> Iterator<T>.asSequence(): Sequence<T> = Sequence { this }.constrainOnce()\n\n/**\n * Creates a sequence that returns the specified values.\n *\n * @sample samples.collections.Sequences.Building.sequenceOfValues\n */\npublic fun <T> sequenceOf(vararg elements: T): Sequence<T> = if (elements.isEmpty()) emptySequence() else elements.asSequence()\n\n/**\n * Returns an empty sequence.\n */\npublic fun <T> emptySequence(): Sequence<T> = EmptySequence\n\nprivate object EmptySequence : Sequence<Nothing>, DropTakeSequence<Nothing> {\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun drop(n: Int) = EmptySequence\n    override fun take(n: Int) = EmptySequence\n}\n\n/**\n * Returns this sequence if it's not `null` and the empty sequence otherwise.\n * @sample samples.collections.Sequences.Usage.sequenceOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>?.orEmpty(): Sequence<T> = this ?: emptySequence()\n\n\n/**\n * Returns a sequence that iterates through the elements either of this sequence\n * or, if this sequence turns out to be empty, of the sequence returned by [defaultValue] function.\n *\n * @sample samples.collections.Sequences.Usage.sequenceIfEmpty\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Sequence<T>.ifEmpty(defaultValue: () -> Sequence<T>): Sequence<T> = sequence {\n    val iterator = this@ifEmpty.iterator()\n    if (iterator.hasNext()) {\n        yieldAll(iterator)\n    } else {\n        yieldAll(defaultValue())\n    }\n}\n\n/**\n * Returns a sequence of all elements from all sequences in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<Sequence<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\n/**\n * Returns a sequence of all elements from all iterables in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.jvm.JvmName(\"flattenSequenceOfIterable\")\npublic fun <T> Sequence<Iterable<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\nprivate fun <T, R> Sequence<T>.flatten(iterator: (T) -> Iterator<R>): Sequence<R> {\n    if (this is TransformingSequence<*, *>) {\n        return (this as TransformingSequence<*, T>).flatten(iterator)\n    }\n    return FlatteningSequence(this, { it }, iterator)\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this sequence,\n * *second* list is built from the second values of each pair from this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T, R> Sequence<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val listT = ArrayList<T>()\n    val listR = ArrayList<R>()\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n\n/**\n * A sequence that returns the values from the underlying [sequence] that either match or do not match\n * the specified [predicate].\n *\n * @param sendWhen If `true`, values for which the predicate returns `true` are returned. Otherwise,\n * values for which the predicate returns `false` are returned\n */\ninternal class FilteringSequence<T>(\n    private val sequence: Sequence<T>,\n    private val sendWhen: Boolean = true,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item) == sendWhen) {\n                    nextItem = item\n                    nextState = 1\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem\n            nextItem = null\n            nextState = -1\n            @Suppress(\"UNCHECKED_CAST\")\n            return result as T\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence].\n */\n\ninternal class TransformingSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        override fun next(): R {\n            return transformer(iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n\n    internal fun <E> flatten(iterator: (R) -> Iterator<E>): Sequence<E> {\n        return FlatteningSequence<T, R, E>(sequence, transformer, iterator)\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence], where the transformer function takes the index of the value in the underlying\n * sequence along with the value itself.\n */\ninternal class TransformingIndexedSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (Int, T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): R {\n            return transformer(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which combines values from the underlying [sequence] with their indices and returns them as\n * [IndexedValue] objects.\n */\ninternal class IndexingSequence<T>\nconstructor(private val sequence: Sequence<T>) : Sequence<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = object : Iterator<IndexedValue<T>> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): IndexedValue<T> {\n            return IndexedValue(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which takes the values from two parallel underlying sequences, passes them to the given\n * [transform] function and returns the values returned by that function. The sequence stops returning\n * values as soon as one of the underlying sequences stops returning values.\n */\ninternal class MergingSequence<T1, T2, V>\nconstructor(\n    private val sequence1: Sequence<T1>,\n    private val sequence2: Sequence<T2>,\n    private val transform: (T1, T2) -> V\n) : Sequence<V> {\n    override fun iterator(): Iterator<V> = object : Iterator<V> {\n        val iterator1 = sequence1.iterator()\n        val iterator2 = sequence2.iterator()\n        override fun next(): V {\n            return transform(iterator1.next(), iterator2.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator1.hasNext() && iterator2.hasNext()\n        }\n    }\n}\n\ninternal class FlatteningSequence<T, R, E>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val transformer: (T) -> R,\n    private val iterator: (R) -> Iterator<E>\n) : Sequence<E> {\n    override fun iterator(): Iterator<E> = object : Iterator<E> {\n        val iterator = sequence.iterator()\n        var itemIterator: Iterator<E>? = null\n\n        override fun next(): E {\n            if (!ensureItemIterator())\n                throw NoSuchElementException()\n            return itemIterator!!.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return ensureItemIterator()\n        }\n\n        private fun ensureItemIterator(): Boolean {\n            if (itemIterator?.hasNext() == false)\n                itemIterator = null\n\n            while (itemIterator == null) {\n                if (!iterator.hasNext()) {\n                    return false\n                } else {\n                    val element = iterator.next()\n                    val nextItemIterator = iterator(transformer(element))\n                    if (nextItemIterator.hasNext()) {\n                        itemIterator = nextItemIterator\n                        return true\n                    }\n                }\n            }\n            return true\n        }\n    }\n}\n\n/**\n * A sequence that supports drop(n) and take(n) operations\n */\ninternal interface DropTakeSequence<T> : Sequence<T> {\n    fun drop(n: Int): Sequence<T>\n    fun take(n: Int): Sequence<T>\n}\n\n/**\n * A sequence that skips [startIndex] values from the underlying [sequence]\n * and stops returning values right before [endIndex], i.e. stops at `endIndex - 1`\n */\ninternal class SubSequence<T>(\n    private val sequence: Sequence<T>,\n    private val startIndex: Int,\n    private val endIndex: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(startIndex >= 0) { \"startIndex should be non-negative, but is $startIndex\" }\n        require(endIndex >= 0) { \"endIndex should be non-negative, but is $endIndex\" }\n        require(endIndex >= startIndex) { \"endIndex should be not less than startIndex, but was $endIndex < $startIndex\" }\n    }\n\n    private val count: Int get() = endIndex - startIndex\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, startIndex + n, endIndex)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else SubSequence(sequence, startIndex, startIndex + n)\n\n    override fun iterator() = object : Iterator<T> {\n\n        val iterator = sequence.iterator()\n        var position = 0\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (position < startIndex && iterator.hasNext()) {\n                iterator.next()\n                position++\n            }\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return (position < endIndex) && iterator.hasNext()\n        }\n\n        override fun next(): T {\n            drop()\n            if (position >= endIndex)\n                throw NoSuchElementException()\n            position++\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * A sequence that returns at most [count] values from the underlying [sequence], and stops returning values\n * as soon as that count is reached.\n */\ninternal class TakeSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, n, count)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else TakeSequence(sequence, n)\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var left = count\n        val iterator = sequence.iterator()\n\n        override fun next(): T {\n            if (left == 0)\n                throw NoSuchElementException()\n            left--\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return left > 0 && iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that returns values from the underlying [sequence] while the [predicate] function returns\n * `true`, and stops returning values once the function returns `false` for the next element.\n */\ninternal class TakeWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            if (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item)) {\n                    nextState = 1\n                    nextItem = item\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            if (nextState == 0)\n                throw NoSuchElementException()\n            @Suppress(\"UNCHECKED_CAST\")\n            val result = nextItem as T\n\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence that skips the specified number of values from the underlying [sequence] and returns\n * all values after that.\n */\ninternal class DropSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) DropSequence(this, n) else DropSequence(sequence, n1) }\n    override fun take(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) TakeSequence(this, n) else SubSequence(sequence, count, n1) }\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var left = count\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (left > 0 && iterator.hasNext()) {\n                iterator.next()\n                left--\n            }\n        }\n\n        override fun next(): T {\n            drop()\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that skips the values from the underlying [sequence] while the given [predicate] returns `true` and returns\n * all values after that.\n */\ninternal class DropWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var dropState: Int = -1 // -1 for not dropping, 1 for nextItem, 0 for normal iteration\n        var nextItem: T? = null\n\n        private fun drop() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (!predicate(item)) {\n                    nextItem = item\n                    dropState = 1\n                    return\n                }\n            }\n            dropState = 0\n        }\n\n        override fun next(): T {\n            if (dropState == -1)\n                drop()\n\n            if (dropState == 1) {\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextItem as T\n                nextItem = null\n                dropState = 0\n                return result\n            }\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            if (dropState == -1)\n                drop()\n            return dropState == 1 || iterator.hasNext()\n        }\n    }\n}\n\ninternal class DistinctSequence<T, K>(private val source: Sequence<T>, private val keySelector: (T) -> K) : Sequence<T> {\n    override fun iterator(): Iterator<T> = DistinctIterator(source.iterator(), keySelector)\n}\n\nprivate class DistinctIterator<T, K>(private val source: Iterator<T>, private val keySelector: (T) -> K) : AbstractIterator<T>() {\n    private val observed = HashSet<K>()\n\n    override fun computeNext() {\n        while (source.hasNext()) {\n            val next = source.next()\n            val key = keySelector(next)\n\n            if (observed.add(key)) {\n                setNext(next)\n                return\n            }\n        }\n\n        done()\n    }\n}\n\n\nprivate class GeneratorSequence<T : Any>(private val getInitialValue: () -> T?, private val getNextValue: (T) -> T?) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var nextItem: T? = null\n        var nextState: Int = -2 // -2 for initial unknown, -1 for next unknown, 0 for done, 1 for continue\n\n        private fun calcNext() {\n            nextItem = if (nextState == -2) getInitialValue() else getNextValue(nextItem!!)\n            nextState = if (nextItem == null) 0 else 1\n        }\n\n        override fun next(): T {\n            if (nextState < 0)\n                calcNext()\n\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as T\n            // Do not clean nextItem (to avoid keeping reference on yielded instance) -- need to keep state for getNextValue\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState < 0)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a wrapper sequence that provides values of this sequence, but ensures it can be iterated only one time.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * [IllegalStateException] is thrown on iterating the returned sequence from the second time.\n *\n */\npublic fun <T> Sequence<T>.constrainOnce(): Sequence<T> {\n    // as? does not work in js\n    //return this as? ConstrainedOnceSequence<T> ?: ConstrainedOnceSequence(this)\n    return if (this is ConstrainedOnceSequence<T>) this else ConstrainedOnceSequence(this)\n}\n\n\n/**\n * Returns a sequence which invokes the function to calculate the next value on each iteration until the function returns `null`.\n *\n * The returned sequence is constrained to be iterated only once.\n *\n * @see constrainOnce\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequence\n */\npublic fun <T : Any> generateSequence(nextFunction: () -> T?): Sequence<T> {\n    return GeneratorSequence(nextFunction, { nextFunction() }).constrainOnce()\n}\n\n/**\n * Returns a sequence defined by the starting value [seed] and the function [nextFunction],\n * which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seed] is `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times, each time starting with [seed].\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithSeed\n */\n@kotlin.internal.LowPriorityInOverloadResolution\npublic fun <T : Any> generateSequence(seed: T?, nextFunction: (T) -> T?): Sequence<T> =\n    if (seed == null)\n        EmptySequence\n    else\n        GeneratorSequence({ seed }, nextFunction)\n\n/**\n * Returns a sequence defined by the function [seedFunction], which is invoked to produce the starting value,\n * and the [nextFunction], which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seedFunction] returns `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times.\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithLazySeed\n */\npublic fun <T : Any> generateSequence(seedFunction: () -> T?, nextFunction: (T) -> T?): Sequence<T> =\n    GeneratorSequence(seedFunction, nextFunction)\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Given an [iterator] function constructs an [Iterable] instance that returns values through the [Iterator]\n * provided by that function.\n * @sample samples.collections.Iterables.Building.iterable\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable(crossinline iterator: () -> Iterator<T>): Iterable<T> = object : Iterable<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * A wrapper over another [Iterable] (or any other object that can produce an [Iterator]) that returns\n * an indexing iterator.\n */\ninternal class IndexingIterable<out T>(private val iteratorFactory: () -> Iterator<T>) : Iterable<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = IndexingIterator(iteratorFactory())\n}\n\n\n/**\n * Returns the size of this iterable if it is known, or `null` otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrNull(): Int? = if (this is Collection<*>) this.size else null\n\n/**\n * Returns the size of this iterable if it is known, or the specified [default] value otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrDefault(default: Int): Int = if (this is Collection<*>) this.size else default\n\n/** Returns true when it's safe to convert this collection to a set without changing contains method behavior. */\nprivate fun <T> Collection<T>.safeToConvertToSet() = size > 2 && this is ArrayList\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperationWith(source: Iterable<T>): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection ->\n            when {\n                source is Collection && source.size < 2 -> this\n                else -> if (this.safeToConvertToSet()) toHashSet() else this\n            }\n        else -> toHashSet()\n    }\n\n/** Converts this collection to a set, when it's worth so and it doesn't change contains method behavior. */\ninternal fun <T> Iterable<T>.convertToSetForSetOperation(): Collection<T> =\n    when (this) {\n        is Set -> this\n        is Collection -> if (this.safeToConvertToSet()) toHashSet() else this\n        else -> toHashSet()\n    }\n\n\n/**\n * Returns a single list of all elements from all collections in the given collection.\n * @sample samples.collections.Iterables.Operations.flattenIterable\n */\npublic fun <T> Iterable<Iterable<T>>.flatten(): List<T> {\n    val result = ArrayList<T>()\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this collection,\n * *second* list is built from the second values of each pair from this collection.\n * @sample samples.collections.Iterables.Operations.unzipIterable\n */\npublic fun <T, R> Iterable<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val expectedSize = collectionSizeOrDefault(10)\n    val listT = ArrayList<T>(expectedSize)\n    val listR = ArrayList<R>(expectedSize)\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, { it.iterator() })\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence that wraps each element of the original sequence\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the sequence is empty.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Sequence<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T, R> Sequence<T>.scan(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var accumulator = initial\n        for (element in this@scan) {\n            accumulator = operation(accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T, R> Sequence<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var index = 0\n        var accumulator = initial\n        for (element in this@scanIndexed) {\n            accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <S, T : S> Sequence<T>.scanReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            while (iterator.hasNext()) {\n                accumulator = operation(accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <S, T : S> Sequence<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            var index = 1\n            while (iterator.hasNext()) {\n                accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharSequence.elementAt(index: Int): Char\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random character from this char sequence.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharSequence.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns a random character from this char sequence, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharSequence.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associate\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateBy\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateByWithValueTransform\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are characters from the given char sequence and values are\n * produced by the [valueSelector] function applied to each character.\n * \n * If any two characters are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(length).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,\n * where key is the character itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two characters are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.text.Strings.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length)))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.text.Strings.map\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each character of the original char sequence\n * into an [IndexedValue] containing the index of that character and the character itself.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the desired action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\npublic fun CharSequence.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\npublic fun CharSequence.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character. Returns null if the char sequence is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value. Returns null if the char sequence is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <R> CharSequence.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <R> CharSequence.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharSequence.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n    val result = ArrayList<R>(resultCapacity)\n    var index = 0\n    while (index in 0 until thisSize) {\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index ->\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > length) length else end\n        transform(subSequence(index, coercedEnd))\n    }\n}\n\n/**\n * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zip\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index\n * using the provided [transform] function applied to each pair of characters.\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zipWithTransform\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"UArraysKt\")\n@file:kotlin.jvm.JvmPackageName(\"kotlin.collections.unsigned\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component1(): UInt {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component1(): ULong {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component1(): UByte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component1(): UShort {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component2(): UInt {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component2(): ULong {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component2(): UByte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component2(): UShort {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component3(): UInt {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component3(): ULong {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component3(): UByte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component3(): UShort {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component4(): UInt {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component4(): ULong {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component4(): UByte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component4(): UShort {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.component5(): UInt {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.component5(): ULong {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.component5(): UByte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.component5(): UShort {\n    return get(4)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UIntArray.elementAt(index: Int): UInt\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun ULongArray.elementAt(index: Int): ULong\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UByteArray.elementAt(index: Int): UByte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UShortArray.elementAt(index: Int): UShort\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UInt): UInt {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> ULong): ULong {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UByte): UByte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> UShort): UShort {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.elementAtOrNull(index: Int): UInt? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.elementAtOrNull(index: Int): ULong? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.elementAtOrNull(index: Int): UByte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.elementAtOrNull(index: Int): UShort? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.find(predicate: (UInt) -> Boolean): UInt? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.find(predicate: (ULong) -> Boolean): ULong? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.find(predicate: (UByte) -> Boolean): UByte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.find(predicate: (UShort) -> Boolean): UShort? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.findLast(predicate: (UInt) -> Boolean): UInt? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.findLast(predicate: (ULong) -> Boolean): ULong? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.findLast(predicate: (UByte) -> Boolean): UByte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.findLast(predicate: (UShort) -> Boolean): UShort? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.first(): UInt {\n    return storage.first().toUInt()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.first(): ULong {\n    return storage.first().toULong()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.first(): UByte {\n    return storage.first().toUByte()\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.first(): UShort {\n    return storage.first().toUShort()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.first(predicate: (UInt) -> Boolean): UInt {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.first(predicate: (ULong) -> Boolean): ULong {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.first(predicate: (UByte) -> Boolean): UByte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.first(predicate: (UShort) -> Boolean): UShort {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.firstOrNull(): UInt? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.firstOrNull(): ULong? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.firstOrNull(): UByte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.firstOrNull(): UShort? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.firstOrNull(predicate: (UInt) -> Boolean): UInt? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.firstOrNull(predicate: (ULong) -> Boolean): ULong? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.firstOrNull(predicate: (UByte) -> Boolean): UByte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.firstOrNull(predicate: (UShort) -> Boolean): UShort? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.getOrElse(index: Int, defaultValue: (Int) -> UInt): UInt {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.getOrElse(index: Int, defaultValue: (Int) -> ULong): ULong {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.getOrElse(index: Int, defaultValue: (Int) -> UByte): UByte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.getOrElse(index: Int, defaultValue: (Int) -> UShort): UShort {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.getOrNull(index: Int): UInt? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.getOrNull(index: Int): ULong? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.getOrNull(index: Int): UByte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.getOrNull(index: Int): UShort? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOf(element: UInt): Int {\n    return storage.indexOf(element.toInt())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOf(element: ULong): Int {\n    return storage.indexOf(element.toLong())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOf(element: UByte): Int {\n    return storage.indexOf(element.toByte())\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOf(element: UShort): Int {\n    return storage.indexOf(element.toShort())\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOfFirst(predicate: (UInt) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUInt()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOfFirst(predicate: (ULong) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toULong()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOfFirst(predicate: (UByte) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUByte()) }\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOfFirst(predicate: (UShort) -> Boolean): Int {\n    return storage.indexOfFirst { predicate(it.toUShort()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.indexOfLast(predicate: (UInt) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUInt()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.indexOfLast(predicate: (ULong) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toULong()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.indexOfLast(predicate: (UByte) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUByte()) }\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.indexOfLast(predicate: (UShort) -> Boolean): Int {\n    return storage.indexOfLast { predicate(it.toUShort()) }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.last(): UInt {\n    return storage.last().toUInt()\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.last(): ULong {\n    return storage.last().toULong()\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.last(): UByte {\n    return storage.last().toUByte()\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.last(): UShort {\n    return storage.last().toUShort()\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.last(predicate: (UInt) -> Boolean): UInt {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.last(predicate: (ULong) -> Boolean): ULong {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.last(predicate: (UByte) -> Boolean): UByte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.last(predicate: (UShort) -> Boolean): UShort {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.lastIndexOf(element: UInt): Int {\n    return storage.lastIndexOf(element.toInt())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.lastIndexOf(element: ULong): Int {\n    return storage.lastIndexOf(element.toLong())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.lastIndexOf(element: UByte): Int {\n    return storage.lastIndexOf(element.toByte())\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.lastIndexOf(element: UShort): Int {\n    return storage.lastIndexOf(element.toShort())\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.lastOrNull(): UInt? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.lastOrNull(): ULong? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.lastOrNull(): UByte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.lastOrNull(): UShort? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.lastOrNull(predicate: (UInt) -> Boolean): UInt? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.lastOrNull(predicate: (ULong) -> Boolean): ULong? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.lastOrNull(predicate: (UByte) -> Boolean): UByte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.lastOrNull(predicate: (UShort) -> Boolean): UShort? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.random(): UInt {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.random(): ULong {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.random(): UByte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.random(): UShort {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.random(random: Random): UInt {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.random(random: Random): ULong {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.random(random: Random): UByte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.random(random: Random): UShort {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.randomOrNull(): UInt? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.randomOrNull(): ULong? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.randomOrNull(): UByte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.randomOrNull(): UShort? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\npublic fun UIntArray.randomOrNull(random: Random): UInt? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\npublic fun ULongArray.randomOrNull(random: Random): ULong? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\npublic fun UByteArray.randomOrNull(random: Random): UByte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\npublic fun UShortArray.randomOrNull(random: Random): UShort? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.single(): UInt {\n    return storage.single().toUInt()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.single(): ULong {\n    return storage.single().toULong()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.single(): UByte {\n    return storage.single().toUByte()\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.single(): UShort {\n    return storage.single().toUShort()\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.single(predicate: (UInt) -> Boolean): UInt {\n    var single: UInt? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UInt\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.single(predicate: (ULong) -> Boolean): ULong {\n    var single: ULong? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as ULong\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.single(predicate: (UByte) -> Boolean): UByte {\n    var single: UByte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UByte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.single(predicate: (UShort) -> Boolean): UShort {\n    var single: UShort? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as UShort\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.singleOrNull(): UInt? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.singleOrNull(): ULong? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.singleOrNull(): UByte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.singleOrNull(): UShort? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.singleOrNull(predicate: (UInt) -> Boolean): UInt? {\n    var single: UInt? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.singleOrNull(predicate: (ULong) -> Boolean): ULong? {\n    var single: ULong? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.singleOrNull(predicate: (UByte) -> Boolean): UByte? {\n    var single: UByte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.singleOrNull(predicate: (UShort) -> Boolean): UShort? {\n    var single: UShort? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.drop(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.drop(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.drop(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.drop(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.dropLast(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.dropLast(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.dropLast(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.dropLast(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.dropLastWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.dropLastWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.dropLastWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.dropLastWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.dropWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    var yielding = false\n    val list = ArrayList<UInt>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.dropWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    var yielding = false\n    val list = ArrayList<ULong>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.dropWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    var yielding = false\n    val list = ArrayList<UByte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.dropWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    var yielding = false\n    val list = ArrayList<UShort>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filter(predicate: (UInt) -> Boolean): List<UInt> {\n    return filterTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filter(predicate: (ULong) -> Boolean): List<ULong> {\n    return filterTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filter(predicate: (UByte) -> Boolean): List<UByte> {\n    return filterTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filter(predicate: (UShort) -> Boolean): List<UShort> {\n    return filterTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filterIndexed(predicate: (index: Int, UInt) -> Boolean): List<UInt> {\n    return filterIndexedTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filterIndexed(predicate: (index: Int, ULong) -> Boolean): List<ULong> {\n    return filterIndexedTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filterIndexed(predicate: (index: Int, UByte) -> Boolean): List<UByte> {\n    return filterIndexedTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filterIndexed(predicate: (index: Int, UShort) -> Boolean): List<UShort> {\n    return filterIndexedTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterIndexedTo(destination: C, predicate: (index: Int, UInt) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterIndexedTo(destination: C, predicate: (index: Int, ULong) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterIndexedTo(destination: C, predicate: (index: Int, UByte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterIndexedTo(destination: C, predicate: (index: Int, UShort) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.filterNot(predicate: (UInt) -> Boolean): List<UInt> {\n    return filterNotTo(ArrayList<UInt>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.filterNot(predicate: (ULong) -> Boolean): List<ULong> {\n    return filterNotTo(ArrayList<ULong>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.filterNot(predicate: (UByte) -> Boolean): List<UByte> {\n    return filterNotTo(ArrayList<UByte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.filterNot(predicate: (UShort) -> Boolean): List<UShort> {\n    return filterNotTo(ArrayList<UShort>(), predicate)\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterNotTo(destination: C, predicate: (UInt) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterNotTo(destination: C, predicate: (ULong) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterNotTo(destination: C, predicate: (UByte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterNotTo(destination: C, predicate: (UShort) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UInt>> UIntArray.filterTo(destination: C, predicate: (UInt) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in ULong>> ULongArray.filterTo(destination: C, predicate: (ULong) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UByte>> UByteArray.filterTo(destination: C, predicate: (UByte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <C : MutableCollection<in UShort>> UShortArray.filterTo(destination: C, predicate: (UShort) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.slice(indices: IntRange): List<UInt> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.slice(indices: IntRange): List<ULong> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.slice(indices: IntRange): List<UByte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.slice(indices: IntRange): List<UShort> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.slice(indices: Iterable<Int>): List<UInt> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UInt>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.slice(indices: Iterable<Int>): List<ULong> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<ULong>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.slice(indices: Iterable<Int>): List<UByte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UByte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.slice(indices: Iterable<Int>): List<UShort> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<UShort>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sliceArray(indices: Collection<Int>): UIntArray {\n    return UIntArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sliceArray(indices: Collection<Int>): ULongArray {\n    return ULongArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sliceArray(indices: Collection<Int>): UByteArray {\n    return UByteArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sliceArray(indices: Collection<Int>): UShortArray {\n    return UShortArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sliceArray(indices: IntRange): UIntArray {\n    return UIntArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sliceArray(indices: IntRange): ULongArray {\n    return ULongArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sliceArray(indices: IntRange): UByteArray {\n    return UByteArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sliceArray(indices: IntRange): UShortArray {\n    return UShortArray(storage.sliceArray(indices))\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.take(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UInt>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.take(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<ULong>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.take(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UByte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.take(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<UShort>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.takeLast(n: Int): List<UInt> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UInt>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.takeLast(n: Int): List<ULong> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<ULong>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.takeLast(n: Int): List<UByte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UByte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.takeLast(n: Int): List<UShort> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<UShort>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.takeLastWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.takeLastWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.takeLastWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.takeLastWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.takeWhile(predicate: (UInt) -> Boolean): List<UInt> {\n    val list = ArrayList<UInt>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.takeWhile(predicate: (ULong) -> Boolean): List<ULong> {\n    val list = ArrayList<ULong>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.takeWhile(predicate: (UByte) -> Boolean): List<UByte> {\n    val list = ArrayList<UByte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.takeWhile(predicate: (UShort) -> Boolean): List<UShort> {\n    val list = ArrayList<UShort>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Reverses elements in the array in-place.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reverse(): Unit {\n    storage.reverse()\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.reversed(): List<UInt> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.reversed(): List<ULong> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.reversed(): List<UByte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.reversed(): List<UShort> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reversedArray(): UIntArray {\n    return UIntArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reversedArray(): ULongArray {\n    return ULongArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reversedArray(): UByteArray {\n    return UByteArray(storage.reversedArray())\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reversedArray(): UShortArray {\n    return UShortArray(storage.reversedArray())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sorted(): List<UInt> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sorted(): List<ULong> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sorted(): List<UByte> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sorted(): List<UShort> {\n    return copyOf().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedArray(): UIntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedArray(): ULongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedArray(): UByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedArray(): UShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedArrayDescending(): UIntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedArrayDescending(): ULongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedArrayDescending(): UByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedArrayDescending(): UShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sortedDescending(): List<UInt> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sortedDescending(): List<ULong> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sortedDescending(): List<UByte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sortedDescending(): List<UShort> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns an array of type [ByteArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.asByteArray(): ByteArray {\n    return storage\n}\n\n/**\n * Returns an array of type [IntArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.asIntArray(): IntArray {\n    return storage\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UIntArray.asList(): List<UInt>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun ULongArray.asList(): List<ULong>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UByteArray.asList(): List<UByte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic expect fun UShortArray.asList(): List<UShort>\n\n/**\n * Returns an array of type [LongArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.asLongArray(): LongArray {\n    return storage\n}\n\n/**\n * Returns an array of type [ShortArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.asShortArray(): ShortArray {\n    return storage\n}\n\n/**\n * Returns an array of type [UByteArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.asUByteArray(): UByteArray {\n    return UByteArray(this)\n}\n\n/**\n * Returns an array of type [UIntArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.asUIntArray(): UIntArray {\n    return UIntArray(this)\n}\n\n/**\n * Returns an array of type [ULongArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.asULongArray(): ULongArray {\n    return ULongArray(this)\n}\n\n/**\n * Returns an array of type [UShortArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.asUShortArray(): UShortArray {\n    return UShortArray(this)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray.contentEquals(other: UIntArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray.contentEquals(other: ULongArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray.contentEquals(other: UByteArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray.contentEquals(other: UShortArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyInto(destination: UIntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UIntArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyInto(destination: ULongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ULongArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyInto(destination: UByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UByteArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyInto(destination: UShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UShortArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOf(): UIntArray {\n    return UIntArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOf(): ULongArray {\n    return ULongArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOf(): UByteArray {\n    return UByteArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOf(): UShortArray {\n    return UShortArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOf(newSize: Int): UIntArray {\n    return UIntArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOf(newSize: Int): ULongArray {\n    return ULongArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOf(newSize: Int): UByteArray {\n    return UByteArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOf(newSize: Int): UShortArray {\n    return UShortArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOfRange(fromIndex: Int, toIndex: Int): UIntArray {\n    return UIntArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOfRange(fromIndex: Int, toIndex: Int): ULongArray {\n    return ULongArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOfRange(fromIndex: Int, toIndex: Int): UByteArray {\n    return UByteArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOfRange(fromIndex: Int, toIndex: Int): UShortArray {\n    return UShortArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.fill(element: UInt, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toInt(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.fill(element: ULong, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toLong(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.fill(element: UByte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toByte(), fromIndex, toIndex)\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.fill(element: UShort, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    storage.fill(element.toShort(), fromIndex, toIndex)\n}\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UIntArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val ULongArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UByteArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the range of valid indices for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UShortArray.indices: IntRange\n    get() = storage.indices\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UIntArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val ULongArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UByteArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns the last valid index for the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline val UShortArray.lastIndex: Int\n    get() = storage.lastIndex\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.plus(element: UInt): UIntArray {\n    return UIntArray(storage + element.toInt())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.plus(element: ULong): ULongArray {\n    return ULongArray(storage + element.toLong())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.plus(element: UByte): UByteArray {\n    return UByteArray(storage + element.toByte())\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.plus(element: UShort): UShortArray {\n    return UShortArray(storage + element.toShort())\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UIntArray.plus(elements: Collection<UInt>): UIntArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toInt()\n    return UIntArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun ULongArray.plus(elements: Collection<ULong>): ULongArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toLong()\n    return ULongArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UByteArray.plus(elements: Collection<UByte>): UByteArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toByte()\n    return UByteArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic operator fun UShortArray.plus(elements: Collection<UShort>): UShortArray {\n    var index = size\n    val result = storage.copyOf(size + elements.size)\n    for (element in elements) result[index++] = element.toShort()\n    return UShortArray(result)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UIntArray.plus(elements: UIntArray): UIntArray {\n    return UIntArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun ULongArray.plus(elements: ULongArray): ULongArray {\n    return ULongArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UByteArray.plus(elements: UByteArray): UByteArray {\n    return UByteArray(storage + elements.storage)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline operator fun UShortArray.plus(elements: UShortArray): UShortArray {\n    return UShortArray(storage + elements.storage)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Returns an array of type [ByteArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.toByteArray(): ByteArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [IntArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.toIntArray(): IntArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [LongArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.toLongArray(): LongArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [ShortArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.toShortArray(): ShortArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.toTypedArray(): Array<UInt> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.toTypedArray(): Array<ULong> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.toTypedArray(): Array<UByte> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.toTypedArray(): Array<UShort> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of UByte containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UByte>.toUByteArray(): UByteArray {\n    return UByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UByteArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.toUByteArray(): UByteArray {\n    return UByteArray(this.copyOf())\n}\n\n/**\n * Returns an array of UInt containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UInt>.toUIntArray(): UIntArray {\n    return UIntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UIntArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.toUIntArray(): UIntArray {\n    return UIntArray(this.copyOf())\n}\n\n/**\n * Returns an array of ULong containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out ULong>.toULongArray(): ULongArray {\n    return ULongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [ULongArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.toULongArray(): ULongArray {\n    return ULongArray(this.copyOf())\n}\n\n/**\n * Returns an array of UShort containing all of the elements of this generic array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UShort>.toUShortArray(): UShortArray {\n    return UShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UShortArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.toUShortArray(): UShortArray {\n    return UShortArray(this.copyOf())\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.flatMap(transform: (UInt) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.flatMap(transform: (ULong) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.flatMap(transform: (UByte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.flatMap(transform: (UShort) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.flatMapTo(destination: C, transform: (UInt) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.flatMapTo(destination: C, transform: (ULong) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.flatMapTo(destination: C, transform: (UByte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.flatMapTo(destination: C, transform: (UShort) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UIntArray.groupBy(keySelector: (UInt) -> K): Map<K, List<UInt>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UInt>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> ULongArray.groupBy(keySelector: (ULong) -> K): Map<K, List<ULong>> {\n    return groupByTo(LinkedHashMap<K, MutableList<ULong>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UByteArray.groupBy(keySelector: (UByte) -> K): Map<K, List<UByte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UByte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K> UShortArray.groupBy(keySelector: (UShort) -> K): Map<K, List<UShort>> {\n    return groupByTo(LinkedHashMap<K, MutableList<UShort>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UIntArray.groupBy(keySelector: (UInt) -> K, valueTransform: (UInt) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> ULongArray.groupBy(keySelector: (ULong) -> K, valueTransform: (ULong) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UByteArray.groupBy(keySelector: (UByte) -> K, valueTransform: (UByte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> UShortArray.groupBy(keySelector: (UShort) -> K, valueTransform: (UShort) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UInt>>> UIntArray.groupByTo(destination: M, keySelector: (UInt) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UInt>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<ULong>>> ULongArray.groupByTo(destination: M, keySelector: (ULong) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<ULong>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UByte>>> UByteArray.groupByTo(destination: M, keySelector: (UByte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UByte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, M : MutableMap<in K, MutableList<UShort>>> UShortArray.groupByTo(destination: M, keySelector: (UShort) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<UShort>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UIntArray.groupByTo(destination: M, keySelector: (UInt) -> K, valueTransform: (UInt) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ULongArray.groupByTo(destination: M, keySelector: (ULong) -> K, valueTransform: (ULong) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UByteArray.groupByTo(destination: M, keySelector: (UByte) -> K, valueTransform: (UByte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> UShortArray.groupByTo(destination: M, keySelector: (UShort) -> K, valueTransform: (UShort) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.map(transform: (UInt) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.map(transform: (ULong) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.map(transform: (UByte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.map(transform: (UShort) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.mapIndexed(transform: (index: Int, UInt) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.mapIndexed(transform: (index: Int, ULong) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.mapIndexed(transform: (index: Int, UByte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.mapIndexed(transform: (index: Int, UShort) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.mapIndexedTo(destination: C, transform: (index: Int, UInt) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.mapIndexedTo(destination: C, transform: (index: Int, ULong) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.mapIndexedTo(destination: C, transform: (index: Int, UByte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.mapIndexedTo(destination: C, transform: (index: Int, UShort) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UIntArray.mapTo(destination: C, transform: (UInt) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ULongArray.mapTo(destination: C, transform: (ULong) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UByteArray.mapTo(destination: C, transform: (UByte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> UShortArray.mapTo(destination: C, transform: (UShort) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.withIndex(): Iterable<IndexedValue<UInt>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.withIndex(): Iterable<IndexedValue<ULong>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.withIndex(): Iterable<IndexedValue<UByte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.withIndex(): Iterable<IndexedValue<UShort>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.all(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.all(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.all(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.all(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.any(): Boolean {\n    return storage.any()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.any(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.any(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.any(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.any(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.count(predicate: (UInt) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.count(predicate: (ULong) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.count(predicate: (UByte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.count(predicate: (UShort) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.fold(initial: R, operation: (acc: R, UInt) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.fold(initial: R, operation: (acc: R, ULong) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.fold(initial: R, operation: (acc: R, UByte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.fold(initial: R, operation: (acc: R, UShort) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UInt) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, ULong) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UByte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, UShort) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldRight(initial: R, operation: (UInt, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldRight(initial: R, operation: (ULong, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldRight(initial: R, operation: (UByte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldRight(initial: R, operation: (UShort, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.foldRightIndexed(initial: R, operation: (index: Int, UInt, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.foldRightIndexed(initial: R, operation: (index: Int, ULong, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.foldRightIndexed(initial: R, operation: (index: Int, UByte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.foldRightIndexed(initial: R, operation: (index: Int, UShort, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.forEach(action: (UInt) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.forEach(action: (ULong) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.forEach(action: (UByte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.forEach(action: (UShort) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.forEachIndexed(action: (index: Int, UInt) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.forEachIndexed(action: (index: Int, ULong) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.forEachIndexed(action: (index: Int, UByte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.forEachIndexed(action: (index: Int, UShort) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.max(): UInt? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.max(): ULong? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.max(): UByte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.max(): UShort? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.maxBy(selector: (UInt) -> R): UInt? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.maxBy(selector: (ULong) -> R): ULong? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.maxBy(selector: (UByte) -> R): UByte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.maxBy(selector: (UShort) -> R): UShort? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.maxWith(comparator: Comparator<in UInt>): UInt? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.maxWith(comparator: Comparator<in ULong>): ULong? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.maxWith(comparator: Comparator<in UByte>): UByte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.maxWith(comparator: Comparator<in UShort>): UShort? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.min(): UInt? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.min(): ULong? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.min(): UByte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.min(): UShort? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UIntArray.minBy(selector: (UInt) -> R): UInt? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ULongArray.minBy(selector: (ULong) -> R): ULong? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UByteArray.minBy(selector: (UByte) -> R): UByte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> UShortArray.minBy(selector: (UShort) -> R): UShort? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.minWith(comparator: Comparator<in UInt>): UInt? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.minWith(comparator: Comparator<in ULong>): ULong? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.minWith(comparator: Comparator<in UByte>): UByte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.minWith(comparator: Comparator<in UShort>): UShort? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.none(predicate: (UInt) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.none(predicate: (ULong) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.none(predicate: (UByte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.none(predicate: (UShort) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduce(operation: (acc: UInt, UInt) -> UInt): UInt {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduce(operation: (acc: ULong, ULong) -> ULong): ULong {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduce(operation: (acc: UByte, UByte) -> UByte): UByte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduce(operation: (acc: UShort, UShort) -> UShort): UShort {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceIndexed(operation: (index: Int, acc: UInt, UInt) -> UInt): UInt {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceIndexed(operation: (index: Int, acc: ULong, ULong) -> ULong): ULong {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceIndexed(operation: (index: Int, acc: UByte, UByte) -> UByte): UByte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceIndexed(operation: (index: Int, acc: UShort, UShort) -> UShort): UShort {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceOrNull(operation: (acc: UInt, UInt) -> UInt): UInt? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceOrNull(operation: (acc: ULong, ULong) -> ULong): ULong? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceOrNull(operation: (acc: UByte, UByte) -> UByte): UByte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceOrNull(operation: (acc: UShort, UShort) -> UShort): UShort? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRight(operation: (UInt, acc: UInt) -> UInt): UInt {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRight(operation: (ULong, acc: ULong) -> ULong): ULong {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRight(operation: (UByte, acc: UByte) -> UByte): UByte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRight(operation: (UShort, acc: UShort) -> UShort): UShort {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRightIndexed(operation: (index: Int, UInt, acc: UInt) -> UInt): UInt {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRightIndexed(operation: (index: Int, ULong, acc: ULong) -> ULong): ULong {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRightIndexed(operation: (index: Int, UByte, acc: UByte) -> UByte): UByte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRightIndexed(operation: (index: Int, UShort, acc: UShort) -> UShort): UShort {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.reduceRightOrNull(operation: (UInt, acc: UInt) -> UInt): UInt? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.reduceRightOrNull(operation: (ULong, acc: ULong) -> ULong): ULong? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.reduceRightOrNull(operation: (UByte, acc: UByte) -> UByte): UByte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.reduceRightOrNull(operation: (UShort, acc: UShort) -> UShort): UShort? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.scan(initial: R, operation: (acc: R, UInt) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.scan(initial: R, operation: (acc: R, ULong) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.scan(initial: R, operation: (acc: R, UByte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.scan(initial: R, operation: (acc: R, UShort) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UIntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UInt) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> ULongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, ULong) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UByte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R> UShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, UShort) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.scanReduce(operation: (acc: UInt, UInt) -> UInt): List<UInt> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UInt>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.scanReduce(operation: (acc: ULong, ULong) -> ULong): List<ULong> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<ULong>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.scanReduce(operation: (acc: UByte, UByte) -> UByte): List<UByte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UByte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.scanReduce(operation: (acc: UShort, UShort) -> UShort): List<UShort> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UShort>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.scanReduceIndexed(operation: (index: Int, acc: UInt, UInt) -> UInt): List<UInt> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UInt>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.scanReduceIndexed(operation: (index: Int, acc: ULong, ULong) -> ULong): List<ULong> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<ULong>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.scanReduceIndexed(operation: (index: Int, acc: UByte, UByte) -> UByte): List<UByte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UByte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.scanReduceIndexed(operation: (index: Int, acc: UShort, UShort) -> UShort): List<UShort> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<UShort>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumBy(selector: (UInt) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumBy(selector: (ULong) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumBy(selector: (UByte) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumBy(selector: (UShort) -> UInt): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sumByDouble(selector: (UInt) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sumByDouble(selector: (ULong) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sumByDouble(selector: (UByte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sumByDouble(selector: (UShort) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UIntArray.zip(other: Array<out R>): List<Pair<UInt, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> ULongArray.zip(other: Array<out R>): List<Pair<ULong, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UByteArray.zip(other: Array<out R>): List<Pair<UByte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UShortArray.zip(other: Array<out R>): List<Pair<UShort, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UIntArray.zip(other: Array<out R>, transform: (a: UInt, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> ULongArray.zip(other: Array<out R>, transform: (a: ULong, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UByteArray.zip(other: Array<out R>, transform: (a: UByte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UShortArray.zip(other: Array<out R>, transform: (a: UShort, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UIntArray.zip(other: Iterable<R>): List<Pair<UInt, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> ULongArray.zip(other: Iterable<R>): List<Pair<ULong, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UByteArray.zip(other: Iterable<R>): List<Pair<UByte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun <R> UShortArray.zip(other: Iterable<R>): List<Pair<UShort, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UIntArray.zip(other: Iterable<R>, transform: (a: UInt, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> ULongArray.zip(other: Iterable<R>, transform: (a: ULong, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UByteArray.zip(other: Iterable<R>, transform: (a: UByte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <R, V> UShortArray.zip(other: Iterable<R>, transform: (a: UShort, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray.zip(other: UIntArray): List<Pair<UInt, UInt>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray.zip(other: ULongArray): List<Pair<ULong, ULong>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray.zip(other: UByteArray): List<Pair<UByte, UByte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray.zip(other: UShortArray): List<Pair<UShort, UShort>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UIntArray.zip(other: UIntArray, transform: (a: UInt, b: UInt) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> ULongArray.zip(other: ULongArray, transform: (a: ULong, b: ULong) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UByteArray.zip(other: UByteArray, transform: (a: UByte, b: UByte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <V> UShortArray.zip(other: UShortArray, transform: (a: UShort, b: UShort) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UInt>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out ULong>.sum(): ULong {\n    var sum: ULong = 0uL\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUByte\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UByte>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfUShort\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun Array<out UShort>.sum(): UInt {\n    var sum: UInt = 0u\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.sum(): UInt {\n    return storage.sum().toUInt()\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.sum(): ULong {\n    return storage.sum().toULong()\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.sum(): UInt {\n    return sumBy { it.toUInt() }\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.sum(): UInt {\n    return sumBy { it.toUInt() }\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.collections\n\n/** An iterator over a sequence of values of type `Byte`. */\npublic abstract class ByteIterator : Iterator<Byte> {\n    override final fun next() = nextByte()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextByte(): Byte\n}\n\n/** An iterator over a sequence of values of type `Char`. */\npublic abstract class CharIterator : Iterator<Char> {\n    override final fun next() = nextChar()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextChar(): Char\n}\n\n/** An iterator over a sequence of values of type `Short`. */\npublic abstract class ShortIterator : Iterator<Short> {\n    override final fun next() = nextShort()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextShort(): Short\n}\n\n/** An iterator over a sequence of values of type `Int`. */\npublic abstract class IntIterator : Iterator<Int> {\n    override final fun next() = nextInt()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextInt(): Int\n}\n\n/** An iterator over a sequence of values of type `Long`. */\npublic abstract class LongIterator : Iterator<Long> {\n    override final fun next() = nextLong()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextLong(): Long\n}\n\n/** An iterator over a sequence of values of type `Float`. */\npublic abstract class FloatIterator : Iterator<Float> {\n    override final fun next() = nextFloat()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextFloat(): Float\n}\n\n/** An iterator over a sequence of values of type `Double`. */\npublic abstract class DoubleIterator : Iterator<Double> {\n    override final fun next() = nextDouble()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextDouble(): Double\n}\n\n/** An iterator over a sequence of values of type `Boolean`. */\npublic abstract class BooleanIterator : Iterator<Boolean> {\n    override final fun next() = nextBoolean()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextBoolean(): Boolean\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * An iterator over a progression of values of type `Char`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class CharProgressionIterator(first: Char, last: Char, val step: Int) : CharIterator() {\n    private val finalElement = last.toInt()\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first.toInt() else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextChar(): Char {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value.toChar()\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Int`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class IntProgressionIterator(first: Int, last: Int, val step: Int) : IntIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextInt(): Int {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Long`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class LongProgressionIterator(first: Long, last: Long, val step: Long) : LongIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextLong(): Long {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\nimport kotlin.internal.getProgressionLastElement\n\n/**\n * A progression of values of type `Char`.\n */\npublic open class CharProgression\n    internal constructor\n    (\n            start: Char,\n            endInclusive: Char,\n            step: Int\n    ) : Iterable<Char> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Char = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Char = getProgressionLastElement(start.toInt(), endInclusive.toInt(), step).toChar()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): CharIterator = CharProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first.toInt() + last.toInt()) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates CharProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Char, rangeEnd: Char, step: Int): CharProgression = CharProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Int`.\n */\npublic open class IntProgression\n    internal constructor\n    (\n            start: Int,\n            endInclusive: Int,\n            step: Int\n    ) : Iterable<Int> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Int = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Int = getProgressionLastElement(start.toInt(), endInclusive.toInt(), step).toInt()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): IntIterator = IntProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first + last) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates IntProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Int, rangeEnd: Int, step: Int): IntProgression = IntProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Long`.\n */\npublic open class LongProgression\n    internal constructor\n    (\n            start: Long,\n            endInclusive: Long,\n            step: Long\n    ) : Iterable<Long> {\n    init {\n        if (step == 0L) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Long.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Long = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Long = getProgressionLastElement(start.toLong(), endInclusive.toLong(), step).toLong()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Long = step\n\n    override fun iterator(): LongIterator = LongProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))) + (step xor (step ushr 32))).toInt()\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates LongProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Long.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Long, rangeEnd: Long, step: Long): LongProgression = LongProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n","/*\n * Copyright 2010-2015 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.collections\n\nimport kotlin.internal.PlatformDependent\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over.\n * @param T the type of element being iterated over. The iterator is covariant on its element type.\n */\npublic interface Iterable<out T> {\n    /**\n     * Returns an iterator over the elements of this object.\n     */\n    public operator fun iterator(): Iterator<T>\n}\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over and that supports removing elements during iteration.\n * @param T the type of element being iterated over. The mutable iterator is invariant on its element type.\n */\npublic interface MutableIterable<out T> : Iterable<T> {\n    /**\n     * Returns an iterator over the elements of this sequence that supports removing elements during iteration.\n     */\n    override fun iterator(): MutableIterator<T>\n}\n\n/**\n * A generic collection of elements. Methods in this interface support only read-only access to the collection;\n * read/write access is supported through the [MutableCollection] interface.\n * @param E the type of elements contained in the collection. The collection is covariant on its element type.\n */\npublic interface Collection<out E> : Iterable<E> {\n    // Query Operations\n    /**\n     * Returns the size of the collection.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the collection is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Checks if the specified element is contained in this collection.\n     */\n    public operator fun contains(element: @UnsafeVariance E): Boolean\n\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    /**\n     * Checks if all elements in the specified collection are contained in this collection.\n     */\n    public fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic collection of elements that supports adding and removing elements.\n *\n * @param E the type of elements contained in the collection. The mutable collection is invariant on its element type.\n */\npublic interface MutableCollection<E> : Collection<E>, MutableIterable<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n    /**\n     * Adds the specified element to the collection.\n     *\n     * @return `true` if the element has been added, `false` if the collection does not support duplicates\n     * and the element is already contained in the collection.\n     */\n    public fun add(element: E): Boolean\n\n    /**\n     * Removes a single instance of the specified element from this\n     * collection, if it is present.\n     *\n     * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n     */\n    public fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to this collection.\n     *\n     * @return `true` if any of the specified elements was added to the collection, `false` if the collection was not modified.\n     */\n    public fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all of this collection's elements that are also contained in the specified collection.\n     *\n     * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun removeAll(elements: Collection<E>): Boolean\n\n    /**\n     * Retains only the elements in this collection that are contained in the specified collection.\n     *\n     * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun retainAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all elements from this collection.\n     */\n    public fun clear(): Unit\n}\n\n/**\n * A generic ordered collection of elements. Methods in this interface support only read-only access to the list;\n * read/write access is supported through the [MutableList] interface.\n * @param E the type of elements contained in the list. The list is covariant on its element type.\n */\npublic interface List<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n\n    // Positional Access Operations\n    /**\n     * Returns the element at the specified index in the list.\n     */\n    public operator fun get(index: Int): E\n\n    // Search Operations\n    /**\n     * Returns the index of the first occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun indexOf(element: @UnsafeVariance E): Int\n\n    /**\n     * Returns the index of the last occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun lastIndexOf(element: @UnsafeVariance E): Int\n\n    // List Iterators\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence).\n     */\n    public fun listIterator(): ListIterator<E>\n\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence), starting at the specified [index].\n     */\n    public fun listIterator(index: Int): ListIterator<E>\n\n    // View\n    /**\n     * Returns a view of the portion of this list between the specified [fromIndex] (inclusive) and [toIndex] (exclusive).\n     * The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa.\n     *\n     * Structural changes in the base list make the behavior of the view undefined.\n     */\n    public fun subList(fromIndex: Int, toIndex: Int): List<E>\n}\n\n/**\n * A generic ordered collection of elements that supports adding and removing elements.\n * @param E the type of elements contained in the list. The mutable list is invariant on its element type.\n */\npublic interface MutableList<E> : List<E>, MutableCollection<E> {\n    // Modification Operations\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to the end of this list.\n     *\n     * The elements are appended in the order they appear in the [elements] collection.\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    override fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Inserts all of the elements of the specified collection [elements] into this list at the specified [index].\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    public fun addAll(index: Int, elements: Collection<E>): Boolean\n\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n\n    // Positional Access Operations\n    /**\n     * Replaces the element at the specified position in this list with the specified element.\n     *\n     * @return the element previously at the specified position.\n     */\n    public operator fun set(index: Int, element: E): E\n\n    /**\n     * Inserts an element into the list at the specified [index].\n     */\n    public fun add(index: Int, element: E): Unit\n\n    /**\n     * Removes an element at the specified [index] from the list.\n     *\n     * @return the element that has been removed.\n     */\n    public fun removeAt(index: Int): E\n\n    // List Iterators\n    override fun listIterator(): MutableListIterator<E>\n\n    override fun listIterator(index: Int): MutableListIterator<E>\n\n    // View\n    override fun subList(fromIndex: Int, toIndex: Int): MutableList<E>\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements.\n * Methods in this interface support only read-only access to the set;\n * read/write access is supported through the [MutableSet] interface.\n * @param E the type of elements contained in the set. The set is covariant on its element type.\n */\npublic interface Set<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements, and supports\n * adding and removing elements.\n * @param E the type of elements contained in the set. The mutable set is invariant on its element type.\n */\npublic interface MutableSet<E> : Set<E>, MutableCollection<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n\n    /**\n     * Adds the specified element to the set.\n     *\n     * @return `true` if the element has been added, `false` if the element is already contained in the set.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n\n    override fun addAll(elements: Collection<E>): Boolean\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n}\n\n/**\n * A collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * Methods in this interface support only read-only access to the map; read-write access is supported through\n * the [MutableMap] interface.\n * @param K the type of map keys. The map is invariant on its key type, as it\n *          can accept key as a parameter (of [containsKey] for example) and return it in [keys] set.\n * @param V the type of map values. The map is covariant on its value type.\n */\npublic interface Map<K, out V> {\n    // Query Operations\n    /**\n     * Returns the number of key/value pairs in the map.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the map is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Returns `true` if the map contains the specified [key].\n     */\n    public fun containsKey(key: K): Boolean\n\n    /**\n     * Returns `true` if the map maps one or more keys to the specified [value].\n     */\n    public fun containsValue(value: @UnsafeVariance V): Boolean\n\n    /**\n     * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n     */\n    public operator fun get(key: K): V?\n\n    /**\n     * Returns the value corresponding to the given [key], or [defaultValue] if such a key is not present in the map.\n     *\n     * @since JDK 1.8\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun getOrDefault(key: K, defaultValue: @UnsafeVariance V): V {\n        // See default implementation in JDK sources\n        return null as V\n    }\n\n    // Views\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     */\n    public val keys: Set<K>\n\n    /**\n     * Returns a read-only [Collection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    public val values: Collection<V>\n\n    /**\n     * Returns a read-only [Set] of all key/value pairs in this map.\n     */\n    public val entries: Set<Map.Entry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [Map].\n     */\n    public interface Entry<out K, out V> {\n        /**\n         * Returns the key of this key/value pair.\n         */\n        public val key: K\n\n        /**\n         * Returns the value of this key/value pair.\n         */\n        public val value: V\n    }\n}\n\n/**\n * A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * @param K the type of map keys. The map is invariant on its key type.\n * @param V the type of map values. The mutable map is invariant on its value type.\n */\npublic interface MutableMap<K, V> : Map<K, V> {\n    // Modification Operations\n    /**\n     * Associates the specified [value] with the specified [key] in the map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun put(key: K, value: V): V?\n\n    /**\n     * Removes the specified key and its corresponding value from this map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun remove(key: K): V?\n\n    /**\n     * Removes the entry for the specified key only if it is mapped to the specified value.\n     *\n     * @return true if entry was removed\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun remove(key: K, value: V): Boolean {\n        // See default implementation in JDK sources\n        return true\n    }\n\n    // Bulk Modification Operations\n    /**\n     * Updates this map with key/value pairs from the specified map [from].\n     */\n    public fun putAll(from: Map<out K, V>): Unit\n\n    /**\n     * Removes all elements from this map.\n     */\n    public fun clear(): Unit\n\n    // Views\n    /**\n     * Returns a [MutableSet] of all keys in this map.\n     */\n    override val keys: MutableSet<K>\n\n    /**\n     * Returns a [MutableCollection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    override val values: MutableCollection<V>\n\n    /**\n     * Returns a [MutableSet] of all key/value pairs in this map.\n     */\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [MutableMap].\n     */\n    public interface MutableEntry<K, V> : Map.Entry<K, V> {\n        /**\n         * Changes the value associated with the key of this entry.\n         *\n         * @return the previous value corresponding to the key.\n         */\n        public fun setValue(newValue: V): V\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.ranges\n\n/**\n * Represents a range of values (for example, numbers or characters).\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/ranges.html) for more information.\n */\npublic interface ClosedRange<T: Comparable<T>> {\n    /**\n     * The minimum value in the range.\n     */\n    public val start: T\n\n    /**\n     * The maximum value in the range (inclusive).\n     */\n    public val endInclusive: T\n\n    /**\n     * Checks whether the specified [value] belongs to the range.\n     */\n    public operator fun contains(value: T): Boolean = value >= start && value <= endInclusive\n\n    /**\n     * Checks whether the range is empty.\n     */\n    public fun isEmpty(): Boolean = start > endInclusive\n}\n","/*\n * Copyright 2010-2015 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n/**\n * The type with only one value: the `Unit` object. This type corresponds to the `void` type in Java.\n */\npublic object Unit {\n    override fun toString() = \"kotlin.Unit\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.internal\n\n// a mod b (in arithmetical sense)\nprivate fun mod(a: Int, b: Int): Int {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\nprivate fun mod(a: Long, b: Long): Long {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\n// (a - b) mod c\nprivate fun differenceModulo(a: Int, b: Int, c: Int): Int {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\nprivate fun differenceModulo(a: Long, b: Long, c: Long): Long {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Int, end: Int, step: Int): Int = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Long, end: Long, step: Long): Long = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@JsName(\"arrayIterator\")\ninternal fun arrayIterator(array: dynamic, type: String?) = when (type) {\n    null -> {\n        val arr: Array<dynamic> = array\n        object : Iterator<dynamic> {\n            var index = 0\n            override fun hasNext() = index < arr.size\n            override fun next() = if (index < arr.size) arr[index++] else throw NoSuchElementException(\"$index\")\n        }\n    }\n    \"BooleanArray\" -> booleanArrayIterator(array)\n    \"ByteArray\" -> byteArrayIterator(array)\n    \"ShortArray\" -> shortArrayIterator(array)\n    \"CharArray\" -> charArrayIterator(array)\n    \"IntArray\" -> intArrayIterator(array)\n    \"LongArray\" -> longArrayIterator(array)\n    \"FloatArray\" -> floatArrayIterator(array)\n    \"DoubleArray\" -> doubleArrayIterator(array)\n    else -> throw IllegalStateException(\"Unsupported type argument for arrayIterator: $type\")\n}\n\n@JsName(\"booleanArrayIterator\")\ninternal fun booleanArrayIterator(array: BooleanArray) = object : BooleanIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextBoolean() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"byteArrayIterator\")\ninternal fun byteArrayIterator(array: ByteArray) = object : ByteIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextByte() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"shortArrayIterator\")\ninternal fun shortArrayIterator(array: ShortArray) = object : ShortIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextShort() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"charArrayIterator\")\ninternal fun charArrayIterator(array: CharArray) = object : CharIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextChar() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"intArrayIterator\")\ninternal fun intArrayIterator(array: IntArray) = object : IntIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextInt() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"floatArrayIterator\")\ninternal fun floatArrayIterator(array: FloatArray) = object : FloatIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextFloat() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"doubleArrayIterator\")\ninternal fun doubleArrayIterator(array: DoubleArray) = object : DoubleIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextDouble() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"longArrayIterator\")\ninternal fun longArrayIterator(array: LongArray) = object : LongIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextLong() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"PropertyMetadata\")\ninternal class PropertyMetadata(@JsName(\"callableName\") val name: String)\n\n@JsName(\"noWhenBranchMatched\")\ninternal fun noWhenBranchMatched(): Nothing = throw NoWhenBranchMatchedException()\n\n@JsName(\"subSequence\")\ninternal fun subSequence(c: CharSequence, startIndex: Int, endIndex: Int): CharSequence {\n    if (c is String) {\n        return c.substring(startIndex, endIndex)\n    } else {\n        return c.asDynamic().`subSequence_vux9f0$`(startIndex, endIndex)\n    }\n}\n\n@JsName(\"captureStack\")\ninternal fun captureStack(baseClass: JsClass<in Throwable>, instance: Throwable) {\n    if (js(\"Error\").captureStackTrace) {\n        js(\"Error\").captureStackTrace(instance, instance::class.js);\n    } else {\n        instance.asDynamic().stack = js(\"new Error()\").stack;\n    }\n}\n\n@JsName(\"newThrowable\")\ninternal fun newThrowable(message: String?, cause: Throwable?): Throwable {\n    val throwable = js(\"new Error()\")\n    throwable.message = if (jsTypeOf(message) == \"undefined\") {\n        if (cause != null) cause.toString() else null\n    } else {\n        message\n    }\n    throwable.cause = cause\n    throwable.name = \"Throwable\"\n    return throwable\n}\n\n@JsName(\"BoxedChar\")\ninternal class BoxedChar(val c: Int) : Comparable<Int> {\n    override fun equals(other: Any?): Boolean {\n        return other is BoxedChar && c == other.c\n    }\n\n    override fun hashCode(): Int {\n        return c\n    }\n\n    override fun toString(): String {\n        return js(\"this.c\").unsafeCast<Char>().toString()\n    }\n\n    override fun compareTo(other: Int): Int {\n        return js(\"this.c - other\").unsafeCast<Int>()\n    }\n\n    @JsName(\"valueOf\")\n    public fun valueOf(): Int {\n        return c\n    }\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun <T> concat(args: Array<T>): T {\n    val typed = js(\"Array\")(args.size)\n    for (i in args.indices) {\n        val arr = args[i]\n        if (arr !is Array<*>) {\n            typed[i] = js(\"[]\").slice.call(arr)\n        } else {\n            typed[i] = arr\n        }\n    }\n    return js(\"[]\").concat.apply(js(\"[]\"), typed);\n}\n\n/** Concat regular Array's and TypedArray's into an Array.\n */\n@PublishedApi\n@JsName(\"arrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> arrayConcat(a: T, b: T): T {\n    return concat(js(\"arguments\"))\n}\n\n/** Concat primitive arrays. Main use: prepare vararg arguments.\n *  For compatibility with 1.1.0 the arguments may be a mixture of Array's and TypedArray's.\n *\n *  If the first argument is TypedArray (Byte-, Short-, Char-, Int-, Float-, and DoubleArray) returns a TypedArray, otherwise an Array.\n *  If the first argument has the $type$ property (Boolean-, Char-, and LongArray) copy its value to result.$type$.\n *  If the first argument is a regular Array without the $type$ property default to arrayConcat.\n */\n@PublishedApi\n@JsName(\"primitiveArrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> primitiveArrayConcat(a: T, b: T): T {\n    val args: Array<T> = js(\"arguments\")\n    if (a is Array<*> && a.asDynamic().`$type$` === undefined) {\n        return concat(args)\n    } else {\n        var size = 0\n        for (i in args.indices) {\n            size += args[i].asDynamic().length as Int\n        }\n        val result = js(\"new a.constructor(size)\")\n        kotlin.copyArrayType(a, result)\n        size = 0\n        for (i in args.indices) {\n            val arr = args[i].asDynamic()\n            for (j in 0 until arr.length) {\n                result[size++] = arr[j]\n            }\n        }\n        return result\n    }\n}\n\n@JsName(\"booleanArrayOf\")\ninternal fun booleanArrayOf() = withType(\"BooleanArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"charArrayOf\") // The arguments have to be slice'd here because of Rhino (see KT-16974)\ninternal fun charArrayOf() = withType(\"CharArray\", js(\"new Uint16Array([].slice.call(arguments))\"))\n\n@JsName(\"longArrayOf\")\ninternal fun longArrayOf() = withType(\"LongArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"withType\")\n@kotlin.internal.InlineOnly\ninternal inline fun withType(type: String, array: dynamic): dynamic {\n    array.`$type$` = type\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@SinceKotlin(\"1.3\")\n@JsName(\"CoroutineImpl\")\ninternal abstract class CoroutineImpl(private val resultContinuation: Continuation<Any?>) : Continuation<Any?> {\n    protected var state = 0\n    protected var exceptionState = 0\n    protected var result: Any? = null\n    protected var exception: Throwable? = null\n    protected var finallyPath: Array<Int>? = null\n\n    public override val context: CoroutineContext = resultContinuation.context\n\n    private var intercepted_: Continuation<Any?>? = null\n\n    public fun intercepted(): Continuation<Any?> =\n        intercepted_\n            ?: (context[ContinuationInterceptor]?.interceptContinuation(this) ?: this)\n                .also { intercepted_ = it }\n\n    override fun resumeWith(result: Result<Any?>) {\n        var current = this\n        var currentResult: Any? = result.getOrNull()\n        var currentException: Throwable? = result.exceptionOrNull()\n\n        // This loop unrolls recursion in current.resumeWith(param) to make saner and shorter stack traces on resume\n        while (true) {\n            with(current) {\n                val completion = resultContinuation\n\n                // Set result and exception fields in the current continuation\n                if (currentException == null) {\n                    this.result = currentResult\n                } else {\n                    state = exceptionState\n                    exception = currentException\n                }\n\n                try {\n                    val outcome = doResume()\n                    if (outcome === COROUTINE_SUSPENDED) return\n                    currentResult = outcome\n                    currentException = null\n                } catch (exception: dynamic) { // Catch all exceptions\n                    currentResult = null\n                    currentException = exception.unsafeCast<Throwable>()\n                }\n\n                releaseIntercepted() // this state machine instance is terminating\n\n                if (completion is CoroutineImpl) {\n                    // unrolling recursion via loop\n                    current = completion\n                } else {\n                    // top-level completion reached -- invoke and return\n                    currentException?.let {\n                        completion.resumeWithException(it)\n                    } ?: completion.resume(currentResult)\n                    return\n                }\n            }\n        }\n    }\n\n    private fun releaseIntercepted() {\n        val intercepted = intercepted_\n        if (intercepted != null && intercepted !== this) {\n            context[ContinuationInterceptor]!!.releaseInterceptedContinuation(intercepted)\n        }\n        this.intercepted_ = CompletedContinuation // just in case\n    }\n\n    protected abstract fun doResume(): Any?\n}\n\ninternal object CompletedContinuation : Continuation<Any?> {\n    override val context: CoroutineContext\n        get() = error(\"This continuation is already complete\")\n\n    override fun resumeWith(result: Result<Any?>) {\n        error(\"This continuation is already complete\")\n    }\n\n    override fun toString(): String = \"This continuation is already complete\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\n\n/**\n * A discriminated union that encapsulates a successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\npublic inline class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents a successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents a failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is a shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated [Throwable] exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is a shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @InlineOnly\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [Throwable] [exception] as failure.\n         */\n        @InlineOnly\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated [Throwable] exception\n * if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onFailure] function.\n *\n * This function is a shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the result of [onSuccess] for the encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onSuccess] or by [onFailure] function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [map] for an alternative that rethrows exceptions from `transform` function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    val value = value // workaround for inline classes BE bug\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on the encapsulated [Throwable] exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on the encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T =\n    suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(\n    completion: Continuation<T>\n): Any? = this.asDynamic()(completion, false)\n\n/**\n * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, completion, false)\n\n\n/**\n * Creates unintercepted coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> (suspend () -> T).createCoroutineUnintercepted(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 2) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(completion)\n        }\n    }\n\n/**\n * Creates unintercepted coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 3) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(receiver, completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(receiver, completion)\n        }\n    }\n\n/**\n * Intercepts this continuation with [ContinuationInterceptor].\n *\n * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],\n * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],\n * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.\n *\n * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> Continuation<T>.intercepted(): Continuation<T> =\n    (this as? CoroutineImpl)?.intercepted() ?: this\n\n\nprivate inline fun <T> createCoroutineFromSuspendFunction(\n    completion: Continuation<T>,\n    crossinline block: () -> Any?\n): Continuation<Unit> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return object : CoroutineImpl(completion as Continuation<Any?>) {\n        override fun doResume(): Any? {\n            exception?.let { throw it }\n            return block()\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Returns a string representation of this [Long] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Long.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Reverses elements in the list in-place.\n */\npublic actual fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal actual fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableCollection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is invariant on its element type.\n */\npublic actual abstract class AbstractMutableCollection<E> protected actual constructor() : AbstractCollection<E>(), MutableCollection<E> {\n\n    actual abstract override fun add(element: E): Boolean\n\n    actual override fun remove(element: E): Boolean {\n        val iterator = iterator()\n        while (iterator.hasNext()) {\n            if (iterator.next() == element) {\n                iterator.remove()\n                return true\n            }\n        }\n        return false\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        var modified = false\n        for (element in elements) {\n            if (add(element)) modified = true\n        }\n        return modified\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean = (this as MutableIterable<E>).removeAll { it in elements }\n    actual override fun retainAll(elements: Collection<E>): Boolean = (this as MutableIterable<E>).removeAll { it !in elements }\n\n    actual override fun clear(): Unit {\n        val iterator = this.iterator()\n        while (iterator.hasNext()) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    @JsName(\"toJSON\")\n    open fun toJSON(): Any = this.toArray()\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableList] interface.\n *\n * @param E the type of elements contained in the list. The list is invariant on its element type.\n */\npublic actual abstract class AbstractMutableList<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableList<E> {\n    protected var modCount: Int = 0\n\n    abstract override fun add(index: Int, element: E): Unit\n    abstract override fun removeAt(index: Int): E\n    abstract override fun set(index: Int, element: E): E\n\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    actual override fun add(element: E): Boolean {\n        add(size, element)\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        var _index = index\n        var changed = false\n        for (e in elements) {\n            add(_index++, e)\n            changed = true\n        }\n        return changed\n    }\n\n    actual override fun clear() {\n        removeRange(0, size)\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean = removeAll { it in elements }\n    actual override fun retainAll(elements: Collection<E>): Boolean = removeAll { it !in elements }\n\n\n    actual override fun iterator(): MutableIterator<E> = IteratorImpl()\n\n    actual override fun contains(element: E): Boolean = indexOf(element) >= 0\n\n    actual override fun indexOf(element: E): Int {\n        for (index in 0..lastIndex) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun lastIndexOf(element: E): Int {\n        for (index in lastIndex downTo 0) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun listIterator(): MutableListIterator<E> = listIterator(0)\n    actual override fun listIterator(index: Int): MutableListIterator<E> = ListIteratorImpl(index)\n\n\n    actual override fun subList(fromIndex: Int, toIndex: Int): MutableList<E> = SubList(this, fromIndex, toIndex)\n\n    /**\n     * Removes the range of elements from this list starting from [fromIndex] and ending with but not including [toIndex].\n     */\n    protected open fun removeRange(fromIndex: Int, toIndex: Int) {\n        val iterator = listIterator(fromIndex)\n        repeat(toIndex - fromIndex) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    /**\n     * Compares this list with another list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return AbstractList.orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n\n    private open inner class IteratorImpl : MutableIterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n        /** the index of the item that was returned on the previous call to [next]`()`\n         * or [ListIterator.previous]`()` (for `ListIterator`),\n         * -1 if no such item exists\n         */\n        protected var last = -1\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            last = index++\n            return get(last)\n        }\n\n        override fun remove() {\n            check(last != -1) { \"Call next() or previous() before removing element from the iterator.\" }\n\n            removeAt(last)\n            index = last\n            last = -1\n        }\n    }\n\n    /**\n     * Implementation of `MutableListIterator` for abstract lists.\n     */\n    private inner class ListIteratorImpl(index: Int) : IteratorImpl(), MutableListIterator<E> {\n\n        init {\n            AbstractList.checkPositionIndex(index, this@AbstractMutableList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n\n            last = --index\n            return get(last)\n        }\n\n        override fun previousIndex(): Int = index - 1\n\n        override fun add(element: E) {\n            add(index, element)\n            index++\n            last = -1\n        }\n\n        override fun set(element: E) {\n            check(last != -1) { \"Call next() or previous() before updating element value with the iterator.\" }\n            this@AbstractMutableList[last] = element\n        }\n    }\n\n    private class SubList<E>(private val list: AbstractMutableList<E>, private val fromIndex: Int, toIndex: Int) : AbstractMutableList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            AbstractList.checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun add(index: Int, element: E) {\n            AbstractList.checkPositionIndex(index, _size)\n\n            list.add(fromIndex + index, element)\n            _size++\n        }\n\n        override fun get(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override fun removeAt(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            val result = list.removeAt(fromIndex + index)\n            _size--\n            return result\n        }\n\n        override fun set(index: Int, element: E): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list.set(fromIndex + index, element)\n        }\n\n        override val size: Int get() = _size\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableMap] interface.\n *\n * The implementor is required to implement [entries] property, which should return mutable set of map entries, and [put] function.\n *\n * @param K the type of map keys. The map is invariant on its key type.\n * @param V the type of map values. The map is invariant on its value type.\n */\npublic actual abstract class AbstractMutableMap<K, V> protected actual constructor() : AbstractMap<K, V>(), MutableMap<K, V> {\n\n    /**\n     * A mutable [Map.Entry] shared by several [Map] implementations.\n     */\n    internal open class SimpleEntry<K, V>(override val key: K, value: V) : MutableMap.MutableEntry<K, V> {\n        constructor(entry: Map.Entry<K, V>) : this(entry.key, entry.value)\n\n        private var _value = value\n\n        override val value: V get() = _value\n\n        override fun setValue(newValue: V): V {\n            val oldValue = this._value\n            this._value = newValue\n            return oldValue\n        }\n\n        override fun hashCode(): Int = entryHashCode(this)\n        override fun toString(): String = entryToString(this)\n        override fun equals(other: Any?): Boolean = entryEquals(this, other)\n\n    }\n\n    actual override fun clear() {\n        entries.clear()\n    }\n\n    private var _keys: MutableSet<K>? = null\n    actual override val keys: MutableSet<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractMutableSet<K>() {\n                    override fun add(element: K): Boolean = throw UnsupportedOperationException(\"Add is not supported on keys\")\n                    override fun clear() {\n                        this@AbstractMutableMap.clear()\n                    }\n\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): MutableIterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override fun remove(element: K): Boolean {\n                        if (containsKey(element)) {\n                            this@AbstractMutableMap.remove(element)\n                            return true\n                        }\n                        return false\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n                }\n            }\n            return _keys!!\n        }\n\n    actual abstract override fun put(key: K, value: V): V?\n\n    actual override fun putAll(from: Map<out K, V>) {\n        for ((key, value) in from) {\n            put(key, value)\n        }\n    }\n\n    private var _values: MutableCollection<V>? = null\n    actual override val values: MutableCollection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractMutableCollection<V>() {\n                    override fun add(element: V): Boolean = throw UnsupportedOperationException(\"Add is not supported on values\")\n                    override fun clear() = this@AbstractMutableMap.clear()\n\n                    override operator fun contains(element: V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): MutableIterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    // TODO: should we implement them this way? Currently it's unspecified in JVM\n                    override fun equals(other: Any?): Boolean {\n                        if (this === other) return true\n                        if (other !is Collection<*>) return false\n                        return AbstractList.orderedEquals(this, other)\n                    }\n\n                    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n                }\n            }\n            return _values!!\n        }\n\n    actual override fun remove(key: K): V? {\n        val iter = entries.iterator()\n        while (iter.hasNext()) {\n            val entry = iter.next()\n            val k = entry.key\n            if (key == k) {\n                val value = entry.value\n                iter.remove()\n                return value\n            }\n        }\n        return null\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableSet] interface.\n *\n * @param E the type of elements contained in the set. The set is invariant on its element type.\n */\npublic actual abstract class AbstractMutableSet<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableSet<E> {\n\n    /**\n     * Compares this set with another set instance with the unordered structural equality.\n     *\n     * @return `true`, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return AbstractSet.setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = AbstractSet.unorderedHashCode(this)\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a [MutableList] implementation, which uses a resizable array as its backing storage.\n *\n * This implementation doesn't provide a way to manage capacity, as backing JS array is resizeable itself.\n * There is no speed advantage to pre-allocating array sizes in JavaScript, so this implementation does not include any of the\n * capacity and \"growth increment\" concepts.\n */\npublic actual open class ArrayList<E> internal constructor(private var array: Array<Any?>) : AbstractMutableList<E>(), MutableList<E>, RandomAccess {\n\n    /**\n     * Creates an empty [ArrayList].\n     */\n    public actual constructor() : this(emptyArray()) {}\n\n    /**\n     * Creates an empty [ArrayList].\n     * @param initialCapacity initial capacity (ignored)\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual constructor(initialCapacity: Int = 0) : this(emptyArray()) {}\n\n    /**\n     * Creates an [ArrayList] filled from the [elements] collection.\n     */\n    public actual constructor(elements: Collection<E>) : this(elements.toTypedArray<Any?>()) {}\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun trimToSize() {}\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun ensureCapacity(minCapacity: Int) {}\n\n    actual override val size: Int get() = array.size\n    @Suppress(\"UNCHECKED_CAST\")\n    actual override fun get(index: Int): E = array[rangeCheck(index)] as E\n    actual override fun set(index: Int, element: E): E {\n        rangeCheck(index)\n        @Suppress(\"UNCHECKED_CAST\")\n        return array[index].apply { array[index] = element } as E\n    }\n\n    actual override fun add(element: E): Boolean {\n        array.asDynamic().push(element)\n        modCount++\n        return true\n    }\n\n    actual override fun add(index: Int, element: E): Unit {\n        array.asDynamic().splice(insertionRangeCheck(index), 0, element)\n        modCount++\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        if (elements.isEmpty()) return false\n\n        array += elements.toTypedArray<Any?>()\n        modCount++\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        insertionRangeCheck(index)\n\n        if (index == size) return addAll(elements)\n        if (elements.isEmpty()) return false\n        when (index) {\n            size -> return addAll(elements)\n            0 -> array = elements.toTypedArray<Any?>() + array\n            else -> array = array.copyOfRange(0, index).asDynamic().concat(elements.toTypedArray<Any?>(), array.copyOfRange(index, size))\n        }\n\n        modCount++\n        return true\n    }\n\n    actual override fun removeAt(index: Int): E {\n        rangeCheck(index)\n        modCount++\n        return if (index == lastIndex)\n            array.asDynamic().pop()\n        else\n            array.asDynamic().splice(index, 1)[0]\n    }\n\n    actual override fun remove(element: E): Boolean {\n        for (index in array.indices) {\n            if (array[index] == element) {\n                array.asDynamic().splice(index, 1)\n                modCount++\n                return true\n            }\n        }\n        return false\n    }\n\n    override fun removeRange(fromIndex: Int, toIndex: Int) {\n        modCount++\n        array.asDynamic().splice(fromIndex, toIndex - fromIndex)\n    }\n\n    actual override fun clear() {\n        array = emptyArray()\n        modCount++\n    }\n\n\n    actual override fun indexOf(element: E): Int = array.indexOf(element)\n\n    actual override fun lastIndexOf(element: E): Int = array.lastIndexOf(element)\n\n    override fun toString() = arrayToString(array)\n    override fun toArray(): Array<Any?> = js(\"[]\").slice.call(array)\n\n\n    private fun rangeCheck(index: Int) = index.apply {\n        AbstractList.checkElementIndex(index, size)\n    }\n\n    private fun insertionRangeCheck(index: Int) = index.apply {\n        AbstractList.checkPositionIndex(index, size)\n    }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparison: (T, T) -> Int) {\n    if (getStableSortingIsSupported()) {\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, Comparator(comparison))\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparator: Comparator<in T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> comparator.compare(a, b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, comparator)\n    }\n}\n\ninternal fun <T : Comparable<T>> sortArray(array: Array<out T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> a.compareTo(b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, naturalOrder())\n    }\n}\n\nprivate var _stableSortingIsSupported: Boolean? = null\nprivate fun getStableSortingIsSupported(): Boolean {\n    _stableSortingIsSupported?.let { return it }\n    _stableSortingIsSupported = false\n\n    val array = js(\"[]\").unsafeCast<Array<Int>>()\n    // known implementations may use stable sort for arrays of up to 512 elements\n    // so we create slightly more elements to test stability\n    for (index in 0 until 600) array.asDynamic().push(index)\n    val comparison = { a: Int, b: Int -> (a and 3) - (b and 3) }\n    array.asDynamic().sort(comparison)\n    for (index in 1 until array.size) {\n        val a = array[index - 1]\n        val b = array[index]\n        if ((a and 3) == (b and 3) && a >= b) return false\n    }\n    _stableSortingIsSupported = true\n    return true\n}\n\n\nprivate fun <T> mergeSort(array: Array<T>, start: Int, endInclusive: Int, comparator: Comparator<in T>) {\n    val buffer = arrayOfNulls<Any?>(array.size).unsafeCast<Array<T>>()\n    val result = mergeSort(array, buffer, start, endInclusive, comparator)\n    if (result !== array) {\n        result.forEachIndexed { i, v -> array[i] = v }\n    }\n}\n\n// Both start and end are inclusive indices.\nprivate fun <T> mergeSort(array: Array<T>, buffer: Array<T>, start: Int, end: Int, comparator: Comparator<in T>): Array<T> {\n    if (start == end) {\n        return array\n    }\n\n    val median = (start + end) / 2\n    val left = mergeSort(array, buffer, start, median, comparator)\n    val right = mergeSort(array, buffer, median + 1, end, comparator)\n\n    val target = if (left === buffer) array else buffer\n\n    // Merge.\n    var leftIndex = start\n    var rightIndex = median + 1\n    for (i in start..end) {\n        when {\n            leftIndex <= median && rightIndex <= end -> {\n                val leftValue = left[leftIndex]\n                val rightValue = right[rightIndex]\n\n                if (comparator.compare(leftValue, rightValue) <= 0) {\n                    target[i] = leftValue\n                    leftIndex++\n                } else {\n                    target[i] = rightValue\n                    rightIndex++\n                }\n            }\n            leftIndex <= median -> {\n                target[i] = left[leftIndex]\n                leftIndex++\n            }\n            else /* rightIndex <= end */ -> {\n                target[i] = right[rightIndex]\n                rightIndex++\n                Unit  // TODO: Fix KT-31506\n            }\n        }\n    }\n\n    return target\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal interface EqualityComparator {\n    /**\n     * Subclasses must override to return a value indicating\n     * whether or not two keys or values are equal.\n     */\n    abstract fun equals(value1: Any?, value2: Any?): Boolean\n\n    /**\n     * Subclasses must override to return the hash code of a given key.\n     */\n    abstract fun getHashCode(value: Any?): Int\n\n\n    object HashCode : EqualityComparator {\n        override fun equals(value1: Any?, value2: Any?): Boolean = value1 == value2\n\n        override fun getHashCode(value: Any?): Int = value?.hashCode() ?: 0\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractHashMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface.\n *\n * This implementation makes no guarantees regarding the order of enumeration of [keys], [values] and [entries] collections.\n */\npublic actual open class HashMap<K, V> : AbstractMutableMap<K, V>, MutableMap<K, V> {\n\n    private inner class EntrySet : AbstractMutableSet<MutableEntry<K, V>>() {\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@HashMap.clear()\n        }\n\n        override operator fun contains(element: MutableEntry<K, V>): Boolean = containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = internalMap.iterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            if (contains(element)) {\n                this@HashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@HashMap.size\n    }\n\n\n    /**\n     * Internal implementation of the map: either string-based or hashcode-based.\n     */\n    private val internalMap: InternalMap<K, V>\n\n    private val equality: EqualityComparator\n\n    internal constructor(internalMap: InternalMap<K, V>) : super() {\n        this.internalMap = internalMap\n        this.equality = internalMap.equality\n    }\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     */\n    actual constructor() : this(InternalHashCodeMap(EqualityComparator.HashCode))\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : this() {\n        // This implementation of HashMap has no need of load factors or capacities.\n        require(initialCapacity >= 0) { \"Negative initial capacity: $initialCapacity\" }\n        require(loadFactor >= 0) { \"Non-positive load factor: $loadFactor\" }\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n\n    /**\n     * Constructs an instance of [HashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) : this() {\n        this.putAll(original)\n    }\n\n    actual override fun clear() {\n        internalMap.clear()\n//        structureChanged(this)\n    }\n\n    actual override fun containsKey(key: K): Boolean = internalMap.contains(key)\n\n    actual override fun containsValue(value: V): Boolean = internalMap.any { equality.equals(it.value, value) }\n\n    private var _entries: MutableSet<MutableMap.MutableEntry<K, V>>? = null\n    actual override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n        get() {\n            if (_entries == null) {\n                _entries = createEntrySet()\n            }\n            return _entries!!\n        }\n\n    protected open fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = internalMap.get(key)\n\n    actual override fun put(key: K, value: V): V? = internalMap.put(key, value)\n\n    actual override fun remove(key: K): V? = internalMap.remove(key)\n\n    actual override val size: Int get() = internalMap.size\n\n}\n\n/**\n * Constructs the specialized implementation of [HashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> stringMapOf(vararg pairs: Pair<String, V>): HashMap<String, V> {\n    return HashMap<String, V>(InternalStringMap(EqualityComparator.HashCode)).apply { putAll(pairs) }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT HashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [HashMap] instance.\n */\npublic actual open class HashSet<E> : AbstractMutableSet<E>, MutableSet<E> {\n\n    private val map: HashMap<E, Any>\n\n    /**\n     * Constructs a new empty [HashSet].\n     */\n    actual constructor() {\n        map = HashMap<E, Any>()\n    }\n\n    /**\n     * Constructs a new [HashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) {\n        map = HashMap<E, Any>(elements.size)\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [HashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) {\n        map = HashMap<E, Any>(initialCapacity, loadFactor)\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Protected constructor to specify the underlying map. This is used by\n     * LinkedHashSet.\n\n     * @param map underlying map to use.\n     */\n    internal constructor(map: HashMap<E, Any>) {\n        this.map = map\n    }\n\n    actual override fun add(element: E): Boolean {\n        val old = map.put(element, this)\n        return old == null\n    }\n\n    actual override fun clear() {\n        map.clear()\n    }\n\n//    public override fun clone(): Any {\n//        return HashSet<E>(this)\n//    }\n\n    actual override operator fun contains(element: E): Boolean = map.containsKey(element)\n\n    actual override fun isEmpty(): Boolean = map.isEmpty()\n\n    actual override fun iterator(): MutableIterator<E> = map.keys.iterator()\n\n    actual override fun remove(element: E): Boolean = map.remove(element) != null\n\n    actual override val size: Int get() = map.size\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [HashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun stringSetOf(vararg elements: String): HashSet<String> {\n    return HashSet(stringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalHashCodeMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\nimport kotlin.collections.AbstractMutableMap.SimpleEntry\n\n/**\n * A simple wrapper around JavaScriptObject to provide [java.util.Map]-like semantics for any\n * key type.\n *\n *\n * Implementation notes:\n *\n *\n * A key's hashCode is the index in backingMap which should contain that key. Since several keys may\n * have the same hash, each value in hashCodeMap is actually an array containing all entries whose\n * keys share the same hash.\n */\ninternal class InternalHashCodeMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n    override fun put(key: K, value: V): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode)\n        if (chainOrEntry == null) {\n            // This is a new chain, put it to the map.\n            backingMap[hashCode] = SimpleEntry(key, value)\n        } else {\n            if (chainOrEntry !is Array<*>) {\n                // It is an entry\n                val entry: SimpleEntry<K, V> = chainOrEntry\n                if (equality.equals(entry.key, key)) {\n                    return entry.setValue(value)\n                } else {\n                    backingMap[hashCode] = arrayOf(entry, SimpleEntry(key, value))\n                    size++\n                    return null\n                }\n            } else {\n                // Chain already exists, perhaps key also exists.\n                val chain: Array<MutableEntry<K, V>> = chainOrEntry\n                val entry = chain.findEntryInChain(key)\n                if (entry != null) {\n                    return entry.setValue(value)\n                }\n                chain.asDynamic().push(SimpleEntry(key, value))\n            }\n        }\n        size++\n//        structureChanged(host)\n        return null\n    }\n\n    override fun remove(key: K): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                jsDeleteProperty(backingMap, hashCode)\n                size--\n                return entry.value\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            for (index in chain.indices) {\n                val entry = chain[index]\n                if (equality.equals(key, entry.key)) {\n                    if (chain.size == 1) {\n                        chain.asDynamic().length = 0\n                        // remove the whole array\n                        jsDeleteProperty(backingMap, hashCode)\n                    } else {\n                        // splice out the entry we're removing\n                        chain.asDynamic().splice(index, 1)\n                    }\n                    size--\n//                structureChanged(host)\n                    return entry.value\n                }\n            }\n        }\n        return null\n    }\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n    override fun contains(key: K): Boolean = getEntry(key) != null\n\n    override fun get(key: K): V? = getEntry(key)?.value\n\n    private fun getEntry(key: K): MutableEntry<K, V>? {\n        val chainOrEntry = getChainOrEntryOrNull(equality.getHashCode(key)) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                return entry\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            return chain.findEntryInChain(key)\n        }\n    }\n\n    private fun Array<MutableEntry<K, V>>.findEntryInChain(key: K): MutableEntry<K, V>? =\n        firstOrNull { entry -> equality.equals(entry.key, key) }\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n\n        return object : MutableIterator<MutableEntry<K, V>> {\n            var state = -1 // -1 not ready, 0 - ready, 1 - done\n\n            val keys: Array<String> = js(\"Object\").keys(backingMap)\n            var keyIndex = -1\n\n            var chainOrEntry: dynamic = null\n            var isChain = false\n            var itemIndex = -1\n            var lastEntry: MutableEntry<K, V>? = null\n\n            private fun computeNext(): Int {\n                if (chainOrEntry != null && isChain) {\n                    val chainSize: Int = chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>().size\n                    if (++itemIndex < chainSize)\n                        return 0\n                }\n\n                if (++keyIndex < keys.size) {\n                    chainOrEntry = backingMap[keys[keyIndex]]\n                    isChain = chainOrEntry is Array<*>\n                    itemIndex = 0\n                    return 0\n                } else {\n                    chainOrEntry = null\n                    return 1\n                }\n            }\n\n            override fun hasNext(): Boolean {\n                if (state == -1)\n                    state = computeNext()\n                return state == 0\n            }\n\n            override fun next(): MutableEntry<K, V> {\n                if (!hasNext()) throw NoSuchElementException()\n                val lastEntry = if (isChain) {\n                    chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>()[itemIndex]\n                } else {\n                    chainOrEntry.unsafeCast<MutableEntry<K, V>>()\n                }\n                this.lastEntry = lastEntry\n                state = -1\n                return lastEntry\n            }\n\n            override fun remove() {\n                checkNotNull(lastEntry)\n                this@InternalHashCodeMap.remove(lastEntry!!.key)\n                lastEntry = null\n                // the chain being iterated just got modified by InternalHashCodeMap.remove\n                itemIndex--\n            }\n        }\n    }\n\n    private fun getChainOrEntryOrNull(hashCode: Int): dynamic {\n        val chainOrEntry = backingMap[hashCode]\n        return if (chainOrEntry === undefined) null else chainOrEntry\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalStringMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * A simple wrapper around JavaScript Map for key type is string.\n *\n * Though this map is instantiated only with K=String, the K type is not fixed to String statically,\n * because we want to have it erased to Any? in order not to generate type-safe override bridges for\n * [get], [contains], [remove] etc, if they ever are generated.\n */\ninternal class InternalStringMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n//    /**\n//     * A mod count to track 'value' replacements in map to ensure that the 'value' that we have in the\n//     * iterator entry is guaranteed to be still correct.\n//     * This is to optimize for the common scenario where the values are not modified during\n//     * iterations where the entries are never stale.\n//     */\n//    private var valueMod: Int = 0\n\n    override operator fun contains(key: K): Boolean {\n        if (key !is String) return false\n        return backingMap[key] !== undefined\n    }\n\n    override operator fun get(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        return if (value !== undefined) value.unsafeCast<V>() else null\n    }\n\n\n    override fun put(key: K, value: V): V? {\n        require(key is String)\n        val oldValue = backingMap[key]\n        backingMap[key] = value\n\n        if (oldValue === undefined) {\n            size++\n//            structureChanged(host)\n            return null\n        } else {\n//            valueMod++\n            return oldValue.unsafeCast<V>()\n        }\n    }\n\n    override fun remove(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        if (value !== undefined) {\n            jsDeleteProperty(backingMap, key)\n            size--\n//            structureChanged(host)\n            return value.unsafeCast<V>()\n        } else {\n//            valueMod++\n            return null\n        }\n    }\n\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n        return object : MutableIterator<MutableEntry<K, V>> {\n            private val keys: Array<String> = js(\"Object\").keys(backingMap)\n            private val iterator = keys.iterator()\n            private var lastKey: String? = null\n\n            override fun hasNext(): Boolean = iterator.hasNext()\n\n            override fun next(): MutableEntry<K, V> {\n                val key = iterator.next()\n                lastKey = key\n                @Suppress(\"UNCHECKED_CAST\")\n                return newMapEntry(key as K)\n            }\n\n            override fun remove() {\n                @Suppress(\"UNCHECKED_CAST\")\n                this@InternalStringMap.remove(checkNotNull(lastKey) as K)\n            }\n        }\n    }\n\n    private fun newMapEntry(key: K): MutableEntry<K, V> = object : MutableEntry<K, V> {\n        override val key: K get() = key\n        override val value: V get() = this@InternalStringMap[key].unsafeCast<V>()\n\n        override fun setValue(newValue: V): V = this@InternalStringMap.put(key, newValue).unsafeCast<V>()\n\n        override fun hashCode(): Int = AbstractMap.entryHashCode(this)\n        override fun toString(): String = AbstractMap.entryToString(this)\n        override fun equals(other: Any?): Boolean = AbstractMap.entryEquals(this, other)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT LinkedHashMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface, which additionally preserves the insertion order\n * of entries during the iteration.\n *\n * The insertion order is preserved by maintaining a doubly-linked list of all of its entries.\n */\npublic actual open class LinkedHashMap<K, V> : HashMap<K, V>, MutableMap<K, V> {\n\n    /**\n     * The entry we use includes next/prev pointers for a doubly-linked circular\n     * list with a head node. This reduces the special cases we have to deal with\n     * in the list operations.\n\n     * Note that we duplicate the key from the underlying hash map so we can find\n     * the eldest entry. The alternative would have been to modify HashMap so more\n     * of the code was directly usable here, but this would have added some\n     * overhead to HashMap, or to reimplement most of the HashMap code here with\n     * small modifications. Paying a small storage cost only if you use\n     * LinkedHashMap and minimizing code size seemed like a better tradeoff\n     */\n    private class ChainEntry<K, V>(key: K, value: V) : AbstractMutableMap.SimpleEntry<K, V>(key, value) {\n        internal var next: ChainEntry<K, V>? = null\n        internal var prev: ChainEntry<K, V>? = null\n    }\n\n    private inner class EntrySet : AbstractMutableSet<MutableEntry<K, V>>() {\n\n        private inner class EntryIterator : MutableIterator<MutableEntry<K, V>> {\n            // The last entry that was returned from this iterator.\n            private var last: ChainEntry<K, V>? = null\n\n            // The next entry to return from this iterator.\n            private var next: ChainEntry<K, V>? = null\n\n            init {\n                next = head\n//                recordLastKnownStructure(map, this)\n            }\n\n            override fun hasNext(): Boolean {\n                return next !== null\n            }\n\n            override fun next(): MutableEntry<K, V> {\n//                checkStructuralChange(map, this)\n                if (!hasNext()) throw NoSuchElementException()\n\n                val current = next!!\n                last = current\n                next = current.next.takeIf { it !== head }\n                return current\n            }\n\n            override fun remove() {\n                check(last != null)\n//                checkStructuralChange(map, this)\n\n                last!!.remove()\n                map.remove(last!!.key)\n//                recordLastKnownStructure(map, this)\n                last = null\n            }\n        }\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@LinkedHashMap.clear()\n        }\n\n        override operator fun contains(element: MutableEntry<K, V>): Boolean = containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = EntryIterator()\n\n        override fun remove(element: MutableEntry<K, V>): Boolean {\n            if (contains(element)) {\n                this@LinkedHashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@LinkedHashMap.size\n    }\n\n\n    /*\n   * The head of the insert order chain, which is a doubly-linked circular\n   * list.\n   *\n   * The most recently inserted node is at the end of the chain, ie.\n   * chain.prev.\n   */\n    private var head: ChainEntry<K, V>? = null\n\n    /**\n     * Add this node to the end of the chain.\n     */\n    private fun ChainEntry<K, V>.addToEnd() {\n        // This entry is not in the list.\n        check(next == null && prev == null)\n\n        val _head = head\n        if (_head == null) {\n            head = this\n            next = this\n            prev = this\n        } else {\n            // Chain is valid.\n            val _tail = checkNotNull(_head.prev)\n            // Update me.\n            prev = _tail\n            next = _head\n            // Update my new siblings: current head and old tail\n            _head.prev = this\n            _tail.next = this\n        }\n    }\n\n    /**\n     * Remove this node from the chain it is a part of.\n     */\n    private fun ChainEntry<K, V>.remove() {\n        if (this.next === this) {\n            // if this is single element, remove head\n            head = null\n        } else {\n            if (head === this) {\n                // if this is first element, move head to next\n                head = next\n            }\n            next!!.prev = prev\n            prev!!.next = next\n        }\n        next = null\n        prev = null\n    }\n\n    /*\n   * The hashmap that keeps track of our entries and the chain. Note that we\n   * duplicate the key here to eliminate changes to HashMap and minimize the\n   * code here, at the expense of additional space.\n   */\n    private val map: HashMap<K, ChainEntry<K, V>>\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     */\n    actual constructor() : super() {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    internal constructor(backingMap: HashMap<K, Any>) : super() {\n        @Suppress(\"UNCHECKED_CAST\") // expected to work due to erasure\n        map = backingMap as HashMap<K, ChainEntry<K, V>>\n    }\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(initialCapacity, loadFactor) {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Constructs an instance of [LinkedHashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) {\n        map = HashMap<K, ChainEntry<K, V>>()\n        this.putAll(original)\n    }\n\n    actual override fun clear() {\n        map.clear()\n        head = null\n    }\n\n\n//    override fun clone(): Any {\n//        return LinkedHashMap(this)\n//    }\n\n\n    actual override fun containsKey(key: K): Boolean = map.containsKey(key)\n\n    actual override fun containsValue(value: V): Boolean {\n        var node: ChainEntry<K, V> = head ?: return false\n        do {\n            if (node.value == value) {\n                return true\n            }\n            node = node.next!!\n        } while (node !== head)\n        return false\n    }\n\n\n    override fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = map.get(key)?.value\n\n    actual override fun put(key: K, value: V): V? {\n        val old = map.get(key)\n        if (old == null) {\n            val newEntry = ChainEntry(key, value)\n            map.put(key, newEntry)\n            newEntry.addToEnd()\n            return null\n        } else {\n            return old.setValue(value)\n        }\n    }\n\n    actual override fun remove(key: K): V? {\n        val entry = map.remove(key)\n        if (entry != null) {\n            entry.remove()\n            return entry.value\n        }\n        return null\n    }\n\n    actual override val size: Int get() = map.size\n\n}\n\n/**\n * Constructs the specialized implementation of [LinkedHashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> linkedStringMapOf(vararg pairs: Pair<String, V>): LinkedHashMap<String, V> {\n    return LinkedHashMap<String, V>(stringMapOf<Any>()).apply { putAll(pairs) }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT LinkedHashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [LinkedHashMap] instance.\n *\n * This implementation preserves the insertion order of elements during the iteration.\n */\npublic actual open class LinkedHashSet<E> : HashSet<E>, MutableSet<E> {\n\n    internal constructor(map: LinkedHashMap<E, Any>) : super(map)\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     */\n    actual constructor() : super(LinkedHashMap<E, Any>())\n\n    /**\n     * Constructs a new [LinkedHashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) : super(LinkedHashMap<E, Any>()) {\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    actual constructor(initialCapacity: Int, loadFactor: Float = 0.0f) : super(LinkedHashMap<E, Any>(initialCapacity, loadFactor))\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n//    public override fun clone(): Any {\n//        return LinkedHashSet(this)\n//    }\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [LinkedHashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun linkedStringSetOf(vararg elements: String): LinkedHashSet<String> {\n    return LinkedHashSet(linkedStringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.io\n\ninternal abstract class BaseOutput {\n    open fun println() {\n        print(\"\\n\")\n    }\n\n    open fun println(message: Any?) {\n        print(message)\n        println()\n    }\n\n    abstract fun print(message: Any?)\n\n    open fun flush() {}\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"NodeJsOutput\")\ninternal class NodeJsOutput(val outputStream: dynamic) : BaseOutput() {\n    override fun print(message: Any?) {\n        // TODO: Using local variable because of bug in block decomposition lowering in IR backend\n        val messageString = String(message)\n        outputStream.write(messageString)\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"OutputToConsoleLog\")\ninternal class OutputToConsoleLog : BaseOutput() {\n    override fun print(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println() {\n        console.log(\"\")\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"BufferedOutput\")\ninternal open class BufferedOutput : BaseOutput() {\n    var buffer = \"\"\n\n    override fun print(message: Any?) {\n        buffer += String(message)\n    }\n\n    override fun flush() {\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"BufferedOutputToConsoleLog\")\ninternal class BufferedOutputToConsoleLog : BufferedOutput() {\n    override fun print(message: Any?) {\n        var s = String(message)\n        val i = s.nativeLastIndexOf(\"\\n\", 0)\n        if (i >= 0) {\n            buffer += s.substring(0, i)\n            flush()\n            s = s.substring(i + 1)\n        }\n        buffer += s\n    }\n\n    override fun flush() {\n        console.log(buffer)\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"output\")\ninternal var output = run {\n    val isNode: Boolean = js(\"typeof process !== 'undefined' && process.versions && !!process.versions.node\")\n    if (isNode) NodeJsOutput(js(\"process.stdout\")) else BufferedOutputToConsoleLog()\n}\n\n@kotlin.internal.InlineOnly\nprivate inline fun String(value: Any?): String = js(\"String\")(value)\n\n/** Prints the line separator to the standard output stream. */\npublic actual fun println() {\n    output.println()\n}\n\n/** Prints the given [message] and the line separator to the standard output stream. */\npublic actual fun println(message: Any?) {\n    output.println(message)\n}\n\n/** Prints the given [message] to the standard output stream. */\npublic actual fun print(message: Any?) {\n    output.print(message)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.CoroutineSingletons.*\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal actual class SafeContinuation<in T>\ninternal actual constructor(\n    private val delegate: Continuation<T>,\n    initialResult: Any?\n) : Continuation<T> {\n    @PublishedApi\n    internal actual constructor(delegate: Continuation<T>) : this(delegate, UNDECIDED)\n\n    public actual override val context: CoroutineContext\n        get() = delegate.context\n\n    private var result: Any? = initialResult\n\n    public actual override fun resumeWith(result: Result<T>) {\n        val cur = this.result\n        when {\n            cur === UNDECIDED -> {\n                this.result = result.value\n            }\n            cur === COROUTINE_SUSPENDED -> {\n                this.result = RESUMED\n                delegate.resumeWith(result)\n            }\n            else -> throw IllegalStateException(\"Already resumed\")\n        }\n    }\n\n    @PublishedApi\n    internal actual fun getOrThrow(): Any? {\n        if (result === UNDECIDED) {\n            result = COROUTINE_SUSPENDED\n            return COROUTINE_SUSPENDED\n        }\n        val result = this.result\n        return when {\n            result === RESUMED -> COROUTINE_SUSPENDED // already called continuation, indicate COROUTINE_SUSPENDED upstream\n            result is Result.Failure -> throw result.exception\n            else -> result // either COROUTINE_SUSPENDED or data\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@JsName(\"throwNPE\")\ninternal fun throwNPE(message: String) {\n    throw NullPointerException(message)\n}\n\n@JsName(\"throwCCE\")\ninternal fun throwCCE() {\n    throw ClassCastException(\"Illegal cast\")\n}\n\n@JsName(\"throwISE\")\ninternal fun throwISE(message: String) {\n    throw IllegalStateException(message)\n}\n\n@JsName(\"throwUPAE\")\ninternal fun throwUPAE(propertyName: String) {\n    throw UninitializedPropertyAccessException(\"lateinit property ${propertyName} has not been initialized\")\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n// NOTE: Do not author your exceptions as they are written in this file, instead use this template:\n/*\npublic open class MyException : Exception {\n    constructor() : super()\n    constructor(message: String?) : super(message)\n    constructor(message: String?, cause: Throwable?) : super(message, cause)\n    constructor(cause: Throwable?) : super(cause)\n}\n*/\n\n\n// TODO: remove workarounds for KT-22053 from direct Throwable inheritors\n// TODO: remove primary constructors, make all secondary KT-22055\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Error actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null) {\n        Error::class.js.asDynamic().call(this, null, null)\n    }\n\n    actual constructor(message: String?) : this(message, null) {\n        Error::class.js.asDynamic().call(this, message, null)\n    }\n\n    actual constructor(cause: Throwable?) : this(undefined, cause) {\n        Error::class.js.asDynamic().call(this, undefined, cause)\n    }\n}\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Exception actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null) {\n        Exception::class.js.asDynamic().call(this, null, null)\n    }\n\n    actual constructor(message: String?) : this(message, null) {\n        Exception::class.js.asDynamic().call(this, message, null)\n    }\n\n    actual constructor(cause: Throwable?) : this(undefined, cause) {\n        Exception::class.js.asDynamic().call(this, undefined, cause)\n    }\n}\n\npublic actual open class RuntimeException actual constructor(message: String?, cause: Throwable?) : Exception(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalArgumentException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalStateException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IndexOutOfBoundsException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ConcurrentModificationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UnsupportedOperationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n\npublic actual open class NumberFormatException actual constructor(message: String?) : IllegalArgumentException(message) {\n    actual constructor() : this(null)\n}\n\n\npublic actual open class NullPointerException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ClassCastException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class AssertionError private constructor(message: String?, cause: Throwable?) : Error(message, cause) {\n    actual constructor() : this(null)\n    constructor(message: String?) : this(message, null)\n    actual constructor(message: Any?) : this(message.toString(), message as? Throwable)\n}\n\npublic actual open class NoSuchElementException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\n@SinceKotlin(\"1.3\")\npublic actual open class ArithmeticException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class NoWhenBranchMatchedException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UninitializedPropertyAccessException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * An interface for indexing access to a collection of key-value pairs, where type of key is [String] and type of value is [Any?][Any].\n */\npublic external interface Json {\n    /**\n     * Calls to the function will be translated to indexing operation (square brackets) on the receiver with [propertyName] as the argument.\n     *\n     * E.g. for next code:\n     * ```kotlin\n     * fun test(j: Json, p: String) = j[\"prop\"] + j.get(p)\n     * ```\n     *\n     * will be generated:\n     * ```js\n     * function test(j, p) {\n     *     return j[\"prop\"] + j[p];\n     * }\n     * ```\n     */\n    operator fun get(propertyName: String): Any?\n\n    /**\n     * Calls of the function will be translated to an assignment of [value] to the receiver indexed (with square brackets/index operation) with [propertyName].\n     *\n     * E.g. for the following code:\n     * ```kotlin\n     * fun test(j: Json, p: String, newValue: Any) {\n     *     j[\"prop\"] = 1\n     *     j.set(p, newValue)\n     * }\n     * ```\n     *\n     * will be generated:\n     * ```js\n     * function test(j, p, newValue) {\n     *     j[\"prop\"] = 1;\n     *     j[p] = newValue;\n     * }\n     * }\n     * ```\n     */\n    operator fun set(propertyName: String, value: Any?): Unit\n}\n\n/**\n * Returns a simple JavaScript object (as [Json]) using provided key-value pairs as names and values of its properties.\n */\npublic fun json(vararg pairs: Pair<String, Any?>): Json {\n    val res: dynamic = js(\"({})\")\n    for ((name, value) in pairs) {\n        res[name] = value\n    }\n    return res\n}\n\n/**\n * Adds key-value pairs from [other] to [this].\n * Returns the original receiver.\n */\npublic fun Json.add(other: Json): Json {\n    val keys: Array<String> = js(\"Object\").keys(other)\n    for (key in keys) {\n        if (other.asDynamic().hasOwnProperty(key)) {\n            this[key] = other[key];\n        }\n    }\n    return this\n}\n\n/**\n * Exposes the JavaScript [JSON object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external object JSON {\n    public fun stringify(o: Any?): String\n    public fun stringify(o: Any?, replacer: ((key: String, value: Any?) -> Any?)): String\n    public fun stringify(o: Any?, replacer: ((key: String, value: Any?) -> Any?)? = definedExternally, space: Int): String\n    public fun stringify(o: Any?, replacer: ((key: String, value: Any?) -> Any?)? = definedExternally, space: String): String\n    public fun stringify(o: Any?, replacer: Array<String>): String\n    public fun stringify(o: Any?, replacer: Array<String>, space: Int): String\n    public fun stringify(o: Any?, replacer: Array<String>, space: String): String\n\n    public fun <T> parse(text: String): T\n    public fun <T> parse(text: String, reviver: ((key: String, value: Any?) -> Any?)): T\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic actual fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic actual fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic actual fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic actual fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()\n\n\ninternal inline fun Long(low: Int, high: Int) = js(\"Kotlin\").Long.fromBits(low, high).unsafeCast<Long>()\ninternal inline val Long.low: Int get() = this.asDynamic().getLowBits().unsafeCast<Int>()\ninternal inline val Long.high: Int get() = this.asDynamic().getHighBits().unsafeCast<Int>()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Double.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Float.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Double.isInfinite(): Boolean = this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Float.isInfinite(): Boolean = this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Double.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Float.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.countOneBits(): Int {\n    // Hacker's Delight 5-1 algorithm\n    var v = this\n    v = (v and 0x55555555) + (v.ushr(1) and 0x55555555)\n    v = (v and 0x33333333) + (v.ushr(2) and 0x33333333)\n    v = (v and 0x0F0F0F0F) + (v.ushr(4) and 0x0F0F0F0F)\n    v = (v and 0x00FF00FF) + (v.ushr(8) and 0x00FF00FF)\n    v = (v and 0x0000FFFF) + (v.ushr(16))\n    return v\n}\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"DEPRECATION\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Int.countLeadingZeroBits(): Int = kotlin.js.Math.clz32(this)\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.countTrailingZeroBits(): Int =\n    // Hacker's Delight 5-4 algorithm for expressing countTrailingZeroBits with countLeadingZeroBits\n    Int.SIZE_BITS - (this or -this).inv().countLeadingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.takeHighestOneBit(): Int =\n    if (this == 0) 0 else 1.shl(Int.SIZE_BITS - 1 - countLeadingZeroBits())\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.takeLowestOneBit(): Int =\n    // Hacker's Delight 2-1 algorithm for isolating rightmost 1-bit\n    this and -this\n\n/**\n * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateLeft(bitCount: Int): Int =\n    shl(bitCount) or ushr(Int.SIZE_BITS - bitCount)\n\n\n/**\n * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 32)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Int.rotateRight(bitCount: Int): Int =\n    shl(Int.SIZE_BITS - bitCount) or ushr(bitCount)\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.countOneBits(): Int =\n    high.countOneBits() + low.countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.countLeadingZeroBits(): Int =\n    when (val high = this.high) {\n        0 -> Int.SIZE_BITS + low.countLeadingZeroBits()\n        else -> high.countLeadingZeroBits()\n    }\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.countTrailingZeroBits(): Int =\n    when (val low = this.low) {\n        0 -> Int.SIZE_BITS + high.countTrailingZeroBits()\n        else -> low.countTrailingZeroBits()\n    }\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.takeHighestOneBit(): Long =\n    when (val high = this.high) {\n        0 -> Long(low.takeHighestOneBit(), 0)\n        else -> Long(0, high.takeHighestOneBit())\n    }\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.takeLowestOneBit(): Long =\n    when (val low = this.low) {\n        0 -> Long(0, high.takeLowestOneBit())\n        else -> Long(low.takeLowestOneBit(), 0)\n    }\n\n/**\n * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun Long.rotateLeft(bitCount: Int): Long {\n    if ((bitCount and 31) != 0) {\n        val low = this.low\n        val high = this.high\n        val newLow = low.shl(bitCount) or high.ushr(-bitCount)\n        val newHigh = high.shl(bitCount) or low.ushr(-bitCount)\n        return if ((bitCount and 32) == 0) Long(newLow, newHigh) else Long(newHigh, newLow)\n    } else {\n        return if ((bitCount and 32) == 0) this else Long(high, low)\n    }\n}\n\n\n/**\n * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 64)`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic actual inline fun Long.rotateRight(bitCount: Int): Long = rotateLeft(-bitCount)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.pow\n\ninternal actual fun defaultPlatformRandom(): Random =\n    Random(js(\"(Math.random() * Math.pow(2, 32)) | 0\").unsafeCast<Int>())\n\n\nprivate val INV_2_26: Double = 2.0.pow(-26)\nprivate val INV_2_53: Double = 2.0.pow(-53)\ninternal actual fun doubleFromParts(hi26: Int, low27: Int): Double =\n    hi26 * INV_2_26 + low27 * INV_2_53","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\nimport getKClass\nimport kotlin.reflect.KClass\nimport kotlin.reflect.js.internal.KClassImpl\n\n/**\n * Represents the constructor of a class. Instances of `JsClass` can be passed to JavaScript APIs that expect a constructor reference.\n */\nexternal interface JsClass<T : Any> {\n    /**\n     * Returns the unqualified name of the class represented by this instance.\n     */\n    val name: String\n}\n\n@Deprecated(\"Use class literal and extension property `js` instead.\", replaceWith = ReplaceWith(\"T::class.js\"), level = DeprecationLevel.ERROR)\nexternal fun <T : Any> jsClass(): JsClass<T>\n\n@Deprecated(\"Use class literal and extension property `js` instead.\", replaceWith = ReplaceWith(\"this::class.js\"), level = DeprecationLevel.ERROR)\nval <T : Any> T.jsClass: JsClass<T>\n    get() = when (jsTypeOf(this)) {\n        \"string\" -> js(\"String\")\n        \"number\" -> js(\"Number\")\n        \"boolean\" -> js(\"Boolean\")\n        else -> js(\"Object\").getPrototypeOf(this).constructor\n    }\n\n/**\n * Obtains a constructor reference for the given `KClass`.\n */\nval <T : Any> KClass<T>.js: JsClass<T>\n    get() = (this as KClassImpl<T>).jClass\n\n/**\n * Obtains a `KClass` instance for the given constructor reference.\n */\nval <T : Any> JsClass<T>.kotlin: KClass<T>\n    get() = getKClass(this)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.reflect.*\n\ninternal abstract class KClassImpl<T : Any>(\n    internal open val jClass: JsClass<T>\n) : KClass<T> {\n    override val annotations: List<Annotation>\n        get() = TODO()\n    override val constructors: Collection<KFunction<T>>\n        get() = TODO()\n    override val isAbstract: Boolean\n        get() = TODO()\n    override val isCompanion: Boolean\n        get() = TODO()\n    override val isData: Boolean\n        get() = TODO()\n    override val isFinal: Boolean\n        get() = TODO()\n    override val isInner: Boolean\n        get() = TODO()\n    override val isOpen: Boolean\n        get() = TODO()\n    override val isSealed: Boolean\n        get() = TODO()\n    override val members: Collection<KCallable<*>>\n        get() = TODO()\n    override val nestedClasses: Collection<KClass<*>>\n        get() = TODO()\n    override val objectInstance: T?\n        get() = TODO()\n    override val qualifiedName: String?\n        get() = TODO()\n    override val supertypes: List<KType>\n        get() = TODO()\n    override val typeParameters: List<KTypeParameter>\n        get() = TODO()\n    override val sealedSubclasses: List<KClass<out T>>\n        get() = TODO()\n    override val visibility: KVisibility?\n        get() = TODO()\n\n    override fun equals(other: Any?): Boolean {\n        return other is KClassImpl<*> && jClass == other.jClass\n    }\n\n    // TODO: use FQN\n    override fun hashCode(): Int = simpleName?.hashCode() ?: 0\n\n    override fun toString(): String {\n        // TODO: use FQN\n        return \"class $simpleName\"\n    }\n}\n\ninternal class SimpleKClassImpl<T : Any>(jClass: JsClass<T>) : KClassImpl<T>(jClass) {\n    override val simpleName: String? = jClass.asDynamic().`$metadata$`?.simpleName.unsafeCast<String?>()\n\n    override fun isInstance(value: Any?): Boolean {\n        return jsIsType(value, jClass)\n    }\n}\n\ninternal class PrimitiveKClassImpl<T : Any>(\n    jClass: JsClass<T>,\n    private val givenSimpleName: String,\n    private val isInstanceFunction: (Any?) -> Boolean\n) : KClassImpl<T>(jClass) {\n    override fun equals(other: Any?): Boolean {\n        if (other !is PrimitiveKClassImpl<*>) return false\n        return super.equals(other) && givenSimpleName == other.givenSimpleName\n    }\n\n    override val simpleName: String? get() = givenSimpleName\n\n    override fun isInstance(value: Any?): Boolean {\n        return isInstanceFunction(value)\n    }\n}\n\ninternal object NothingKClassImpl : KClassImpl<Nothing>(js(\"Object\")) {\n    override val simpleName: String = \"Nothing\"\n\n    override fun isInstance(value: Any?): Boolean = false\n\n    override val jClass: JsClass<Nothing>\n        get() = throw UnsupportedOperationException(\"There's no native JS class for Nothing type\")\n\n    override fun equals(other: Any?): Boolean = other === this\n\n    override fun hashCode(): Int = 0\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * The common interface of [InternalStringMap] and [InternalHashCodeMap].\n */\ninternal interface InternalMap<K, V> : MutableIterable<MutableMap.MutableEntry<K, V>> {\n    val equality: EqualityComparator\n    val size: Int\n    operator fun contains(key: K): Boolean\n    operator fun get(key: K): V?\n\n    fun put(key: K, value: V): V?\n    fun remove(key: K): V?\n    fun clear(): Unit\n\n    fun createJsMap(): dynamic {\n        val result = js(\"Object.create(null)\")\n        // force to switch object representation to dictionary mode\n        result[\"foo\"] = 1\n        jsDeleteProperty(result, \"foo\")\n        return result\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n\n@file:Suppress(\"UNUSED_PARAMETER\")\n\npackage kotlin.js\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsDeleteProperty(obj: Any, property: Any) {\n    js(\"delete obj[property]\")\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsBitwiseOr(lhs: Any?, rhs: Any?): Int =\n    js(\"lhs | rhs\").unsafeCast<Int>()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.js.JsClass\n\n@JsName(\"PrimitiveClasses\")\ninternal object PrimitiveClasses {\n    @JsName(\"anyClass\")\n    val anyClass = PrimitiveKClassImpl(js(\"Object\").unsafeCast<JsClass<Any>>(), \"Any\", { it is Any })\n\n    @JsName(\"numberClass\")\n    val numberClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Number>>(), \"Number\", { it is Number })\n\n    @JsName(\"nothingClass\")\n    val nothingClass = NothingKClassImpl\n\n    @JsName(\"booleanClass\")\n    val booleanClass = PrimitiveKClassImpl(js(\"Boolean\").unsafeCast<JsClass<Boolean>>(), \"Boolean\", { it is Boolean })\n\n    @JsName(\"byteClass\")\n    val byteClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Byte>>(), \"Byte\", { it is Byte })\n\n    @JsName(\"shortClass\")\n    val shortClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Short>>(), \"Short\", { it is Short })\n\n    @JsName(\"intClass\")\n    val intClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Int>>(), \"Int\", { it is Int })\n\n    @JsName(\"floatClass\")\n    val floatClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Float>>(), \"Float\", { it is Float })\n\n    @JsName(\"doubleClass\")\n    val doubleClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Double>>(), \"Double\", { it is Double })\n\n    @JsName(\"arrayClass\")\n    val arrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<Array<*>>>(), \"Array\", { it is Array<*> })\n\n    @JsName(\"stringClass\")\n    val stringClass = PrimitiveKClassImpl(js(\"String\").unsafeCast<JsClass<String>>(), \"String\", { it is String })\n\n    @JsName(\"throwableClass\")\n    val throwableClass = PrimitiveKClassImpl(js(\"Error\").unsafeCast<JsClass<Throwable>>(), \"Throwable\", { it is Throwable })\n\n    @JsName(\"booleanArrayClass\")\n    val booleanArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<BooleanArray>>(), \"BooleanArray\", { it is BooleanArray })\n\n    @JsName(\"charArrayClass\")\n    val charArrayClass = PrimitiveKClassImpl(js(\"Uint16Array\").unsafeCast<JsClass<CharArray>>(), \"CharArray\", { it is CharArray })\n\n    @JsName(\"byteArrayClass\")\n    val byteArrayClass = PrimitiveKClassImpl(js(\"Int8Array\").unsafeCast<JsClass<ByteArray>>(), \"ByteArray\", { it is ByteArray })\n\n    @JsName(\"shortArrayClass\")\n    val shortArrayClass = PrimitiveKClassImpl(js(\"Int16Array\").unsafeCast<JsClass<ShortArray>>(), \"ShortArray\", { it is ShortArray })\n\n    @JsName(\"intArrayClass\")\n    val intArrayClass = PrimitiveKClassImpl(js(\"Int32Array\").unsafeCast<JsClass<IntArray>>(), \"IntArray\", { it is IntArray })\n\n    @JsName(\"longArrayClass\")\n    val longArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<LongArray>>(), \"LongArray\", { it is LongArray })\n\n    @JsName(\"floatArrayClass\")\n    val floatArrayClass = PrimitiveKClassImpl(js(\"Float32Array\").unsafeCast<JsClass<FloatArray>>(), \"FloatArray\", { it is FloatArray })\n\n    @JsName(\"doubleArrayClass\")\n    val doubleArrayClass = PrimitiveKClassImpl(js(\"Float64Array\").unsafeCast<JsClass<DoubleArray>>(), \"DoubleArray\", { it is DoubleArray })\n\n    @JsName(\"functionClass\")\n    fun functionClass(arity: Int): KClassImpl<Any> {\n        return functionClasses.get(arity) ?: run {\n            val result = PrimitiveKClassImpl(js(\"Function\").unsafeCast<JsClass<Any>>(), \"Function$arity\",\n                                             { jsTypeOf(it) === \"function\" && it.asDynamic().length === arity })\n            functionClasses.asDynamic()[arity] = result\n            result\n        }\n    }\n}\n\nprivate val functionClasses = arrayOfNulls<KClassImpl<Any>>(0)","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\nimport kotlin.reflect.*\nimport kotlin.reflect.js.internal.*\n\n@JsName(\"getKClass\")\ninternal fun <T : Any> getKClass(jClass: JsClass<T>): KClass<T> = getOrCreateKClass(jClass)\n\n@JsName(\"getKClassFromExpression\")\ninternal fun <T : Any> getKClassFromExpression(e: T): KClass<T> =\n    when (jsTypeOf(e)) {\n        \"string\" -> PrimitiveClasses.stringClass\n        \"number\" -> if (jsBitwiseOr(e, 0).asDynamic() === e) PrimitiveClasses.intClass else PrimitiveClasses.doubleClass\n        \"boolean\" -> PrimitiveClasses.booleanClass\n        \"function\" -> PrimitiveClasses.functionClass(e.asDynamic().length)\n        else -> {\n            when {\n                e is BooleanArray -> PrimitiveClasses.booleanArrayClass\n                e is CharArray -> PrimitiveClasses.charArrayClass\n                e is ByteArray -> PrimitiveClasses.byteArrayClass\n                e is ShortArray -> PrimitiveClasses.shortArrayClass\n                e is IntArray -> PrimitiveClasses.intArrayClass\n                e is LongArray -> PrimitiveClasses.longArrayClass\n                e is FloatArray -> PrimitiveClasses.floatArrayClass\n                e is DoubleArray -> PrimitiveClasses.doubleArrayClass\n                e is KClass<*> -> KClass::class\n                e is Array<*> -> PrimitiveClasses.arrayClass\n                else -> {\n                    val constructor = js(\"Object\").getPrototypeOf(e).constructor\n                    when {\n                        constructor === js(\"Object\") -> PrimitiveClasses.anyClass\n                        constructor === js(\"Error\") -> PrimitiveClasses.throwableClass\n                        else -> {\n                            val jsClass: JsClass<T> = constructor\n                            getOrCreateKClass(jsClass)\n                        }\n                    }\n                }\n            }\n        }\n    }.unsafeCast<KClass<T>>()\n\nprivate fun <T : Any> getOrCreateKClass(jClass: JsClass<T>): KClass<T> {\n    if (jClass === js(\"String\")) return PrimitiveClasses.stringClass.unsafeCast<KClass<T>>()\n\n    val metadata = jClass.asDynamic().`$metadata$`\n\n    return if (metadata != null) {\n        if (metadata.`$kClass$` == null) {\n            val kClass = SimpleKClassImpl(jClass)\n            metadata.`$kClass$` = kClass\n            kClass\n        } else {\n            metadata.`$kClass$`\n        }\n    } else {\n        SimpleKClassImpl(jClass)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Exposes the JavaScript [RegExp object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external class RegExp(pattern: String, flags: String? = definedExternally) {\n\n    public fun test(str: String): Boolean\n\n    public fun exec(str: String): RegExpMatch?\n\n    public override fun toString(): String\n\n    /**\n     * The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.\n     */\n    public var lastIndex: Int\n\n    public val global: Boolean\n    public val ignoreCase: Boolean\n    public val multiline: Boolean\n}\n\n/**\n * Resets the regular expression so that subsequent [RegExp.test] and [RegExp.exec] calls will match starting with the beginning of the input string.\n */\npublic fun RegExp.reset() {\n    lastIndex = 0\n}\n\n// TODO: Inherit from array or introduce asArray() extension\n/**\n * Represents the return value of [RegExp.exec].\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external interface RegExpMatch {\n    public val index: Int\n    public val input: String\n    public val length: Int\n}\n\n/**\n * Returns the entire text matched by [RegExp.exec] if the [index] parameter is 0, or the text matched by the capturing parenthesis\n * at the given index.\n */\npublic inline operator fun RegExpMatch.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Converts the result of [RegExp.exec] to an array where the first element contains the entire matched text and each subsequent\n * element is the text matched by each capturing parenthesis.\n */\npublic inline fun RegExpMatch.asArray(): Array<out String?> = unsafeCast<Array<out String?>>()\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\npublic actual class StringBuilder actual constructor(content: String) : Appendable, CharSequence {\n    /**\n     * Constructs an empty string builder with the specified initial [capacity].\n     *\n     * In Kotlin/JS implementation of StringBuilder the initial capacity has no effect on the further performance of operations.\n     */\n    actual constructor(capacity: Int) : this() {\n        this.asDynamic()._capacity = capacity\n    }\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    actual constructor(content: CharSequence) : this(content.toString()) {}\n\n    /** Constructs an empty string builder. */\n    actual constructor() : this(\"\")\n\n    private var string: String = if (content !== undefined) content else \"\"\n\n    actual override val length: Int\n        get() = string.asDynamic().length\n\n    actual override fun get(index: Int): Char =\n        string.getOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, length: $length}\") }\n\n    actual override fun subSequence(startIndex: Int, endIndex: Int): CharSequence = string.substring(startIndex, endIndex)\n\n    actual override fun append(value: Char): StringBuilder {\n        string += value\n        return this\n    }\n\n    actual override fun append(value: CharSequence?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    @UseExperimental(ExperimentalStdlibApi::class)\n    actual override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder = this.appendRange(value, startIndex, endIndex)\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    actual fun reverse(): StringBuilder {\n        var reversed = \"\"\n        var index = string.length - 1\n        while (index >= 0) {\n            val low = string[index--]\n            if (low.isLowSurrogate() && index >= 0) {\n                val high = string[index--]\n                if (high.isHighSurrogate()) {\n                    reversed = reversed + high + low\n                } else {\n                    reversed = reversed + low + high\n                }\n            } else {\n                reversed += low\n            }\n        }\n        string = reversed\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    actual fun append(value: Any?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    actual fun append(value: Boolean): StringBuilder {\n        string += value\n        return this\n    }\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun append(value: CharArray): StringBuilder {\n        string += value.concatToString()\n        return this\n    }\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    actual fun append(value: String): StringBuilder {\n        this.string += value\n        return this\n    }\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     *\n     * In Kotlin/JS implementation of StringBuilder the value returned from this method may not indicate the actual size of the backing storage.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun capacity(): Int = if (this.asDynamic()._capacity !== undefined) maxOf(this.asDynamic()._capacity, length) else length\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is not extended to comply the given [minimumCapacity],\n     * thus calling this method has no effect on the further performance of operations.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun ensureCapacity(minimumCapacity: Int) {\n        if (minimumCapacity > capacity()) {\n            this.asDynamic()._capacity = minimumCapacity\n        }\n    }\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun indexOf(string: String): Int = this.string.asDynamic().indexOf(string)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun indexOf(string: String, startIndex: Int): Int = this.string.asDynamic().indexOf(string, startIndex)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun lastIndexOf(string: String): Int = this.string.asDynamic().lastIndexOf(string)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun lastIndexOf(string: String, startIndex: Int): Int {\n        if (string.isEmpty() && startIndex < 0) return -1\n        return this.string.asDynamic().lastIndexOf(string, startIndex)\n    }\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: Boolean): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: Char): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: CharArray): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.concatToString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: CharSequence?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: Any?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun insert(index: Int, value: String): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        this.string = this.string.substring(0, index) + value + this.string.substring(index)\n        return this\n    }\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun setLength(newLength: Int) {\n        if (newLength < 0) {\n            throw IllegalArgumentException(\"Negative new length: $newLength.\")\n        }\n\n        if (newLength <= length) {\n            string = string.substring(0, newLength)\n        } else {\n            for (i in length until newLength) {\n                string += '\\u0000'\n            }\n        }\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun substring(startIndex: Int): String {\n        AbstractList.checkPositionIndex(startIndex, length)\n\n        return string.substring(startIndex)\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun substring(startIndex: Int, endIndex: Int): String {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n\n        return string.substring(startIndex, endIndex)\n    }\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is always equal to the length of the string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    actual fun trimToSize() {\n        if (this.asDynamic()._capacity !== undefined) {\n            this.asDynamic()._capacity = length\n        }\n    }\n\n    override fun toString(): String = string\n\n    /**\n     * Clears the content of this string builder making it empty and returns this instance.\n     *\n     * @sample samples.text.Strings.clearStringBuilder\n     */\n    @SinceKotlin(\"1.3\")\n    public fun clear(): StringBuilder {\n        string = \"\"\n        return this\n    }\n\n    /**\n     * Sets the character at the specified [index] to the specified [value].\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public operator fun set(index: Int, value: Char) {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index + 1)\n    }\n\n    /**\n     * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to replace.\n     * @param endIndex the end (exclusive) of the range to replace.\n     * @param value the string to replace with.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        this.string = this.string.substring(0, startIndex) + value + this.string.substring(endIndex)\n        return this\n    }\n\n    private fun checkReplaceRange(startIndex: Int, endIndex: Int, length: Int) {\n        if (startIndex < 0 || startIndex > length) {\n            throw IndexOutOfBoundsException(\"startIndex: $startIndex, length: $length\")\n        }\n        if (startIndex > endIndex) {\n            throw IllegalArgumentException(\"startIndex($startIndex) > endIndex($endIndex)\")\n        }\n    }\n\n    /**\n     * Removes the character at the specified [index] from this string builder and returns this instance.\n     *\n     * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n     *\n     * @param index the index of `Char` to remove.\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun deleteAt(index: Int): StringBuilder {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + string.substring(index + 1)\n        return this\n    }\n\n    /**\n     * Removes characters in the specified range from this string builder and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to remove.\n     * @param endIndex the end (exclusive) of the range to remove.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun deleteRange(startIndex: Int, endIndex: Int): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        string = string.substring(0, startIndex) + string.substring(endIndex)\n        return this\n    }\n\n    /**\n     * Copies characters from this string builder into the [destination] character array.\n     *\n     * @param destination the array to copy to.\n     * @param destinationOffset the position in the array to copy to, 0 by default.\n     * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n     * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n     *  or when that index is out of the [destination] array indices range.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n        AbstractList.checkBoundsIndexes(destinationOffset, destinationOffset + endIndex - startIndex, destination.size)\n\n        var dstIndex = destinationOffset\n        for (index in startIndex until endIndex) {\n            destination[dstIndex++] = string[index]\n        }\n    }\n\n    /**\n     * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at specified [startIndex].\n     *\n     * @param value the array from which characters are appended.\n     * @param startIndex the beginning (inclusive) of the subarray to append.\n     * @param endIndex the end (exclusive) of the subarray to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        string += value.concatToString(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n     *  then characters are appended as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder {\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string += stringCsq.substring(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] array, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the array from which characters are inserted.\n     * @param startIndex the beginning (inclusive) of the subarray to insert.\n     * @param endIndex the end (exclusive) of the subarray to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, this.length)\n\n        string = string.substring(0, index) + value.concatToString(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which a subsequence is inserted. If [value] is `null`,\n     *  then characters will be inserted as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to insert.\n     * @param endIndex the end (exclusive) of the subsequence to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    public fun insertRange(index: Int, value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string = string.substring(0, index) + stringCsq.substring(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.clear(): StringBuilder = this.clear()\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun StringBuilder.set(index: Int, value: Char) = this.set(index, value)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder =\n    this.setRange(startIndex, endIndex, value)\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteAt(index: Int): StringBuilder = this.deleteAt(index)\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder = this.deleteRange(startIndex, endIndex)\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\", \"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) =\n    this.toCharArray(destination, destinationOffset, startIndex, endIndex)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n *  then characters are appended as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted. If [value] is `null`,\n *  then characters will be inserted as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n// actually \\s is enough to match all whitespace, but \\xA0 added because of different regexp behavior of Rhino used in Selenium tests\npublic actual fun Char.isWhitespace(): Boolean = toString().matches(\"[\\\\s\\\\xA0]\")\n\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toLowerCase(): Char = js(\"String.fromCharCode\")(toInt()).toLowerCase().charCodeAt(0).unsafeCast<Int>().toChar()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toUpperCase(): Char = js(\"String.fromCharCode\")(toInt()).toUpperCase().charCodeAt(0).unsafeCast<Int>().toChar()\n\n/**\n * Returns `true` if this character is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).\n */\npublic actual fun Char.isHighSurrogate(): Boolean = this in Char.MIN_HIGH_SURROGATE..Char.MAX_HIGH_SURROGATE\n\n/**\n * Returns `true` if this character is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).\n */\npublic actual fun Char.isLowSurrogate(): Boolean = this in Char.MIN_LOW_SURROGATE..Char.MAX_LOW_SURROGATE\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n\n/**\n * Returns `true` if the contents of this string is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\npublic actual fun String.toBoolean(): Boolean = toLowerCase() == \"true\"\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toByte(): Byte = toByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toByte(radix: Int): Byte = toByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toShort(): Short = toShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toShort(radix: Int): Short = toShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toInt(): Int = toIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toInt(radix: Int): Int = toIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toLong(): Long = toLongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toLong(radix: Int): Long = toLongOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Double] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toDouble(): Double = (+(this.asDynamic())).unsafeCast<Double>().also {\n    if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n        numberFormatError(this)\n}\n\n/**\n * Parses the string as a [Float] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloat(): Float = toDouble().unsafeCast<Float>()\n\n/**\n * Parses the string as a [Double] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\npublic actual fun String.toDoubleOrNull(): Double? = (+(this.asDynamic())).unsafeCast<Double>().takeIf {\n    !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n}\n\n/**\n * Parses the string as a [Float] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloatOrNull(): Float? = toDoubleOrNull().unsafeCast<Float?>()\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Byte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Short.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Int.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\nprivate fun String.isNaN(): Boolean = when (this.toLowerCase()) {\n    \"nan\", \"+nan\", \"-nan\" -> true\n    else -> false\n}\n\n/**\n * Checks whether the given [radix] is valid radix for string to number and number to string conversion.\n */\n@PublishedApi\ninternal actual fun checkRadix(radix: Int): Int {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"radix $radix was not in valid range 2..36\")\n    }\n    return radix\n}\n\ninternal actual fun digitOf(char: Char, radix: Int): Int = when {\n    char >= '0' && char <= '9' -> char - '0'\n    char >= 'A' && char <= 'Z' -> char - 'A' + 10\n    char >= 'a' && char <= 'z' -> char - 'a' + 10\n    else -> -1\n}.let { if (it >= radix) -1 else it }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Provides enumeration values to use to set regular expression options.\n */\npublic actual enum class RegexOption(val value: String) {\n    /** Enables case-insensitive matching. */\n    IGNORE_CASE(\"i\"),\n    /** Enables multiline mode.\n     *\n     * In multiline mode the expressions `^` and `$` match just after or just before,\n     * respectively, a line terminator or the end of the input sequence. */\n    MULTILINE(\"m\")\n}\n\n\n/**\n * Represents the results from a single capturing group within a [MatchResult] of [Regex].\n *\n * @param value The value of captured group.\n */\npublic actual data class MatchGroup(actual val value: String)\n\n\n/**\n * Represents a compiled regular expression.\n * Provides functions to match strings in text with a pattern, replace the found occurrences and split text around matches.\n *\n * For pattern syntax reference see [MDN RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions)\n * and [http://www.w3schools.com/jsref/jsref_obj_regexp.asp](https://www.w3schools.com/jsref/jsref_obj_regexp.asp).\n *\n * @constructor Creates a regular expression from the specified [pattern] string and the specified set of [options].\n */\npublic actual class Regex actual constructor(pattern: String, options: Set<RegexOption>) {\n\n    /** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n    public actual constructor(pattern: String, option: RegexOption) : this(pattern, setOf(option))\n\n    /** Creates a regular expression from the specified [pattern] string and the default options.  */\n    public actual constructor(pattern: String) : this(pattern, emptySet())\n\n\n    /** The pattern string of this regular expression. */\n    public actual val pattern: String = pattern\n    /** The set of options that were used to create this regular expression. */\n    public actual val options: Set<RegexOption> = options.toSet()\n    private val nativePattern: RegExp = RegExp(pattern, options.map { it.value }.joinToString(separator = \"\") + \"g\")\n\n    /** Indicates whether the regular expression matches the entire [input]. */\n    public actual infix fun matches(input: CharSequence): Boolean {\n        nativePattern.reset()\n        val match = nativePattern.exec(input.toString())\n        return match != null && match.index == 0 && nativePattern.lastIndex == input.length\n    }\n\n    /** Indicates whether the regular expression can find at least one match in the specified [input]. */\n    public actual fun containsMatchIn(input: CharSequence): Boolean {\n        nativePattern.reset()\n        return nativePattern.test(input.toString())\n    }\n\n    /** Returns the first match of a regular expression in the [input], beginning at the specified [startIndex].\n     *\n     * @param startIndex An index to start search with, by default 0. Must be not less than zero and not greater than `input.length()`\n     * @return An instance of [MatchResult] if match was found or `null` otherwise.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun find(input: CharSequence, startIndex: Int = 0): MatchResult? = nativePattern.findNext(input.toString(), startIndex)\n\n    /**\n     * Returns a sequence of all occurrences of a regular expression within the [input] string, beginning at the specified [startIndex].\n     *\n     * @sample samples.text.Regexps.findAll\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun findAll(input: CharSequence, startIndex: Int = 0): Sequence<MatchResult> =\n        generateSequence({ find(input, startIndex) }, { match -> match.next() })\n\n    /**\n     * Attempts to match the entire [input] CharSequence against the pattern.\n     *\n     * @return An instance of [MatchResult] if the entire input matches or `null` otherwise.\n     */\n    public actual fun matchEntire(input: CharSequence): MatchResult? {\n        if (pattern.startsWith('^') && pattern.endsWith('$'))\n            return find(input)\n        else\n            return Regex(\"^${pattern.trimStart('^').trimEnd('$')}$\", options).find(input)\n    }\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replace(input: CharSequence, replacement: String): String = input.toString().nativeReplace(nativePattern, replacement)\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with the result of\n     * the given function [transform] that takes [MatchResult] and returns a string to be used as a\n     * replacement for that match.\n     */\n    public actual inline fun replace(input: CharSequence, transform: (MatchResult) -> CharSequence): String {\n        var match = find(input)\n        if (match == null) return input.toString()\n\n        var lastStart = 0\n        val length = input.length\n        val sb = StringBuilder(length)\n        do {\n            val foundMatch = match!!\n            sb.append(input, lastStart, foundMatch.range.start)\n            sb.append(transform(foundMatch))\n            lastStart = foundMatch.range.endInclusive + 1\n            match = foundMatch.next()\n        } while (lastStart < length && match != null)\n\n        if (lastStart < length) {\n            sb.append(input, lastStart, length)\n        }\n\n        return sb.toString()\n    }\n\n    /**\n     * Replaces the first occurrence of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replaceFirst(input: CharSequence, replacement: String): String {\n        val nonGlobalOptions = options.map { it.value }.joinToString(separator = \"\")\n        return input.toString().nativeReplace(RegExp(pattern, nonGlobalOptions), replacement)\n    }\n\n    /**\n     * Splits the [input] CharSequence around matches of this regular expression.\n     *\n     * @param limit Non-negative value specifying the maximum number of substrings the string can be split to.\n     * Zero by default means no limit is set.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun split(input: CharSequence, limit: Int = 0): List<String> {\n        require(limit >= 0) { \"Limit must be non-negative, but was $limit\" }\n        val matches = findAll(input).let { if (limit == 0) it else it.take(limit - 1) }\n        val result = mutableListOf<String>()\n        var lastStart = 0\n\n        for (match in matches) {\n            result.add(input.subSequence(lastStart, match.range.start).toString())\n            lastStart = match.range.endInclusive + 1\n        }\n        result.add(input.subSequence(lastStart, input.length).toString())\n        return result\n    }\n\n\n    /**\n     * Returns the string representation of this regular expression, namely the [pattern] of this regular expression.\n     *\n     * Note that another regular expression constructed from the same pattern string may have different [options]\n     * and may match strings differently.\n     */\n    public override fun toString(): String = nativePattern.toString()\n\n    actual companion object {\n        /**\n         * Returns a regular expression that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun fromLiteral(literal: String): Regex = Regex(escape(literal))\n\n        /**\n         * Returns a regular expression pattern string that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun escape(literal: String): String = literal.nativeReplace(patternEscape, \"\\\\$&\")\n\n        /**\n         * Returns a literal replacement expression for the specified [literal] string.\n         * No characters of that string will have special meaning when it is used as a replacement string in [Regex.replace] function.\n         */\n        public actual fun escapeReplacement(literal: String): String = literal.nativeReplace(replacementEscape, \"$$$$\")\n\n        private val patternEscape = RegExp(\"\"\"[-\\\\^$*+?.()|[\\]{}]\"\"\", \"g\")\n        private val replacementEscape = RegExp(\"\"\"\\$\"\"\", \"g\")\n    }\n}\n\n/** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_sb3q2\\$\")\npublic fun Regex_0(pattern: String, option: RegexOption): Regex = Regex(pattern, setOf(option))\n\n/** Creates a regular expression from the specified [pattern] string and the default options.  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_61zpoe\\$\")\npublic fun Regex_1(pattern: String): Regex = Regex(pattern, emptySet())\n\n\n\n\nprivate fun RegExp.findNext(input: String, from: Int): MatchResult? {\n    this.lastIndex = from\n    val match = exec(input)\n    if (match == null) return null\n    val range = match.index..lastIndex - 1\n\n    return object : MatchResult {\n        override val range: IntRange = range\n        override val value: String\n            get() = match[0]!!\n\n        override val groups: MatchGroupCollection = object : MatchGroupCollection, AbstractCollection<MatchGroup?>() {\n            override val size: Int get() = match.length\n            override fun iterator(): Iterator<MatchGroup?> = indices.asSequence().map { this[it] }.iterator()\n            override fun get(index: Int): MatchGroup? = match[index]?.let { MatchGroup(it) }\n        }\n\n\n        private var groupValues_: List<String>? = null\n\n        override val groupValues: List<String>\n            get() {\n                if (groupValues_ == null) {\n                    groupValues_ = object : AbstractList<String>() {\n                        override val size: Int get() = match.length\n                        override fun get(index: Int): String = match[index] ?: \"\"\n                    }\n                }\n                return groupValues_!!\n            }\n\n        override fun next(): MatchResult? = this@findNext.findNext(input, if (range.isEmpty()) range.start + 1 else range.endInclusive + 1)\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns the greater of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Byte, b: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Short, b: Short): Short {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Int, b: Int): Int {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"DEPRECATION_ERROR\", \"NOTHING_TO_INLINE\")\npublic actual inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Float, b: Float): Float {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Double, b: Double): Double {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the smaller of two values.\n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Byte, b: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Short, b: Short): Short {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Int, b: Int): Int {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"DEPRECATION_ERROR\", \"NOTHING_TO_INLINE\")\npublic actual inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Float, b: Float): Float {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Double, b: Double): Double {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return Math.min(a, b, c)\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(ch: Char, fromIndex: Int): Int = nativeIndexOf(ch.toString(), fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(ch: Char, fromIndex: Int): Int = nativeLastIndexOf(ch.toString(), fromIndex)\n\n/**\n * Returns `true` if this string starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, 0)\n    else\n        return regionMatches(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this string starting at the specified offset [startIndex] starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, startIndex)\n    else\n        return regionMatches(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this string ends with the specified suffix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.endsWith(suffix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeEndsWith(suffix)\n    else\n        return regionMatches(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\npublic fun String.matches(regex: String): Boolean {\n    val result = this.match(regex)\n    return result != null && result.size != 0\n}\n\npublic actual fun CharSequence.isBlank(): Boolean = length == 0 || (if (this is String) this else this.toString()).matches(\"^[\\\\s\\\\xA0]+$\")\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean =\n    if (this == null)\n        other == null\n    else if (!ignoreCase)\n        this == other\n    else\n        other != null && this.toLowerCase() == other.toLowerCase()\n\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharSequence.regionMatches(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean =\n    regionMatchesImpl(thisOffset, other, otherOffset, length, ignoreCase)\n\n\n/**\n * Returns a copy of this string having its first letter uppercased, or the original string,\n * if it's empty or already starts with an upper case letter.\n *\n * @sample samples.text.Strings.capitalize\n */\npublic actual fun String.capitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toUpperCase() + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first letter lowercased, or the original string,\n * if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\npublic actual fun String.decapitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).toLowerCase() + substring(1) else this\n}\n\n/**\n * Returns a string containing this char sequence repeated [n] times.\n * @throws [IllegalArgumentException] when n < 0.\n */\npublic actual fun CharSequence.repeat(n: Int): String {\n    require(n >= 0) { \"Count 'n' must be non-negative, but was $n.\" }\n    return when (n) {\n        0 -> \"\"\n        1 -> this.toString()\n        else -> {\n            var result = \"\"\n            if (!isEmpty()) {\n                var s = this.toString()\n                var count = n\n                while (true) {\n                    if ((count and 1) == 1) {\n                        result += s\n                    }\n                    count = count ushr 1\n                    if (count == 0) {\n                        break\n                    }\n                    s += s\n                }\n            }\n            return result\n        }\n    }\n}\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"gi\" else \"g\"), Regex.escapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"gi\" else \"g\"), newChar.toString())\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"i\" else \"\"), Regex.escapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"i\" else \"\"), newChar.toString())\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic actual enum class DurationUnit(internal val scale: Double) {\n    /**\n     * Time unit representing one nanosecond, which is 1/1000 of a microsecond.\n     */\n    NANOSECONDS(1e0),\n    /**\n     * Time unit representing one microsecond, which is 1/1000 of a millisecond.\n     */\n    MICROSECONDS(1e3),\n    /**\n     * Time unit representing one millisecond, which is 1/1000 of a second.\n     */\n    MILLISECONDS(1e6),\n    /**\n     * Time unit representing one second.\n     */\n    SECONDS(1e9),\n    /**\n     * Time unit representing one minute.\n     */\n    MINUTES(60e9),\n    /**\n     * Time unit representing one hour.\n     */\n    HOURS(3600e9),\n    /**\n     * Time unit representing one day, which is always equal to 24 hours.\n     */\n    DAYS(86400e9);\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal actual fun convertDurationUnit(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double {\n    val sourceCompareTarget = sourceUnit.scale.compareTo(targetUnit.scale)\n    return when {\n        sourceCompareTarget > 0 -> value * (sourceUnit.scale / targetUnit.scale)\n        sourceCompareTarget < 0 -> value / (targetUnit.scale / sourceUnit.scale)\n        else -> value\n    }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport org.w3c.performance.GlobalPerformance\nimport org.w3c.performance.Performance\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal actual object MonotonicTimeSource : TimeSource {\n\n    private val actualSource: TimeSource = run {\n        val isNode: Boolean = js(\"typeof process !== 'undefined' && process.versions && !!process.versions.node\")\n\n        if (isNode)\n            HrTimeSource(js(\"process\").unsafeCast<Process>())\n        else\n            js(\"self\").unsafeCast<GlobalPerformance?>()?.performance?.let(::PerformanceTimeSource)\n                ?: DateNowTimeSource\n\n    }\n\n    override fun markNow(): TimeMark = actualSource.markNow()\n}\n\ninternal external interface Process {\n    fun hrtime(time: Array<Double> = definedExternally): Array<Double>\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal class HrTimeSource(val process: Process) : TimeSource {\n\n    override fun markNow(): TimeMark = object : TimeMark() {\n        val startedAt = process.hrtime()\n        override fun elapsedNow(): Duration =\n            process.hrtime(startedAt).let { (seconds, nanos) -> seconds.seconds + nanos.nanoseconds }\n    }\n\n    override fun toString(): String = \"TimeSource(process.hrtime())\"\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal class PerformanceTimeSource(val performance: Performance) : AbstractDoubleTimeSource(unit = DurationUnit.MILLISECONDS) {\n    override fun read(): Double = performance.now()\n    override fun toString(): String = \"TimeSource(self.performance.now())\"\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal object DateNowTimeSource : AbstractDoubleTimeSource(unit = DurationUnit.MILLISECONDS) {\n    override fun read(): Double = kotlin.js.Date.now()\n    override fun toString(): String = \"TimeSource(Date.now())\"\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.js.json\nimport kotlin.math.*\n\ninternal actual fun formatToExactDecimals(value: Double, decimals: Int): String {\n    val rounded = if (decimals == 0) {\n        value\n    } else {\n        val pow = 10.0.pow(decimals)\n        @Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\n        kotlin.js.Math.round(abs(value) * pow) / pow * sign(value)\n    }\n    return rounded.asDynamic().toFixed(decimals).unsafeCast<String>()\n}\n\ninternal actual fun formatUpToDecimals(value: Double, decimals: Int): String {\n    return value.asDynamic().toLocaleString(\"en-us\", json(\"maximumFractionDigits\" to decimals)).unsafeCast<String>()\n}\n\ninternal actual fun formatScientific(value: Double): String {\n    return value.asDynamic().toExponential(2).unsafeCast<String>()\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\nimport kotlin.js.JsName\n\n/**\n * Provides a skeletal implementation of the read-only [Collection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is covariant on its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractCollection<out E> protected constructor() : Collection<E> {\n    abstract override val size: Int\n    abstract override fun iterator(): Iterator<E>\n\n    override fun contains(element: @UnsafeVariance E): Boolean = any { it == element }\n\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean =\n        elements.all { contains(it) } // use when js will support bound refs: elements.all(this::contains)\n\n    override fun isEmpty(): Boolean = size == 0\n\n    override fun toString(): String = joinToString(\", \", \"[\", \"]\") {\n        if (it === this) \"(this Collection)\" else it.toString()\n    }\n\n    /**\n     * Returns new array of type `Array<Any?>` with the elements of this collection.\n     */\n    @JsName(\"toArray\")\n    protected open fun toArray(): Array<Any?> = copyToArrayImpl(this)\n\n    /**\n     * Fills the provided [array] or creates new array of the same type\n     * and fills it with the elements of this collection.\n     */\n    protected open fun <T> toArray(array: Array<T>): Array<T> = copyToArrayImpl(this, array)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [List] interface.\n *\n * This class is intended to help implementing read-only lists so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the list. The list is covariant on its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractList<out E> protected constructor() : AbstractCollection<E>(), List<E> {\n    abstract override val size: Int\n    abstract override fun get(index: Int): E\n\n    override fun iterator(): Iterator<E> = IteratorImpl()\n\n    override fun indexOf(element: @UnsafeVariance E): Int = indexOfFirst { it == element }\n\n    override fun lastIndexOf(element: @UnsafeVariance E): Int = indexOfLast { it == element }\n\n    override fun listIterator(): ListIterator<E> = ListIteratorImpl(0)\n\n    override fun listIterator(index: Int): ListIterator<E> = ListIteratorImpl(index)\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<E> = SubList(this, fromIndex, toIndex)\n\n    private class SubList<out E>(private val list: AbstractList<E>, private val fromIndex: Int, toIndex: Int) : AbstractList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun get(index: Int): E {\n            checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override val size: Int get() = _size\n    }\n\n    /**\n     * Compares this list with other list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = orderedHashCode(this)\n\n    private open inner class IteratorImpl : Iterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            return get(index++)\n        }\n    }\n\n    /**\n     * Implementation of [ListIterator] for abstract lists.\n     */\n    private open inner class ListIteratorImpl(index: Int) : IteratorImpl(), ListIterator<E> {\n\n        init {\n            checkPositionIndex(index, this@AbstractList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n            return get(--index)\n        }\n\n        override fun previousIndex(): Int = index - 1\n    }\n\n    internal companion object {\n        internal fun checkElementIndex(index: Int, size: Int) {\n            if (index < 0 || index >= size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkPositionIndex(index: Int, size: Int) {\n            if (index < 0 || index > size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkRangeIndexes(fromIndex: Int, toIndex: Int, size: Int) {\n            if (fromIndex < 0 || toIndex > size) {\n                throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex, size: $size\")\n            }\n            if (fromIndex > toIndex) {\n                throw IllegalArgumentException(\"fromIndex: $fromIndex > toIndex: $toIndex\")\n            }\n        }\n\n        internal fun checkBoundsIndexes(startIndex: Int, endIndex: Int, size: Int) {\n            if (startIndex < 0 || endIndex > size) {\n                throw IndexOutOfBoundsException(\"startIndex: $startIndex, endIndex: $endIndex, size: $size\")\n            }\n            if (startIndex > endIndex) {\n                throw IllegalArgumentException(\"startIndex: $startIndex > endIndex: $endIndex\")\n            }\n        }\n\n        internal fun orderedHashCode(c: Collection<*>): Int {\n            var hashCode = 1\n            for (e in c) {\n                hashCode = 31 * hashCode + (e?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun orderedEquals(c: Collection<*>, other: Collection<*>): Boolean {\n            if (c.size != other.size) return false\n\n            val otherIterator = other.iterator()\n            for (elem in c) {\n                val elemOther = otherIterator.next()\n                if (elem != elemOther) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Map] interface.\n *\n * The implementor is required to implement [entries] property, which should return read-only set of map entries.\n *\n * @param K the type of map keys. The map is invariant on its key type.\n * @param V the type of map values. The map is covariant on its value type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractMap<K, out V> protected constructor() : Map<K, V> {\n\n    override fun containsKey(key: K): Boolean {\n        return implFindEntry(key) != null\n    }\n\n    override fun containsValue(value: @UnsafeVariance V): Boolean = entries.any { it.value == value }\n\n    internal fun containsEntry(entry: Map.Entry<*, *>?): Boolean {\n        // since entry comes from @UnsafeVariance parameters it can be virtually anything\n        if (entry !is Map.Entry<*, *>) return false\n        val key = entry.key\n        val value = entry.value\n        val ourValue = get(key)\n\n        if (value != ourValue) {\n            return false\n        }\n\n        // Perhaps it was null and we don't contain the key?\n        if (ourValue == null && !containsKey(key)) {\n            return false\n        }\n\n        return true\n    }\n\n\n    /**\n     * Compares this map with other instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [Map] of the same size, all entries of which are contained in the [entries] set of this map.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Map<*, *>) return false\n        if (size != other.size) return false\n\n        return other.entries.all { containsEntry(it) }\n    }\n\n    override operator fun get(key: K): V? = implFindEntry(key)?.value\n\n\n    /**\n     * Returns the hash code value for this map.\n     *\n     * It is the same as the hashCode of [entries] set.\n     */\n    override fun hashCode(): Int = entries.hashCode()\n\n    override fun isEmpty(): Boolean = size == 0\n    override val size: Int get() = entries.size\n\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     *\n     * Accessing this property first time creates a keys view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val keys: Set<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractSet<K>() {\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): Iterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _keys!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _keys: Set<K>? = null\n\n\n    override fun toString(): String = entries.joinToString(\", \", \"{\", \"}\") { toString(it) }\n\n    private fun toString(entry: Map.Entry<K, V>): String = toString(entry.key) + \"=\" + toString(entry.value)\n\n    private fun toString(o: Any?): String = if (o === this) \"(this Map)\" else o.toString()\n\n    /**\n     * Returns a read-only [Collection] of all values in this map.\n     *\n     * Accessing this property first time creates a values view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val values: Collection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractCollection<V>() {\n                    override operator fun contains(element: @UnsafeVariance V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): Iterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _values!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _values: Collection<V>? = null\n\n    private fun implFindEntry(key: K): Map.Entry<K, V>? = entries.firstOrNull { it.key == key }\n\n    internal companion object {\n\n        internal fun entryHashCode(e: Map.Entry<*, *>): Int = with(e) { (key?.hashCode() ?: 0) xor (value?.hashCode() ?: 0) }\n        internal fun entryToString(e: Map.Entry<*, *>): String = with(e) { \"$key=$value\" }\n        internal fun entryEquals(e: Map.Entry<*, *>, other: Any?): Boolean {\n            if (other !is Map.Entry<*, *>) return false\n            return e.key == other.key && e.value == other.value\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Set] interface.\n *\n * This class is intended to help implementing read-only sets so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the set. The set is covariant on its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractSet<out E> protected constructor() : AbstractCollection<E>(), Set<E> {\n\n    /**\n     * Compares this set with other set instance with the unordered structural equality.\n     *\n     * @return true, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = unorderedHashCode(this)\n\n    internal companion object {\n        internal fun unorderedHashCode(c: Collection<*>): Int {\n            var hashCode = 0\n            for (element in c) {\n                hashCode += (element?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun setEquals(c: Set<*>, other: Set<*>): Boolean {\n            if (c.size != other.size) return false\n            return c.containsAll(other)\n        }\n    }\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Data class representing a value from a collection or sequence, along with its index in that collection or sequence.\n *\n * @property value the underlying value.\n * @property index the index of the value in the collection or sequence.\n */\npublic data class IndexedValue<out T>(public val index: Int, public val value: T)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n/**\n * Returns the value for the given key, or the implicit default value for this map.\n * By default no implicit value is provided for maps and a [NoSuchElementException] is thrown.\n * To create a map with implicit default value use [withDefault] method.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and no implicit default was provided for that map.\n */\n@kotlin.jvm.JvmName(\"getOrImplicitDefaultNullable\")\n@PublishedApi\ninternal fun <K, V> Map<K, V>.getOrImplicitDefault(key: K): V {\n    if (this is MapWithDefault)\n        return this.getOrImplicitDefault(key)\n\n    return getOrElseNullable(key, { throw NoSuchElementException(\"Key $key is missing in the map.\") })\n}\n\n/**\n * Returns a wrapper of this read-only map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\npublic fun <K, V> Map<K, V>.withDefault(defaultValue: (key: K) -> V): Map<K, V> =\n    when (this) {\n        is MapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MapWithDefaultImpl(this, defaultValue)\n    }\n\n/**\n * Returns a wrapper of this mutable map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\n@kotlin.jvm.JvmName(\"withDefaultMutable\")\npublic fun <K, V> MutableMap<K, V>.withDefault(defaultValue: (key: K) -> V): MutableMap<K, V> =\n    when (this) {\n        is MutableMapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MutableMapWithDefaultImpl(this, defaultValue)\n    }\n\n\nprivate interface MapWithDefault<K, out V> : Map<K, V> {\n    public val map: Map<K, V>\n    public fun getOrImplicitDefault(key: K): V\n}\n\nprivate interface MutableMapWithDefault<K, V> : MutableMap<K, V>, MapWithDefault<K, V> {\n    public override val map: MutableMap<K, V>\n}\n\n\nprivate class MapWithDefaultImpl<K, out V>(public override val map: Map<K, V>, private val default: (key: K) -> V) : MapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: Set<K> get() = map.keys\n    override val values: Collection<V> get() = map.values\n    override val entries: Set<Map.Entry<K, V>> get() = map.entries\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\nprivate class MutableMapWithDefaultImpl<K, V>(public override val map: MutableMap<K, V>, private val default: (key: K) -> V) : MutableMapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: MutableSet<K> get() = map.keys\n    override val values: MutableCollection<V> get() = map.values\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>> get() = map.entries\n\n    override fun put(key: K, value: V): V? = map.put(key, value)\n    override fun remove(key: K): V? = map.remove(key)\n    override fun putAll(from: Map<out K, V>) = map.putAll(from)\n    override fun clear() = map.clear()\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n@file:UseExperimental(ExperimentalTypeInference::class)\n\npackage kotlin.sequences\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.experimental.ExperimentalTypeInference\n\n/**\n * Builds a [Sequence] lazily yielding values one by one.\n *\n * @see kotlin.sequences.generateSequence\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> sequence(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(block) }\n\n@SinceKotlin(\"1.3\")\n@Deprecated(\"Use 'sequence { }' function instead.\", ReplaceWith(\"sequence(builderAction)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> buildSequence(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(builderAction) }\n\n/**\n * Builds an [Iterator] lazily yielding values one by one.\n *\n * @sample samples.collections.Sequences.Building.buildIterator\n * @sample samples.collections.Iterables.Building.iterable\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> iterator(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Iterator<T> {\n    val iterator = SequenceBuilderIterator<T>()\n    iterator.nextStep = block.createCoroutineUnintercepted(receiver = iterator, completion = iterator)\n    return iterator\n}\n\n@SinceKotlin(\"1.3\")\n@Deprecated(\"Use 'iterator { }' function instead.\", ReplaceWith(\"iterator(builderAction)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> buildIterator(@BuilderInference noinline builderAction: suspend SequenceScope<T>.() -> Unit): Iterator<T> = iterator(builderAction)\n\n/**\n * The scope for yielding values of a [Sequence] or an [Iterator], provides [yield] and [yieldAll] suspension functions.\n *\n * @see sequence\n * @see iterator\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.3\")\npublic abstract class SequenceScope<in T> internal constructor() {\n    /**\n     * Yields a value to the [Iterator] being built and suspends\n     * until the next value is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n     */\n    public abstract suspend fun yield(value: T)\n\n    /**\n     * Yields all values from the `iterator` to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence of values returned by the given iterator can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public abstract suspend fun yieldAll(iterator: Iterator<T>)\n\n    /**\n     * Yields a collections of values to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(elements: Iterable<T>) {\n        if (elements is Collection && elements.isEmpty()) return\n        return yieldAll(elements.iterator())\n    }\n\n    /**\n     * Yields potentially infinite sequence of values  to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(sequence: Sequence<T>) = yieldAll(sequence.iterator())\n}\n\n@Deprecated(\"Use SequenceScope class instead.\", ReplaceWith(\"SequenceScope<T>\"), level = DeprecationLevel.ERROR)\npublic typealias SequenceBuilder<T> = SequenceScope<T>\n\nprivate typealias State = Int\n\nprivate const val State_NotReady: State = 0\nprivate const val State_ManyNotReady: State = 1\nprivate const val State_ManyReady: State = 2\nprivate const val State_Ready: State = 3\nprivate const val State_Done: State = 4\nprivate const val State_Failed: State = 5\n\nprivate class SequenceBuilderIterator<T> : SequenceScope<T>(), Iterator<T>, Continuation<Unit> {\n    private var state = State_NotReady\n    private var nextValue: T? = null\n    private var nextIterator: Iterator<T>? = null\n    var nextStep: Continuation<Unit>? = null\n\n    override fun hasNext(): Boolean {\n        while (true) {\n            when (state) {\n                State_NotReady -> {}\n                State_ManyNotReady ->\n                    if (nextIterator!!.hasNext()) {\n                        state = State_ManyReady\n                        return true\n                    } else {\n                        nextIterator = null\n                    }\n                State_Done -> return false\n                State_Ready, State_ManyReady -> return true\n                else -> throw exceptionalState()\n            }\n\n            state = State_Failed\n            val step = nextStep!!\n            nextStep = null\n            step.resume(Unit)\n        }\n    }\n\n    override fun next(): T {\n        when (state) {\n            State_NotReady, State_ManyNotReady -> return nextNotReady()\n            State_ManyReady -> {\n                state = State_ManyNotReady\n                return nextIterator!!.next()\n            }\n            State_Ready -> {\n                state = State_NotReady\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextValue as T\n                nextValue = null\n                return result\n            }\n            else -> throw exceptionalState()\n        }\n    }\n\n    private fun nextNotReady(): T {\n        if (!hasNext()) throw NoSuchElementException() else return next()\n    }\n\n    private fun exceptionalState(): Throwable = when (state) {\n        State_Done -> NoSuchElementException()\n        State_Failed -> IllegalStateException(\"Iterator has failed.\")\n        else -> IllegalStateException(\"Unexpected state of the iterator: $state\")\n    }\n\n\n    override suspend fun yield(value: T) {\n        nextValue = value\n        state = State_Ready\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    override suspend fun yieldAll(iterator: Iterator<T>) {\n        if (!iterator.hasNext()) return\n        nextIterator = iterator\n        state = State_ManyReady\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    // Completion continuation implementation\n    override fun resumeWith(result: Result<Unit>) {\n        result.getOrThrow() // just rethrow exception if it is there\n        state = State_Done\n    }\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Marks coroutine context element that intercepts coroutine continuations.\n * The coroutines framework uses [ContinuationInterceptor.Key] to retrieve the interceptor and\n * intercepts all coroutine continuations with [interceptContinuation] invocations.\n *\n * [ContinuationInterceptor] behaves like a [polymorphic element][AbstractCoroutineContextKey], meaning that\n * its implementation delegates [get][CoroutineContext.Element.get] and [minusKey][CoroutineContext.Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n * [ContinuationInterceptor] subtypes can be extracted from the coroutine context using either [ContinuationInterceptor.Key]\n * or subtype key if it extends [AbstractCoroutineContextKey].\n */\n@SinceKotlin(\"1.3\")\npublic interface ContinuationInterceptor : CoroutineContext.Element {\n    /**\n     * The key that defines *the* context interceptor.\n     */\n    companion object Key : CoroutineContext.Key<ContinuationInterceptor>\n\n    /**\n     * Returns continuation that wraps the original [continuation], thus intercepting all resumptions.\n     * This function is invoked by coroutines framework when needed and the resulting continuations are\n     * cached internally per each instance of the original [continuation].\n     *\n     * This function may simply return original [continuation] if it does not want to intercept this particular continuation.\n     *\n     * When the original [continuation] completes, coroutine framework invokes [releaseInterceptedContinuation]\n     * with the resulting continuation if it was intercepted, that is if `interceptContinuation` had previously\n     * returned a different continuation instance.\n     */\n    public fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>\n\n    /**\n     * Invoked for the continuation instance returned by [interceptContinuation] when the original\n     * continuation completes and will not be used anymore. This function is invoked only if [interceptContinuation]\n     * had returned a different continuation instance from the one it was invoked with.\n     *\n     * Default implementation does nothing.\n     *\n     * @param continuation Continuation instance returned by this interceptor's [interceptContinuation] invocation.\n     */\n    public fun releaseInterceptedContinuation(continuation: Continuation<*>) {\n        /* do nothing by default */\n    }\n\n    public override operator fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? {\n        // getPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            @Suppress(\"UNCHECKED_CAST\")\n            return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n        }\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (ContinuationInterceptor === key) this as E else null\n    }\n\n\n    public override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext {\n        // minusPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n        }\n        return if (ContinuationInterceptor === key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Persistent context for the coroutine. It is an indexed set of [Element] instances.\n * An indexed set is a mix between a set and a map.\n * Every element in this set has a unique [Key].\n */\n@SinceKotlin(\"1.3\")\npublic interface CoroutineContext {\n    /**\n     * Returns the element with the given [key] from this context or `null`.\n     */\n    public operator fun <E : Element> get(key: Key<E>): E?\n\n    /**\n     * Accumulates entries of this context starting with [initial] value and applying [operation]\n     * from left to right to current accumulator value and each element of this context.\n     */\n    public fun <R> fold(initial: R, operation: (R, Element) -> R): R\n\n    /**\n     * Returns a context containing elements from this context and elements from  other [context].\n     * The elements from this context with the same key as in the other one are dropped.\n     */\n    public operator fun plus(context: CoroutineContext): CoroutineContext =\n        if (context === EmptyCoroutineContext) this else // fast path -- avoid lambda creation\n            context.fold(this) { acc, element ->\n                val removed = acc.minusKey(element.key)\n                if (removed === EmptyCoroutineContext) element else {\n                    // make sure interceptor is always last in the context (and thus is fast to get when present)\n                    val interceptor = removed[ContinuationInterceptor]\n                    if (interceptor == null) CombinedContext(removed, element) else {\n                        val left = removed.minusKey(ContinuationInterceptor)\n                        if (left === EmptyCoroutineContext) CombinedContext(element, interceptor) else\n                            CombinedContext(CombinedContext(left, element), interceptor)\n                    }\n                }\n            }\n\n    /**\n     * Returns a context containing elements from this context, but without an element with\n     * the specified [key].\n     */\n    public fun minusKey(key: Key<*>): CoroutineContext\n\n    /**\n     * Key for the elements of [CoroutineContext]. [E] is a type of element with this key.\n     */\n    public interface Key<E : Element>\n\n    /**\n     * An element of the [CoroutineContext]. An element of the coroutine context is a singleton context by itself.\n     */\n    public interface Element : CoroutineContext {\n        /**\n         * A key of this coroutine context element.\n         */\n        public val key: Key<*>\n\n        public override operator fun <E : Element> get(key: Key<E>): E? =\n            @Suppress(\"UNCHECKED_CAST\")\n            if (this.key == key) this as E else null\n\n        public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n            operation(initial, this)\n\n        public override fun minusKey(key: Key<*>): CoroutineContext =\n            if (this.key == key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.CoroutineContext.Element\nimport kotlin.coroutines.CoroutineContext.Key\n\n/**\n * Base class for [CoroutineContext.Element] implementations.\n */\n@SinceKotlin(\"1.3\")\npublic abstract class AbstractCoroutineContextElement(public override val key: Key<*>) : Element\n\n/**\n * Base class for [CoroutineContext.Key] associated with polymorphic [CoroutineContext.Element] implementation.\n * Polymorphic element implementation implies delegating its [get][Element.get] and [minusKey][Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n *\n * Polymorphic elements can be extracted from the coroutine context using both element key and its supertype key.\n * Example of polymorphic elements:\n * ```\n * open class BaseElement : CoroutineContext.Element {\n *     companion object Key : CoroutineContext.Key<BaseElement>\n *     override val key: CoroutineContext.Key<*> get() = Key\n *     // It is important to use getPolymorphicKey and minusPolymorphicKey\n *     override fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? = getPolymorphicElement(key)\n *     override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext = minusPolymorphicKey(key)\n * }\n *\n * class DerivedElement : BaseElement() {\n *     companion object Key : AbstractCoroutineContextKey<BaseElement, DerivedElement>(BaseElement, { it as? DerivedElement })\n * }\n * // Now it is possible to query both `BaseElement` and `DerivedElement`\n * someContext[BaseElement] // Returns BaseElement?, non-null both for BaseElement and DerivedElement instances\n * someContext[DerivedElement] // Returns DerivedElement?, non-null only for DerivedElement instance\n * ```\n * @param B base class of a polymorphic element\n * @param baseKey an instance of base key\n * @param E element type associated with the current key\n * @param safeCast a function that can safely cast abstract [CoroutineContext.Element] to the concrete [E] type\n *                 and return the element if it is a subtype of [E] or `null` otherwise.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic abstract class AbstractCoroutineContextKey<B : Element, E : B>(\n    baseKey: Key<B>,\n    private val safeCast: (element: Element) -> E?\n) : Key<E> {\n    private val topmostKey: Key<*> = if (baseKey is AbstractCoroutineContextKey<*, *>) baseKey.topmostKey else baseKey\n\n    internal fun tryCast(element: Element): E? = safeCast(element)\n    internal fun isSubKey(key: Key<*>): Boolean = key === this || topmostKey === key\n}\n\n/**\n * Returns the current element is it is associated with the given [key] in a polymorphic manner or `null` otherwise.\n * This method returns non-null value if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <E : Element> Element.getPolymorphicElement(key: Key<E>): E? {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return if (this.key === key) this as E else null\n}\n\n/**\n * Returns empty coroutine context if the element is associated with the given [key] in a polymorphic manner\n * or `null` otherwise.\n * This method returns empty context if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Element.minusPolymorphicKey(key: Key<*>): CoroutineContext {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n    }\n    return if (this.key === key) EmptyCoroutineContext else this\n}\n\n/**\n * An empty coroutine context.\n */\n@SinceKotlin(\"1.3\")\npublic object EmptyCoroutineContext : CoroutineContext, Serializable {\n    private const val serialVersionUID: Long = 0\n    private fun readResolve(): Any = EmptyCoroutineContext\n\n    public override fun <E : Element> get(key: Key<E>): E? = null\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R = initial\n    public override fun plus(context: CoroutineContext): CoroutineContext = context\n    public override fun minusKey(key: Key<*>): CoroutineContext = this\n    public override fun hashCode(): Int = 0\n    public override fun toString(): String = \"EmptyCoroutineContext\"\n}\n\n//--------------------- internal impl ---------------------\n\n// this class is not exposed, but is hidden inside implementations\n// this is a left-biased list, so that `plus` works naturally\n@SinceKotlin(\"1.3\")\ninternal class CombinedContext(\n    private val left: CoroutineContext,\n    private val element: Element\n) : CoroutineContext, Serializable {\n\n    override fun <E : Element> get(key: Key<E>): E? {\n        var cur = this\n        while (true) {\n            cur.element[key]?.let { return it }\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return next[key]\n            }\n        }\n    }\n\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n        operation(left.fold(initial, operation), element)\n\n    public override fun minusKey(key: Key<*>): CoroutineContext {\n        element[key]?.let { return left }\n        val newLeft = left.minusKey(key)\n        return when {\n            newLeft === left -> this\n            newLeft === EmptyCoroutineContext -> element\n            else -> CombinedContext(newLeft, element)\n        }\n    }\n\n    private fun size(): Int {\n        var cur = this\n        var size = 2\n        while (true) {\n            cur = cur.left as? CombinedContext ?: return size\n            size++\n        }\n    }\n\n    private fun contains(element: Element): Boolean =\n        get(element.key) == element\n\n    private fun containsAll(context: CombinedContext): Boolean {\n        var cur = context\n        while (true) {\n            if (!contains(cur.element)) return false\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return contains(next as Element)\n            }\n        }\n    }\n\n    override fun equals(other: Any?): Boolean =\n        this === other || other is CombinedContext && other.size() == size() && other.containsAll(this)\n\n    override fun hashCode(): Int = left.hashCode() + element.hashCode()\n\n    override fun toString(): String =\n        \"[\" + fold(\"\") { acc, element ->\n            if (acc.isEmpty()) element.toString() else \"$acc, $element\"\n        } + \"]\"\n\n    private fun writeReplace(): Any {\n        val n = size()\n        val elements = arrayOfNulls<CoroutineContext>(n)\n        var index = 0\n        fold(Unit) { _, element -> elements[index++] = element }\n        check(index == n)\n        @Suppress(\"UNCHECKED_CAST\")\n        return Serialized(elements as Array<CoroutineContext>)\n    }\n\n    private class Serialized(val elements: Array<CoroutineContext>) : Serializable {\n        companion object {\n            private const val serialVersionUID: Long = 0L\n        }\n\n        private fun readResolve(): Any = elements.fold(EmptyCoroutineContext, CoroutineContext::plus)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"IntrinsicsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Obtains the current continuation instance inside suspend functions and either suspends\n * currently running coroutine or returns result immediately without suspension.\n *\n * If the [block] returns the special [COROUTINE_SUSPENDED] value, it means that suspend function did suspend the execution and will\n * not return any result immediately. In this case, the [Continuation] provided to the [block] shall be\n * resumed by invoking [Continuation.resumeWith] at some moment in the\n * future when the result becomes available to resume the computation.\n *\n * Otherwise, the return value of the [block] must have a type assignable to [T] and represents the result of this suspend function.\n * It means that the execution was not suspended and the [Continuation] provided to the [block] shall not be invoked.\n * As the result type of the [block] is declared as `Any?` and cannot be correctly type-checked,\n * its proper return type remains on the conscience of the suspend function's author.\n *\n * Invocation of [Continuation.resumeWith] resumes coroutine directly in the invoker's thread without going through the\n * [ContinuationInterceptor] that might be present in the coroutine's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n *\n * Note that it is not recommended to call either [Continuation.resume] nor [Continuation.resumeWithException] functions synchronously\n * in the same stackframe where suspension function is run. Use [suspendCoroutine] as a safer way to obtain current\n * continuation instance.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\n@Suppress(\"UNUSED_PARAMETER\", \"RedundantSuspendModifier\")\npublic suspend inline fun <T> suspendCoroutineUninterceptedOrReturn(crossinline block: (Continuation<T>) -> Any?): T =\n    throw NotImplementedError(\"Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic\")\n\n/**\n * This value is used as a return value of [suspendCoroutineUninterceptedOrReturn] `block` argument to state that\n * the execution was suspended and will not return any result immediately.\n *\n * **Note: this value should not be used in general code.** Using it outside of the context of\n * `suspendCoroutineUninterceptedOrReturn` function return value  (including, but not limited to,\n * storing this value in other properties, returning it from other functions, etc)\n * can lead to unspecified behavior of the code.\n */\n// It is implemented as property with getter to avoid ProGuard <clinit> problem with multifile IntrinsicsKt class\n@SinceKotlin(\"1.3\")\npublic val COROUTINE_SUSPENDED: Any get() = CoroutineSingletons.COROUTINE_SUSPENDED\n\n// Using enum here ensures two important properties:\n//  1. It makes SafeContinuation serializable with all kinds of serialization frameworks (since all of them natively support enums)\n//  2. It improves debugging experience, since you clearly see toString() value of those objects and what package they come from\n@SinceKotlin(\"1.3\")\n@PublishedApi // This class is Published API via serialized representation of SafeContinuation, don't rename/move\ninternal enum class CoroutineSingletons { COROUTINE_SUSPENDED, UNDECIDED, RESUMED }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.nextDown\n\n/**\n * An abstract class that is implemented by random number generator algorithms.\n *\n * The companion object [Random.Default] is the default instance of [Random].\n *\n * To get a seeded instance of random generator use [Random] function.\n *\n * @sample samples.random.Randoms.defaultRandom\n */\n@SinceKotlin(\"1.3\")\npublic abstract class Random {\n\n    /**\n     * Gets the next random [bitCount] number of bits.\n     *\n     * Generates an `Int` whose lower [bitCount] bits are filled with random values and the remaining upper bits are zero.\n     *\n     * @param bitCount number of bits to generate, must be in range 0..32, otherwise the behavior is unspecified.\n     */\n    public abstract fun nextBits(bitCount: Int): Int\n\n    /**\n     * Gets the next random `Int` from the random number generator.\n     *\n     * Generates an `Int` random value uniformly distributed between `Int.MIN_VALUE` and `Int.MAX_VALUE` (inclusive).\n     */\n    public open fun nextInt(): Int = nextBits(32)\n\n    /**\n     * Gets the next random non-negative `Int` from the random number generator less than the specified [until] bound.\n     *\n     * Generates an `Int` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     */\n    public open fun nextInt(until: Int): Int = nextInt(0, until)\n\n    /**\n     * Gets the next random `Int` from the random number generator in the specified range.\n     *\n     * Generates an `Int` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     */\n    public open fun nextInt(from: Int, until: Int): Int {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0 || n == Int.MIN_VALUE) {\n            val rnd = if (n and -n == n) {\n                val bitCount = fastLog2(n)\n                nextBits(bitCount)\n            } else {\n                var v: Int\n                do {\n                    val bits = nextInt().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextInt()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random `Long` from the random number generator.\n     *\n     * Generates a `Long` random value uniformly distributed between `Long.MIN_VALUE` and `Long.MAX_VALUE` (inclusive).\n     */\n    public open fun nextLong(): Long = nextInt().toLong().shl(32) + nextInt()\n\n    /**\n     * Gets the next random non-negative `Long` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Long` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     */\n    public open fun nextLong(until: Long): Long = nextLong(0, until)\n\n    /**\n     * Gets the next random `Long` from the random number generator in the specified range.\n     *\n     * Generates a `Long` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     */\n    public open fun nextLong(from: Long, until: Long): Long {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0) {\n            val rnd: Long\n            if (n and -n == n) {\n                val nLow = n.toInt()\n                val nHigh = (n ushr 32).toInt()\n                rnd = when {\n                    nLow != 0 -> {\n                        val bitCount = fastLog2(nLow)\n                        // toUInt().toLong()\n                        nextBits(bitCount).toLong() and 0xFFFF_FFFF\n                    }\n                    nHigh == 1 ->\n                        // toUInt().toLong()\n                        nextInt().toLong() and 0xFFFF_FFFF\n                    else -> {\n                        val bitCount = fastLog2(nHigh)\n                        nextBits(bitCount).toLong().shl(32) + nextInt()\n                    }\n                }\n            } else {\n                var v: Long\n                do {\n                    val bits = nextLong().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                rnd = v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextLong()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random [Boolean] value.\n     */\n    public open fun nextBoolean(): Boolean = nextBits(1) != 0\n\n    /**\n     * Gets the next random [Double] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     */\n    public open fun nextDouble(): Double = doubleFromParts(nextBits(26), nextBits(27))\n\n    /**\n     * Gets the next random non-negative `Double` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Double` random value uniformly distributed between 0 (inclusive) and [until] (exclusive).\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     */\n    public open fun nextDouble(until: Double): Double = nextDouble(0.0, until)\n\n    /**\n     * Gets the next random `Double` from the random number generator in the specified range.\n     *\n     * Generates a `Double` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * [from] and [until] must be finite otherwise the behavior is unspecified.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     */\n    public open fun nextDouble(from: Double, until: Double): Double {\n        checkRangeBounds(from, until)\n        val size = until - from\n        val r = if (size.isInfinite() && from.isFinite() && until.isFinite()) {\n            val r1 = nextDouble() * (until / 2 - from / 2)\n            from + r1 + r1\n        } else {\n            from + nextDouble() * size\n        }\n        return if (r >= until) until.nextDown() else r\n    }\n\n    /**\n     * Gets the next random [Float] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     */\n    public open fun nextFloat(): Float = nextBits(24) / (1 shl 24).toFloat()\n\n    /**\n     * Fills a subrange of the specified byte [array] starting from [fromIndex] inclusive and ending [toIndex] exclusive\n     * with random bytes.\n     *\n     * @return [array] with the subrange filled with random bytes.\n     */\n    public open fun nextBytes(array: ByteArray, fromIndex: Int = 0, toIndex: Int = array.size): ByteArray {\n        require(fromIndex in 0..array.size && toIndex in 0..array.size) { \"fromIndex ($fromIndex) or toIndex ($toIndex) are out of range: 0..${array.size}.\" }\n        require(fromIndex <= toIndex) { \"fromIndex ($fromIndex) must be not greater than toIndex ($toIndex).\" }\n\n        val steps = (toIndex - fromIndex) / 4\n\n        var position = fromIndex\n        repeat(steps) {\n            val v = nextInt()\n            array[position] = v.toByte()\n            array[position + 1] = v.ushr(8).toByte()\n            array[position + 2] = v.ushr(16).toByte()\n            array[position + 3] = v.ushr(24).toByte()\n            position += 4\n        }\n\n        val remainder = toIndex - position\n        val vr = nextBits(remainder * 8)\n        for (i in 0 until remainder) {\n            array[position + i] = vr.ushr(i * 8).toByte()\n        }\n\n        return array\n    }\n\n    /**\n     * Fills the specified byte [array] with random bytes and returns it.\n     *\n     * @return [array] filled with random bytes.\n     */\n    public open fun nextBytes(array: ByteArray): ByteArray = nextBytes(array, 0, array.size)\n\n    /**\n     * Creates a byte array of the specified [size], filled with random bytes.\n     */\n    public open fun nextBytes(size: Int): ByteArray = nextBytes(ByteArray(size))\n\n\n    /**\n     * The default random number generator.\n     *\n     * On JVM this generator is thread-safe, its methods can be invoked from multiple threads.\n     *\n     * @sample samples.random.Randoms.defaultRandom\n     */\n    companion object Default : Random() {\n\n        private val defaultRandom: Random = defaultPlatformRandom()\n\n        override fun nextBits(bitCount: Int): Int = defaultRandom.nextBits(bitCount)\n        override fun nextInt(): Int = defaultRandom.nextInt()\n        override fun nextInt(until: Int): Int = defaultRandom.nextInt(until)\n        override fun nextInt(from: Int, until: Int): Int = defaultRandom.nextInt(from, until)\n\n        override fun nextLong(): Long = defaultRandom.nextLong()\n        override fun nextLong(until: Long): Long = defaultRandom.nextLong(until)\n        override fun nextLong(from: Long, until: Long): Long = defaultRandom.nextLong(from, until)\n\n        override fun nextBoolean(): Boolean = defaultRandom.nextBoolean()\n\n        override fun nextDouble(): Double = defaultRandom.nextDouble()\n        override fun nextDouble(until: Double): Double = defaultRandom.nextDouble(until)\n        override fun nextDouble(from: Double, until: Double): Double = defaultRandom.nextDouble(from, until)\n\n        override fun nextFloat(): Float = defaultRandom.nextFloat()\n\n        override fun nextBytes(array: ByteArray): ByteArray = defaultRandom.nextBytes(array)\n        override fun nextBytes(size: Int): ByteArray = defaultRandom.nextBytes(size)\n        override fun nextBytes(array: ByteArray, fromIndex: Int, toIndex: Int): ByteArray = defaultRandom.nextBytes(array, fromIndex, toIndex)\n\n        @Deprecated(\"Use Default companion object instead\", level = DeprecationLevel.HIDDEN)\n        @Suppress(\"DEPRECATION_ERROR\")\n        @kotlin.jvm.JvmField\n        public val Companion: Random.Companion = Random.Companion\n    }\n\n    @Deprecated(\"Use Default companion object instead\", level = DeprecationLevel.HIDDEN)\n    public object Companion : Random() {\n        override fun nextBits(bitCount: Int): Int = Default.nextBits(bitCount)\n    }\n}\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Int` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Int): Random = XorWowRandom(seed, seed.shr(31))\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Long` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Long): Random = XorWowRandom(seed.toInt(), seed.shr(32).toInt())\n\n\n\n/**\n * Gets the next random `Int` from the random number generator in the specified [range].\n *\n * Generates an `Int` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextInt(range: IntRange): Int = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Int.MAX_VALUE -> nextInt(range.first, range.last + 1)\n    range.first > Int.MIN_VALUE -> nextInt(range.first - 1, range.last) + 1\n    else -> nextInt()\n}\n\n/**\n * Gets the next random `Long` from the random number generator in the specified [range].\n *\n * Generates a `Long` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextLong(range: LongRange): Long = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Long.MAX_VALUE -> nextLong(range.first, range.last + 1)\n    range.first > Long.MIN_VALUE -> nextLong(range.first - 1, range.last) + 1\n    else -> nextLong()\n}\n\n\ninternal expect fun defaultPlatformRandom(): Random\ninternal expect fun doubleFromParts(hi26: Int, low27: Int): Double\n\n@UseExperimental(ExperimentalStdlibApi::class)\ninternal fun fastLog2(value: Int): Int = 31 - value.countLeadingZeroBits()\n\n/** Takes upper [bitCount] bits (0..32) from this number. */\ninternal fun Int.takeUpperBits(bitCount: Int): Int =\n    this.ushr(32 - bitCount) and (-bitCount).shr(31)\n\ninternal fun checkRangeBounds(from: Int, until: Int) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Long, until: Long) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Double, until: Double) = require(until > from) { boundsErrorMessage(from, until) }\n\ninternal fun boundsErrorMessage(from: Any, until: Any) = \"Random range is empty: [$from, $until).\"\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\n/**\n * Random number generator, using Marsaglia's \"xorwow\" algorithm\n *\n * Cycles after 2^192 - 2^32 repetitions.\n *\n * For more details, see Marsaglia, George (July 2003). \"Xorshift RNGs\". Journal of Statistical Software. 8 (14). doi:10.18637/jss.v008.i14\n *\n * Available at https://www.jstatsoft.org/v08/i14/paper\n *\n */\ninternal class XorWowRandom\ninternal constructor(\n    private var x: Int,\n    private var y: Int,\n    private var z: Int,\n    private var w: Int,\n    private var v: Int,\n    private var addend: Int\n) : Random() {\n\n    internal constructor(seed1: Int, seed2: Int) :\n            this(seed1, seed2, 0, 0, seed1.inv(), (seed1 shl 10) xor (seed2 ushr 4))\n\n    init {\n        require((x or y or z or w or v) != 0) { \"Initial state must have at least one non-zero element.\" }\n\n        // some trivial seeds can produce several values with zeroes in upper bits, so we discard first 64\n        repeat(64) { nextInt() }\n    }\n\n    override fun nextInt(): Int {\n        // Equivalent to the xorxow algorithm\n        // From Marsaglia, G. 2003. Xorshift RNGs. J. Statis. Soft. 8, 14, p. 5\n        var t = x\n        t = t xor (t ushr 2)\n        x = y\n        y = z\n        z = w\n        val v0 = v\n        w = v0\n        t = (t xor (t shl 1)) xor v0 xor (v0 shl 4)\n        v = t\n        addend += 362437\n        return t + addend\n    }\n\n    override fun nextBits(bitCount: Int): Int =\n        nextInt().takeUpperBits(bitCount)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n/**\n * Represents a range of [Comparable] values.\n */\nprivate open class ComparableRange<T : Comparable<T>>(\n    override val start: T,\n    override val endInclusive: T\n) : ClosedRange<T> {\n\n    override fun equals(other: Any?): Boolean {\n        return other is ComparableRange<*> && (isEmpty() && other.isEmpty() ||\n                start == other.start && endInclusive == other.endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * start.hashCode() + endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$start..$endInclusive\"\n}\n\n/**\n * Creates a range from this [Comparable] value to the specified [that] value.\n *\n * This value needs to be smaller than [that] value, otherwise the returned range will be empty.\n * @sample samples.ranges.Ranges.rangeFromComparable\n */\npublic operator fun <T : Comparable<T>> T.rangeTo(that: T): ClosedRange<T> = ComparableRange(this, that)\n\n\n/**\n * Represents a range of floating point numbers.\n * Extends [ClosedRange] interface providing custom operation [lessThanOrEquals] for comparing values of range domain type.\n *\n * This interface is implemented by floating point ranges returned by [Float.rangeTo] and [Double.rangeTo] operators to\n * achieve IEEE-754 comparison order instead of total order of floating point numbers.\n */\n@SinceKotlin(\"1.1\")\npublic interface ClosedFloatingPointRange<T : Comparable<T>> : ClosedRange<T> {\n    override fun contains(value: T): Boolean = lessThanOrEquals(start, value) && lessThanOrEquals(value, endInclusive)\n    override fun isEmpty(): Boolean = !lessThanOrEquals(start, endInclusive)\n\n    /**\n     * Compares two values of range domain type and returns true if first is less than or equal to second.\n     */\n    fun lessThanOrEquals(a: T, b: T): Boolean\n}\n\n\n/**\n * A closed range of values of type `Double`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedDoubleRange(\n    start: Double,\n    endInclusive: Double\n) : ClosedFloatingPointRange<Double> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Double get() = _start\n    override val endInclusive: Double get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Double, b: Double): Boolean = a <= b\n\n    override fun contains(value: Double): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedDoubleRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Double] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromDouble\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Double.rangeTo(that: Double): ClosedFloatingPointRange<Double> = ClosedDoubleRange(this, that)\n\n\n/**\n * A closed range of values of type `Float`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedFloatRange(\n    start: Float,\n    endInclusive: Float\n) : ClosedFloatingPointRange<Float> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Float get() = _start\n    override val endInclusive: Float get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Float, b: Float): Boolean = a <= b\n\n    override fun contains(value: Float): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedFloatRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Float] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromFloat\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Float.rangeTo(that: Float): ClosedFloatingPointRange<Float> = ClosedFloatRange(this, that)\n\n\n/**\n * Returns `true` if this iterable range contains the specified [element].\n *\n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <T, R> R.contains(element: T?): Boolean where T : Any, R : Iterable<T>, R : ClosedRange<T> =\n    element != null && contains(element)\n\n\ninternal fun checkStepIsPositive(isPositive: Boolean, step: Number) {\n    if (!isPositive) throw IllegalArgumentException(\"Step must be positive, was: $step.\")\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * An object to which char sequences and values can be appended.\n */\nexpect interface Appendable {\n    /**\n     * Appends the specified character [value] to this Appendable and returns this instance.\n     *\n     * @param value the character to append.\n     */\n    fun append(value: Char): Appendable\n\n    /**\n     * Appends the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence to append. If [value] is `null`, then the four characters `\"null\"` are appended to this Appendable.\n     */\n    fun append(value: CharSequence?): Appendable\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n     *  then characters are appended as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    fun append(value: CharSequence?, startIndex: Int, endIndex: Int): Appendable\n}\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n *  then characters are appended as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T : Appendable> T.appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): T {\n    @Suppress(\"UNCHECKED_CAST\")\n    return append(value, startIndex, endIndex) as T\n}\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CharsKt\")\n\npackage kotlin.text\n\n/**\n * Concatenates this Char and a String.\n *\n * @sample samples.text.Chars.plus\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.plus(other: String): String = this.toString() + other\n\n/**\n * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n *\n * Two characters are considered the same ignoring case if at least one of the following is `true`:\n *   - The two characters are the same (as compared by the == operator)\n *   - Applying the method [toUpperCase] to each character produces the same result\n *   - Applying the method [toLowerCase] to each character produces the same result\n *\n * @sample samples.text.Chars.equals\n */\npublic fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {\n    if (this == other) return true\n    if (!ignoreCase) return false\n\n    if (this.toUpperCase() == other.toUpperCase()) return true\n    if (this.toLowerCase() == other.toLowerCase()) return true\n    return false\n}\n\n/**\n * Returns `true` if this character is a Unicode surrogate code unit.\n */\npublic fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Trims leading whitespace characters followed by [marginPrefix] from every line of a source string and removes\n * the first and the last lines if they are blank (notice difference blank vs empty).\n *\n * Doesn't affect a line if it doesn't contain [marginPrefix] except the first and the last blank lines.\n *\n * Doesn't preserve the original line endings.\n *\n * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).\n *\n * @sample samples.text.Strings.trimMargin\n * @see trimIndent\n * @see kotlin.text.isWhitespace\n */\npublic fun String.trimMargin(marginPrefix: String = \"|\"): String =\n    replaceIndentByMargin(\"\", marginPrefix)\n\n/**\n * Detects indent by [marginPrefix] as it does [trimMargin] and replace it with [newIndent].\n *\n * @param marginPrefix non-blank string, which is used as a margin delimiter. Default is `|` (pipe character).\n */\npublic fun String.replaceIndentByMargin(newIndent: String = \"\", marginPrefix: String = \"|\"): String {\n    require(marginPrefix.isNotBlank()) { \"marginPrefix must be non-blank string.\" }\n    val lines = lines()\n\n    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line ->\n        val firstNonWhitespaceIndex = line.indexOfFirst { !it.isWhitespace() }\n\n        when {\n            firstNonWhitespaceIndex == -1 -> null\n            line.startsWith(marginPrefix, firstNonWhitespaceIndex) -> line.substring(firstNonWhitespaceIndex + marginPrefix.length)\n            else -> null\n        }\n    })\n}\n\n/**\n * Detects a common minimal indent of all the input lines, removes it from every line and also removes the first and the last\n * lines if they are blank (notice difference blank vs empty).\n *\n * Note that blank lines do not affect the detected indent level.\n *\n * In case if there are non-blank lines with no leading whitespace characters (no indent at all) then the\n * common indent is 0, and therefore this function doesn't change the indentation.\n *\n * Doesn't preserve the original line endings.\n *\n * @sample samples.text.Strings.trimIndent\n * @see trimMargin\n * @see kotlin.text.isBlank\n */\npublic fun String.trimIndent(): String = replaceIndent(\"\")\n\n/**\n * Detects a common minimal indent like it does [trimIndent] and replaces it with the specified [newIndent].\n */\npublic fun String.replaceIndent(newIndent: String = \"\"): String {\n    val lines = lines()\n\n    val minCommonIndent = lines\n        .filter(String::isNotBlank)\n        .map(String::indentWidth)\n        .min() ?: 0\n\n    return lines.reindent(length + newIndent.length * lines.size, getIndentFunction(newIndent), { line -> line.drop(minCommonIndent) })\n}\n\n/**\n * Prepends [indent] to every line of the original string.\n *\n * Doesn't preserve the original line endings.\n */\npublic fun String.prependIndent(indent: String = \"    \"): String =\n    lineSequence()\n        .map {\n            when {\n                it.isBlank() -> {\n                    when {\n                        it.length < indent.length -> indent\n                        else -> it\n                    }\n                }\n                else -> indent + it\n            }\n        }\n        .joinToString(\"\\n\")\n\nprivate fun String.indentWidth(): Int = indexOfFirst { !it.isWhitespace() }.let { if (it == -1) length else it }\n\nprivate fun getIndentFunction(indent: String) = when {\n    indent.isEmpty() -> { line: String -> line }\n    else -> { line: String -> indent + line }\n}\n\nprivate inline fun List<String>.reindent(\n    resultSizeEstimate: Int,\n    indentAddFunction: (String) -> String,\n    indentCutFunction: (String) -> String?\n): String {\n    val lastIndex = lastIndex\n    return mapIndexedNotNull { index, value ->\n        if ((index == 0 || index == lastIndex) && value.isBlank())\n            null\n        else\n            indentCutFunction(value)?.let(indentAddFunction) ?: value\n    }\n        .joinTo(StringBuilder(resultSizeEstimate), \"\\n\")\n        .toString()\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Represents a collection of captured groups in a single match of a regular expression.\n *\n * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n *\n * An element of the collection at the particular index can be `null`,\n * if the corresponding group in the regular expression is optional and\n * there was no match captured by that group.\n */\npublic interface MatchGroupCollection : Collection<MatchGroup?> {\n\n    /** Returns a group with the specified [index].\n     *\n     * @return An instance of [MatchGroup] if the group with the specified [index] was matched or `null` otherwise.\n     *\n     * Groups are indexed from 1 to the count of groups in the regular expression. A group with the index 0\n     * corresponds to the entire match.\n     */\n    public operator fun get(index: Int): MatchGroup?\n}\n\n/**\n * Extends [MatchGroupCollection] by introducing a way to get matched groups by name, when regex supports it.\n */\n@SinceKotlin(\"1.1\")\npublic interface MatchNamedGroupCollection : MatchGroupCollection {\n    /**\n     * Returns a named group with the specified [name].\n     * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.\n     * @throws IllegalArgumentException if there is no group with the specified [name] defined in the regex pattern.\n     * @throws UnsupportedOperationException if getting named groups isn't supported on the current platform.\n     */\n    public operator fun get(name: String): MatchGroup?\n}\n\n/**\n * Represents the results from a single regular expression match.\n */\npublic interface MatchResult {\n    /** The range of indices in the original string where match was captured. */\n    public val range: IntRange\n    /** The substring from the input string captured by this match. */\n    public val value: String\n    /**\n     * A collection of groups matched by the regular expression.\n     *\n     * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     */\n    public val groups: MatchGroupCollection\n    /**\n     * A list of matched indexed group values.\n     *\n     * This list has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding item in [groupValues] is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val groupValues: List<String>\n\n    /**\n     * An instance of [MatchResult.Destructured] wrapper providing components for destructuring assignment of group values.\n     *\n     * component1 corresponds to the value of the first group, component2 — of the second, and so on.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val destructured: Destructured get() = Destructured(this)\n\n    /** Returns a new [MatchResult] with the results for the next match, starting at the position\n     *  at which the last match ended (at the character after the last matched character).\n     */\n    public fun next(): MatchResult?\n\n    /**\n     * Provides components for destructuring assignment of group values.\n     *\n     * [component1] corresponds to the value of the first group, [component2] — of the second, and so on.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding component value is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public class Destructured internal constructor(public val match: MatchResult) {\n        @kotlin.internal.InlineOnly\n        public operator inline fun component1():  String = match.groupValues[1]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component2():  String = match.groupValues[2]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component3():  String = match.groupValues[3]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component4():  String = match.groupValues[4]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component5():  String = match.groupValues[5]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component6():  String = match.groupValues[6]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component7():  String = match.groupValues[7]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component8():  String = match.groupValues[8]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component9():  String = match.groupValues[9]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component10(): String = match.groupValues[10]\n\n        /**\n         *  Returns destructured group values as a list of strings.\n         *  First value in the returned list corresponds to the value of the first group, and so on.\n         *\n         * @sample samples.text.Regexps.matchDestructuringToGroupValues\n         */\n        public fun toList(): List<String> = match.groupValues.subList(1, match.groupValues.size)\n    }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.math.abs\n\n@UseExperimental(ExperimentalTime::class)\nprivate inline val storageUnit get() = DurationUnit.NANOSECONDS\n\n/**\n * Represents the amount of time one instant of time is away from another instant.\n *\n * A negative duration is possible in a situation when the second instant is earlier than the first one.\n * An infinite duration value [Duration.INFINITE] can be used to represent infinite timeouts.\n *\n * To construct a duration use either the extension function [toDuration],\n * or the extension properties [hours], [minutes], [seconds], and so on,\n * available on [Int], [Long], and [Double] numeric types.\n *\n * To get the value of this duration expressed in a particular [duration units][DurationUnit]\n * use the functions [toInt], [toLong], and [toDouble]\n * or the properties [inHours], [inMinutes], [inSeconds], [inNanoseconds], and so on.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\npublic inline class Duration internal constructor(internal val value: Double) : Comparable<Duration> {\n// TODO: backend fails on init block, wait for KT-28055\n\n//    init {\n//        require(_value.isNaN().not())\n//    }\n\n    companion object {\n        /** The duration equal to exactly 0 seconds. */\n        public val ZERO: Duration = Duration(0.0)\n\n        /** The duration whose value is positive infinity. It is useful for representing timeouts that should never expire. */\n        public val INFINITE: Duration = Duration(Double.POSITIVE_INFINITY)\n\n        /** Converts the given time duration [value] expressed in the specified [sourceUnit] into the specified [targetUnit]. */\n        public fun convert(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double =\n            convertDurationUnit(value, sourceUnit, targetUnit)\n    }\n\n    // arithmetic operators\n\n    /** Returns the negative of this value. */\n    public operator fun unaryMinus(): Duration = Duration(-value)\n\n    /** Returns a duration whose value is the sum of this and [other] duration values. */\n    public operator fun plus(other: Duration): Duration = Duration(value + other.value)\n\n    /** Returns a duration whose value is the difference between this and [other] duration values. */\n    public operator fun minus(other: Duration): Duration = Duration(value - other.value)\n\n    /** Returns a duration whose value is this duration value multiplied by the given [scale] number. */\n    public operator fun times(scale: Int): Duration = Duration(value * scale)\n\n    /** Returns a duration whose value is this duration value multiplied by the given [scale] number. */\n    public operator fun times(scale: Double): Duration = Duration(value * scale)\n\n    /** Returns a duration whose value is this duration value divided by the given [scale] number. */\n    public operator fun div(scale: Int): Duration = Duration(value / scale)\n\n    /** Returns a duration whose value is this duration value divided by the given [scale] number. */\n    public operator fun div(scale: Double): Duration = Duration(value / scale)\n\n    /** Returns a number that is the ratio of this and [other] duration values. */\n    public operator fun div(other: Duration): Double = this.value / other.value\n\n    /** Returns true, if the duration value is less than zero. */\n    public fun isNegative(): Boolean = value < 0\n\n    /** Returns true, if the duration value is greater than zero. */\n    public fun isPositive(): Boolean = value > 0\n\n    /** Returns true, if the duration value is infinite. */\n    public fun isInfinite(): Boolean = value.isInfinite()\n\n    /** Returns true, if the duration value is finite. */\n    public fun isFinite(): Boolean = value.isFinite()\n\n    /** Returns the absolute value of this value. The returned value is always non-negative. */\n    public val absoluteValue: Duration get() = if (isNegative()) -this else this\n\n    override fun compareTo(other: Duration): Int = this.value.compareTo(other.value)\n\n\n    // splitting to components\n\n    /**\n     * Splits this duration into days, hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration, and its absolute value is less than 24;\n     * - `days` represents the whole number of days in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (days: Int, hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T =\n        action(inDays.toInt(), hoursComponent, minutesComponent, secondsComponent, nanosecondsComponent)\n\n    /**\n     * Splits this duration into hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T =\n        action(inHours.toInt(), minutesComponent, secondsComponent, nanosecondsComponent)\n\n    /**\n     * Splits this duration into minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (minutes: Int, seconds: Int, nanoseconds: Int) -> T): T =\n        action(inMinutes.toInt(), secondsComponent, nanosecondsComponent)\n\n    /**\n     * Splits this duration into seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration.\n     *   If the value doesn't fit in [Long] range, i.e. it's greater than [Long.MAX_VALUE] or less than [Long.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (seconds: Long, nanoseconds: Int) -> T): T =\n        action(inSeconds.toLong(), nanosecondsComponent)\n\n    @PublishedApi\n    internal val hoursComponent: Int get() = (inHours % 24).toInt()\n    @PublishedApi\n    internal val minutesComponent: Int get() = (inMinutes % 60).toInt()\n    @PublishedApi\n    internal val secondsComponent: Int get() = (inSeconds % 60).toInt()\n    @PublishedApi\n    internal val nanosecondsComponent: Int get() = (inNanoseconds % 1e9).toInt()\n\n\n    // conversion to units\n\n    /** Returns the value of this duration expressed as a [Double] number of the specified [unit]. */\n    public fun toDouble(unit: DurationUnit): Double = convertDurationUnit(value, storageUnit, unit)\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of the specified [unit].\n     *\n     * If the value doesn't fit in the range of [Long] type, it is coerced into that range, see the conversion [Double.toLong] for details.\n     */\n    public fun toLong(unit: DurationUnit): Long = toDouble(unit).toLong()\n\n    /**\n     * Returns the value of this duration expressed as an [Int] number of the specified [unit].\n     *\n     * If the value doesn't fit in the range of [Int] type, it is coerced into that range, see the conversion [Double.toInt] for details.\n     */\n    public fun toInt(unit: DurationUnit): Int = toDouble(unit).toInt()\n\n    /** The value of this duration expressed as a [Double] number of days. */\n    public val inDays: Double get() = toDouble(DurationUnit.DAYS)\n\n    /** The value of this duration expressed as a [Double] number of hours. */\n    public val inHours: Double get() = toDouble(DurationUnit.HOURS)\n\n    /** The value of this duration expressed as a [Double] number of minutes. */\n    public val inMinutes: Double get() = toDouble(DurationUnit.MINUTES)\n\n    /** The value of this duration expressed as a [Double] number of seconds. */\n    public val inSeconds: Double get() = toDouble(DurationUnit.SECONDS)\n\n    /** The value of this duration expressed as a [Double] number of milliseconds. */\n    public val inMilliseconds: Double get() = toDouble(DurationUnit.MILLISECONDS)\n\n    /** The value of this duration expressed as a [Double] number of microseconds. */\n    public val inMicroseconds: Double get() = toDouble(DurationUnit.MICROSECONDS)\n\n    /** The value of this duration expressed as a [Double] number of nanoseconds. */\n    public val inNanoseconds: Double get() = toDouble(DurationUnit.NANOSECONDS)\n\n    // shortcuts\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of nanoseconds.\n     *\n     * If the value doesn't fit in the range of [Long] type, it is coerced into that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of nanoseconds is approximately ±292 years.\n     */\n    public fun toLongNanoseconds(): Long = toLong(DurationUnit.NANOSECONDS)\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of milliseconds.\n     *\n     * The value is coerced to the range of [Long] type, if it doesn't fit in that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of milliseconds is approximately ±292 million years.\n     */\n    public fun toLongMilliseconds(): Long = toLong(DurationUnit.MILLISECONDS)\n\n    /**\n     * Returns a string representation of this duration value expressed in the unit which yields the most compact and readable number value.\n     *\n     * Special cases:\n     *  - zero duration is formatted as `\"0s\"`\n     *  - the infinite duration is formatted as `\"Infinity\"` without unit\n     *  - very small durations (less than 1e-15 s) are expressed in seconds and formatted in scientific notation\n     *  - very big durations (more than 1e+7 days) are expressed in days and formatted in scientific notation\n     *\n     * @return the value of duration in the automatically determined unit followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @sample samples.time.Durations.toStringDefault\n     */\n    override fun toString(): String = when {\n        isInfinite() -> value.toString()\n        value == 0.0 -> \"0s\"\n        else -> {\n            val absNs = absoluteValue.inNanoseconds\n            var scientific = false\n            var maxDecimals = 0\n            val unit = when {\n                absNs < 1e-6 -> DurationUnit.SECONDS.also { scientific = true }\n                absNs < 1 -> DurationUnit.NANOSECONDS.also { maxDecimals = 7 }\n                absNs < 1e3 -> DurationUnit.NANOSECONDS\n                absNs < 1e6 -> DurationUnit.MICROSECONDS\n                absNs < 1e9 -> DurationUnit.MILLISECONDS\n                absNs < 1000e9 -> DurationUnit.SECONDS\n                absNs < 60_000e9 -> DurationUnit.MINUTES\n                absNs < 3600_000e9 -> DurationUnit.HOURS\n                absNs < 86400e9 * 1e7 -> DurationUnit.DAYS\n                else -> DurationUnit.DAYS.also { scientific = true }\n            }\n            val value = toDouble(unit)\n            when {\n                scientific -> formatScientific(value)\n                maxDecimals > 0 -> formatUpToDecimals(value, maxDecimals)\n                else -> formatToExactDecimals(value, precision(abs(value)))\n            } + unit.shortName()\n        }\n    }\n\n    private fun precision(value: Double): Int = when {\n        value < 1 -> 3\n        value < 10 -> 2\n        value < 100 -> 1\n        else -> 0\n    }\n\n    /**\n     * Returns a string representation of this duration value expressed in the given [unit]\n     * and formatted with the specified [decimals] number of digits after decimal point.\n     *\n     * Special cases:\n     *  - the infinite duration is formatted as `\"Infinity\"` without unit\n     *\n     * @return the value of duration in the specified [unit] followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @throws IllegalArgumentException if [decimals] is less than zero.\n     *\n     * @sample samples.time.Durations.toStringDecimals\n     */\n    public fun toString(unit: DurationUnit, decimals: Int = 0): String {\n        require(decimals >= 0) { \"decimals must be not negative, but was $decimals\" }\n        if (isInfinite()) return value.toString()\n        val number = toDouble(unit)\n        return when {\n            abs(number) < 1e14 -> formatToExactDecimals(number, decimals.coerceAtMost(12))\n            else -> formatScientific(number)\n        } + unit.shortName()\n    }\n\n\n    /**\n     * Returns an ISO-8601 based string representation of this duration.\n     *\n     * The returned value is presented in the format `PThHmMs.fS`, where `h`, `m`, `s` are the integer components of this duration (see [toComponents])\n     * and `f` is a fractional part of second. Depending on the roundness of the value the fractional part can be formatted with either\n     * 0, 3, 6, or 9 decimal digits.\n     *\n     * If the hours component absolute value of this duration is greater than [Int.MAX_VALUE], it is replaced with [Int.MAX_VALUE],\n     * so the infinite duration is formatted as `\"PT2147483647H\".\n     *\n     * Negative durations are indicated with the sign `-` in the beginning of the returned string, for example, `\"-PT5M30S\"`.\n     *\n     * @sample samples.time.Durations.toIsoString\n     */\n    @UseExperimental(ExperimentalStdlibApi::class)\n    public fun toIsoString(): String = buildString {\n        if (isNegative()) append('-')\n        append(\"PT\")\n        absoluteValue.toComponents { hours, minutes, seconds, nanoseconds ->\n            val hasHours = hours != 0\n            val hasSeconds = seconds != 0 || nanoseconds != 0\n            val hasMinutes = minutes != 0 || (hasSeconds && hasHours)\n            if (hasHours) {\n                append(hours).append('H')\n            }\n            if (hasMinutes) {\n                append(minutes).append('M')\n            }\n            if (hasSeconds || (!hasHours && !hasMinutes)) {\n                append(seconds)\n                if (nanoseconds != 0) {\n                    append('.')\n                    val nss = nanoseconds.toString().padStart(9, '0')\n                    when {\n                        nanoseconds % 1_000_000 == 0 -> appendRange(nss, 0, 3)\n                        nanoseconds % 1_000 == 0 -> appendRange(nss, 0, 6)\n                        else -> append(nss)\n                    }\n                }\n                append('S')\n            }\n        }\n    }\n\n}\n\n// constructing from number of units\n// extension functions\n\n/** Returns a [Duration] equal to this [Int] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Int.toDuration(unit: DurationUnit): Duration = toDouble().toDuration(unit)\n\n/** Returns a [Duration] equal to this [Long] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Long.toDuration(unit: DurationUnit): Duration = toDouble().toDuration(unit)\n\n/** Returns a [Duration] equal to this [Double] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Double.toDuration(unit: DurationUnit): Duration = Duration(convertDurationUnit(this, unit, storageUnit))\n\n// constructing from number of units\n// extension properties\n\n/** Returns a [Duration] equal to this [Int] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Long] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Double] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Int] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Long] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Double] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Int] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.days get() = toDuration(DurationUnit.DAYS)\n\n/** Returns a [Duration] equal to this [Long] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.days get() = toDuration(DurationUnit.DAYS)\n\n/** Returns a [Duration] equal to this [Double] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.days get() = toDuration(DurationUnit.DAYS)\n\n\n/** Returns a duration whose value is the specified [duration] value multiplied by this number. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@kotlin.internal.InlineOnly\npublic inline operator fun Int.times(duration: Duration): Duration = duration * this\n\n/** Returns a duration whose value is the specified [duration] value multiplied by this number. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@kotlin.internal.InlineOnly\npublic inline operator fun Double.times(duration: Duration): Duration = duration * this\n\n\ninternal expect fun formatToExactDecimals(value: Double, decimals: Int): String\ninternal expect fun formatUpToDecimals(value: Double, decimals: Int): String\ninternal expect fun formatScientific(value: Double): String","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass()\n@file:kotlin.jvm.JvmName(\"DurationUnitKt\")\n\npackage kotlin.time\n\n\n/**\n * The list of possible time measurement units, in which a duration can be expressed.\n *\n * The smallest time unit is [NANOSECONDS] and the largest is [DAYS], which corresponds to exactly 24 [HOURS].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic expect enum class DurationUnit {\n    /**\n     * Time unit representing one nanosecond, which is 1/1000 of a microsecond.\n     */\n    NANOSECONDS,\n    /**\n     * Time unit representing one microsecond, which is 1/1000 of a millisecond.\n     */\n    MICROSECONDS,\n    /**\n     * Time unit representing one millisecond, which is 1/1000 of a second.\n     */\n    MILLISECONDS,\n    /**\n     * Time unit representing one second.\n     */\n    SECONDS,\n    /**\n     * Time unit representing one minute.\n     */\n    MINUTES,\n    /**\n     * Time unit representing one hour.\n     */\n    HOURS,\n    /**\n     * Time unit representing one day, which is always equal to 24 hours.\n     */\n    DAYS;\n}\n\n/** Converts the given time duration [value] expressed in the specified [sourceUnit] into the specified [targetUnit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal expect fun convertDurationUnit(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double\n\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal fun DurationUnit.shortName(): String = when (this) {\n    DurationUnit.NANOSECONDS -> \"ns\"\n    DurationUnit.MICROSECONDS -> \"us\"\n    DurationUnit.MILLISECONDS -> \"ms\"\n    DurationUnit.SECONDS -> \"s\"\n    DurationUnit.MINUTES -> \"m\"\n    DurationUnit.HOURS -> \"h\"\n    DurationUnit.DAYS -> \"d\"\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\n/**\n * A source of time for measuring time intervals.\n *\n * The only operation provided by the time source is [markNow]. It returns a [TimeMark], which can be used to query the elapsed time later.\n *\n * @see [measureTime]\n * @see [measureTimedValue]\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic interface TimeSource {\n    /**\n     * Marks a point in time on this time source.\n     *\n     * The returned [TimeMark] instance encapsulates the captured time point and allows querying\n     * the duration of time interval [elapsed][TimeMark.elapsedNow] from that point.\n     */\n    public fun markNow(): TimeMark\n\n    /**\n     * The most precise time source available in the platform.\n     *\n     * This time source returns its readings from a source of monotonic time when it is available in a target platform,\n     * and resorts to a non-monotonic time source otherwise.\n     */\n    public object Monotonic : TimeSource by MonotonicTimeSource {\n        override fun toString(): String = MonotonicTimeSource.toString()\n    }\n\n\n    public companion object {\n\n    }\n}\n\n/**\n * Represents a time point notched on a particular [TimeSource]. Remains bound to the time source it was taken from\n * and allows querying for the duration of time elapsed from that point (see the function [elapsedNow]).\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic abstract class TimeMark {\n    /**\n     * Returns the amount of time passed from this mark measured with the time source from which this mark was taken.\n     *\n     * Note that the value returned by this function can change on subsequent invocations.\n     */\n    public abstract fun elapsedNow(): Duration\n\n    /**\n     * Returns a time mark on the same time source that is ahead of this time mark by the specified [duration].\n     *\n     * The returned time mark is more _late_ when the [duration] is positive, and more _early_ when the [duration] is negative.\n     */\n    public open operator fun plus(duration: Duration): TimeMark = AdjustedTimeMark(this, duration)\n\n    /**\n     * Returns a time mark on the same time source that is behind this time mark by the specified [duration].\n     *\n     * The returned time mark is more _early_ when the [duration] is positive, and more _late_ when the [duration] is negative.\n     */\n    public open operator fun minus(duration: Duration): TimeMark = plus(-duration)\n\n\n    /**\n     * Returns true if this time mark has passed according to the time source from which this mark was taken.\n     *\n     * Note that the value returned by this function can change on subsequent invocations.\n     * If the time source is monotonic, it can change only from `false` to `true`, namely, when the time mark becomes behind the current point of the time source.\n     */\n    public fun hasPassedNow(): Boolean = !elapsedNow().isNegative()\n\n    /**\n     * Returns false if this time mark has not passed according to the time source from which this mark was taken.\n     *\n     * Note that the value returned by this function can change on subsequent invocations.\n     * If the time source is monotonic, it can change only from `true` to `false`, namely, when the time mark becomes behind the current point of the time source.\n     */\n    public fun hasNotPassedNow(): Boolean = elapsedNow().isNegative()\n}\n\n\n@ExperimentalTime\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Deprecated(\n    \"Subtracting one TimeMark from another is not a well defined operation because these time marks could have been obtained from the different time sources.\",\n    level = DeprecationLevel.ERROR\n)\npublic inline operator fun TimeMark.minus(other: TimeMark): Duration = throw Error(\"Operation is disallowed.\")\n\n@ExperimentalTime\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Deprecated(\n    \"Comparing one TimeMark to another is not a well defined operation because these time marks could have been obtained from the different time sources.\",\n    level = DeprecationLevel.ERROR\n)\npublic inline operator fun TimeMark.compareTo(other: TimeMark): Int = throw Error(\"Operation is disallowed.\")\n\n\n@ExperimentalTime\nprivate class AdjustedTimeMark(val mark: TimeMark, val adjustment: Duration) : TimeMark() {\n    override fun elapsedNow(): Duration = mark.elapsedNow() - adjustment\n\n    override fun plus(duration: Duration): TimeMark = AdjustedTimeMark(mark, adjustment + duration)\n}\n\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use TimeSource interface instead.\", ReplaceWith(\"TimeSource\", \"kotlin.time.TimeSource\"))\npublic typealias Clock = TimeSource\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use TimeMark class instead.\", ReplaceWith(\"TimeMark\", \"kotlin.time.TimeMark\"))\npublic typealias ClockMark = TimeMark\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    fun append(value: String): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun insert(index: Int, value: String): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.3\")\n    @ExperimentalStdlibApi\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n *  then characters are appended as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.appendRange(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted. If [value] is `null`,\n *  then characters will be inserted as if [value] contained the four characters `\"null\"`.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder().apply(builderAction).toString()\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder(capacity).apply(builderAction).toString()\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\ninternal expect object MonotonicTimeSource : TimeSource\n\n/**\n * An abstract class used to implement time sources that return their readings as [Long] values in the specified [unit].\n *\n * @property unit The unit in which this time source's readings are expressed.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic abstract class AbstractLongTimeSource(protected val unit: DurationUnit) : TimeSource {\n    /**\n     * This protected method should be overridden to return the current reading of the time source expressed as a [Long] number\n     * in the unit specified by the [unit] property.\n     */\n    protected abstract fun read(): Long\n\n    private class LongTimeMark(private val startedAt: Long, private val timeSource: AbstractLongTimeSource, private val offset: Duration) : TimeMark() {\n        override fun elapsedNow(): Duration = (timeSource.read() - startedAt).toDuration(timeSource.unit) - offset\n        override fun plus(duration: Duration): TimeMark = LongTimeMark(startedAt, timeSource, offset + duration)\n    }\n\n    override fun markNow(): TimeMark = LongTimeMark(read(), this, Duration.ZERO)\n}\n\n/**\n * An abstract class used to implement time sources that return their readings as [Double] values in the specified [unit].\n *\n * @property unit The unit in which this time source's readings are expressed.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic abstract class AbstractDoubleTimeSource(protected val unit: DurationUnit) : TimeSource {\n    /**\n     * This protected method should be overridden to return the current reading of the time source expressed as a [Double] number\n     * in the unit specified by the [unit] property.\n     */\n    protected abstract fun read(): Double\n\n    private class DoubleTimeMark(private val startedAt: Double, private val timeSource: AbstractDoubleTimeSource, private val offset: Duration) : TimeMark() {\n        override fun elapsedNow(): Duration = (timeSource.read() - startedAt).toDuration(timeSource.unit) - offset\n        override fun plus(duration: Duration): TimeMark = DoubleTimeMark(startedAt, timeSource, offset + duration)\n    }\n\n    override fun markNow(): TimeMark = DoubleTimeMark(read(), this, Duration.ZERO)\n}\n\n/**\n * A time source that has programmatically updatable readings. It is useful as a predictable source of time in tests.\n *\n * The current reading value can be advanced by the specified duration amount with the operator [plusAssign]:\n *\n * ```\n * val timeSource = TestTimeSource()\n * timeSource += 10.seconds\n * ```\n *\n * Implementation note: the current reading value is stored as a [Long] number of nanoseconds,\n * thus it's capable to represent a time range of approximately ±292 years.\n * Should the reading value overflow as the result of [plusAssign] operation, an [IllegalStateException] is thrown.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic class TestTimeSource : AbstractLongTimeSource(unit = DurationUnit.NANOSECONDS) {\n    private var reading: Long = 0L\n\n    override fun read(): Long = reading\n\n    /**\n     * Advances the current reading value of this time source by the specified [duration].\n     *\n     * [duration] value is rounded down towards zero when converting it to a [Long] number of nanoseconds.\n     * For example, if the duration being added is `0.6.nanoseconds`, the reading doesn't advance because\n     * the duration value is rounded to zero nanoseconds.\n     *\n     * @throws IllegalStateException when the reading value overflows as the result of this operation.\n     */\n    public operator fun plusAssign(duration: Duration) {\n        val delta = duration.toDouble(unit)\n        val longDelta = delta.toLong()\n        reading = if (longDelta != Long.MIN_VALUE && longDelta != Long.MAX_VALUE) {\n            // when delta fits in long, add it as long\n            val newReading = reading + longDelta\n            if (reading xor longDelta >= 0 && reading xor newReading < 0) overflow(duration)\n            newReading\n        } else {\n            // when delta is greater than long, add it as double\n            val newReading = reading + delta\n            if (newReading > Long.MAX_VALUE || newReading < Long.MIN_VALUE) overflow(duration)\n            newReading.toLong()\n        }\n    }\n\n    private fun overflow(duration: Duration) {\n        throw IllegalStateException(\"TestTimeSource will overflow if its reading ${reading}ns is advanced by $duration.\")\n    }\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use TimeSource.Monotonic instead.\", ReplaceWith(\"TimeSource.Monotonic\", \"kotlin.time.TimeSource\"))\npublic typealias MonoClock = TimeSource.Monotonic\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use AbstractLongTimeSource instead.\", ReplaceWith(\"AbstractLongTimeSource\", \"kotlin.time.AbstractLongTimeSource\"))\npublic typealias AbstractLongClock = AbstractLongTimeSource\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use AbstractDoubleTimeSource instead.\", ReplaceWith(\"AbstractDoubleTimeSource\", \"kotlin.time.AbstractDoubleTimeSource\"))\npublic typealias AbstractDoubleClock = AbstractDoubleTimeSource\n\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use TestTimeSource instead.\", ReplaceWith(\"TestTimeSource\", \"kotlin.time.TestTimeSource\"))\npublic typealias TestClock = TestTimeSource\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"TuplesKt\")\n\npackage kotlin\n\n\n/**\n * Represents a generic pair of two values.\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Pair exhibits value semantics, i.e. two pairs are equal if both components are equal.\n *\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.pairDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @property first First value.\n * @property second Second value.\n * @constructor Creates a new instance of Pair.\n */\npublic data class Pair<out A, out B>(\n    public val first: A,\n    public val second: B\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Pair] including its [first] and [second] values.\n     */\n    public override fun toString(): String = \"($first, $second)\"\n}\n\n/**\n * Creates a tuple of type [Pair] from this and [that].\n *\n * This can be useful for creating [Map] literals with less noise, for example:\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic infix fun <A, B> A.to(that: B): Pair<A, B> = Pair(this, that)\n\n/**\n * Converts this pair into a list.\n * @sample samples.misc.Tuples.pairToList\n */\npublic fun <T> Pair<T, T>.toList(): List<T> = listOf(first, second)\n\n/**\n * Represents a triad of values\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Triple exhibits value semantics, i.e. two triples are equal if all three components are equal.\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.tripleDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @param C type of the third value.\n * @property first First value.\n * @property second Second value.\n * @property third Third value.\n */\npublic data class Triple<out A, out B, out C>(\n    public val first: A,\n    public val second: B,\n    public val third: C\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Triple] including its [first], [second] and [third] values.\n     */\n    public override fun toString(): String = \"($first, $second, $third)\"\n}\n\n/**\n * Converts this triple into a list.\n * @sample samples.misc.Tuples.tripleToList\n */\npublic fun <T> Triple<T, T, T>.toList(): List<T> = listOf(first, second, third)\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UByteArray\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: ByteArray) : Collection<UByte> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(ByteArray(size))\n\n    /**\n     * Returns the array element at the given [index]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun get(index: Int): UByte = storage[index].toUByte()\n\n    /**\n     * Sets the element at the given [index] to the given [value]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun set(index: Int, value: UByte) {\n        storage[index] = value.toByte()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): UByteIterator = Iterator(storage)\n\n    private class Iterator(private val array: ByteArray) : UByteIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextUByte() = if (index < array.size) array[index++].toUByte() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: UByte): Boolean {\n        // TODO: Eliminate this check after KT-30016 gets fixed.\n        // Currently JS BE does not generate special bridge method for this method.\n        if ((element as Any?) !is UByte) return false\n\n        return storage.contains(element.toByte())\n    }\n\n    override fun containsAll(elements: Collection<UByte>): Boolean {\n        return (elements as Collection<*>).all { it is UByte && storage.contains(it.toByte()) }\n    }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n/**\n * Creates a new array of the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each array element sequentially starting from the first one.\n * It should return the value for an array element given its index.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray(size: Int, init: (Int) -> UByte): UByteArray {\n    return UByteArray(ByteArray(size) { index -> init(index).toByte() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ubyteArrayOf(vararg elements: UByte): UByteArray = elements\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class ULong @PublishedApi internal constructor(@PublishedApi internal val data: Long) : Comparable<ULong> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of ULong can have.\n         */\n        public const val MIN_VALUE: ULong = ULong(0)\n\n        /**\n         * A constant holding the maximum value an instance of ULong can have.\n         */\n        public const val MAX_VALUE: ULong = ULong(-1)\n\n        /**\n         * The number of bytes used to represent an instance of ULong in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 8\n\n        /**\n         * The number of bits used to represent an instance of ULong in a binary form.\n         */\n        public const val SIZE_BITS: Int = 64\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: ULong): Int = ulongCompare(this.data, other.data)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = ULong(this.data.plus(other.data))\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = ULong(this.data.minus(other.data))\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = ULong(this.data.times(other.data))\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): ULong = this.div(other.toULong())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): ULong = this.div(other.toULong())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): ULong = this.div(other.toULong())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = ulongDivide(this, other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): ULong = this.rem(other.toULong())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): ULong = this.rem(other.toULong())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): ULong = this.rem(other.toULong())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = ulongRemainder(this, other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): ULong = ULong(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): ULong = ULong(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: ULong): ULongRange = ULongRange(this, other)\n\n    /** Shifts this value left by the [bitCount] number of bits. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): ULong = ULong(data shl bitCount)\n    /** Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): ULong = ULong(data ushr bitCount)\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: ULong): ULong = ULong(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: ULong): ULong = ULong(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: ULong): ULong = ULong(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): ULong = ULong(data.inv())\n\n    /**\n     * Converts this [ULong] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `ULong` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [ULong] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `Short` value is represented by the least significant 16 bits of this `ULong` value.\n     * Note that the resulting `Short` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    /**\n     * Converts this [ULong] value to [Int].\n     *\n     * If this value is less than or equals to [Int.MAX_VALUE], the resulting `Int` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `Int` value is represented by the least significant 32 bits of this `ULong` value.\n     * Note that the resulting `Int` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt()\n    /**\n     * Converts this [ULong] value to [Long].\n     *\n     * If this value is less than or equals to [Long.MAX_VALUE], the resulting `Long` value represents\n     * the same numerical value as this `ULong`. Otherwise the result is negative.\n     *\n     * The resulting `Long` value has the same binary representation as this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data\n\n    /**\n     * Converts this [ULong] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /**\n     * Converts this [ULong] value to [UShort].\n     *\n     * If this value is less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `UShort` value is represented by the least significant 16 bits of this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    /**\n     * Converts this [ULong] value to [UInt].\n     *\n     * If this value is less than or equals to [UInt.MAX_VALUE], the resulting `UInt` value represents\n     * the same numerical value as this `ULong`.\n     *\n     * The resulting `UInt` value is represented by the least significant 32 bits of this `ULong` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = data.toUInt()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = this\n\n    /**\n     * Converts this [ULong] value to [Float].\n     *\n     * The resulting value is the closest `Float` to this `ULong` value.\n     * In case when this `ULong` value is exactly between two `Float`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toDouble().toFloat()\n    /**\n     * Converts this [ULong] value to [Double].\n     *\n     * The resulting value is the closest `Double` to this `ULong` value.\n     * In case when this `ULong` value is exactly between two `Double`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = ulongToDouble(data)\n\n    public override fun toString(): String = ulongToString(data)\n\n}\n\n/**\n * Converts this [Byte] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `Byte` value,\n * whereas the most significant 56 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toULong(): ULong = ULong(this.toLong())\n/**\n * Converts this [Short] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Short`.\n *\n * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `Short` value,\n * whereas the most significant 48 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toULong(): ULong = ULong(this.toLong())\n/**\n * Converts this [Int] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Int`.\n *\n * The least significant 32 bits of the resulting `ULong` value are the same as the bits of this `Int` value,\n * whereas the most significant 32 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toULong(): ULong = ULong(this.toLong())\n/**\n * Converts this [Long] value to [ULong].\n *\n * If this value is positive, the resulting `ULong` value represents the same numerical value as this `Long`.\n *\n * The resulting `ULong` value has the same binary representation as this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toULong(): ULong = ULong(this)\n\n/**\n * Converts this [Float] value to [ULong].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Float` value is negative or `NaN`, [ULong.MAX_VALUE] if it's bigger than `ULong.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Float.toULong(): ULong = doubleToULong(this.toDouble())\n/**\n * Converts this [Double] value to [ULong].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is negative or `NaN`, [ULong.MAX_VALUE] if it's bigger than `ULong.MAX_VALUE`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Double.toULong(): ULong = doubleToULong(this)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.experimental\n\n/** Performs a bitwise AND operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.and(other: Byte): Byte = (this.toInt() and other.toInt()).toByte()\n\n/** Performs a bitwise OR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.or(other: Byte): Byte = (this.toInt() or other.toInt()).toByte()\n\n/** Performs a bitwise XOR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Byte.xor(other: Byte): Byte = (this.toInt() xor other.toInt()).toByte()\n\n/** Inverts the bits in this value. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun Byte.inv(): Byte = (this.toInt().inv()).toByte()\n\n\n/** Performs a bitwise AND operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.and(other: Short): Short = (this.toInt() and other.toInt()).toShort()\n\n/** Performs a bitwise OR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.or(other: Short): Short = (this.toInt() or other.toInt()).toShort()\n\n/** Performs a bitwise XOR operation between the two values. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline infix fun Short.xor(other: Short): Short = (this.toInt() xor other.toInt()).toShort()\n\n/** Inverts the bits in this value. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun Short.inv(): Short = (this.toInt().inv()).toShort()\n\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UIntArray\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: IntArray) : Collection<UInt> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(IntArray(size))\n\n    /**\n     * Returns the array element at the given [index]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun get(index: Int): UInt = storage[index].toUInt()\n\n    /**\n     * Sets the element at the given [index] to the given [value]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun set(index: Int, value: UInt) {\n        storage[index] = value.toInt()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): UIntIterator = Iterator(storage)\n\n    private class Iterator(private val array: IntArray) : UIntIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextUInt() = if (index < array.size) array[index++].toUInt() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: UInt): Boolean {\n        // TODO: Eliminate this check after KT-30016 gets fixed.\n        // Currently JS BE does not generate special bridge method for this method.\n        if ((element as Any?) !is UInt) return false\n\n        return storage.contains(element.toInt())\n    }\n\n    override fun containsAll(elements: Collection<UInt>): Boolean {\n        return (elements as Collection<*>).all { it is UInt && storage.contains(it.toInt()) }\n    }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n/**\n * Creates a new array of the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each array element sequentially starting from the first one.\n * It should return the value for an array element given its index.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray(size: Int, init: (Int) -> UInt): UIntArray {\n    return UIntArray(IntArray(size) { index -> init(index).toInt() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun uintArrayOf(vararg elements: UInt): UIntArray = elements\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n\n\nimport kotlin.internal.*\n\n/**\n * A range of values of type `UInt`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic class UIntRange(start: UInt, endInclusive: UInt) : UIntProgression(start, endInclusive, 1), ClosedRange<UInt> {\n    override val start: UInt get() = first\n    override val endInclusive: UInt get() = last\n\n    override fun contains(value: UInt): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is UIntRange && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first.toInt() + last.toInt())\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type UInt. */\n        public val EMPTY: UIntRange = UIntRange(UInt.MAX_VALUE, UInt.MIN_VALUE)\n    }\n}\n\n/**\n * A progression of values of type `UInt`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic open class UIntProgression\ninternal constructor(\n    start: UInt,\n    endInclusive: UInt,\n    step: Int\n) : Iterable<UInt> {\n    init {\n        if (step == 0.toInt()) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: UInt = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: UInt = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): UIntIterator = UIntProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is UIntProgression && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first.toInt() + last.toInt()) + step.toInt())\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates UIntProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: UInt, rangeEnd: UInt, step: Int): UIntProgression = UIntProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n\n/**\n * An iterator over a progression of values of type `UInt`.\n * @property step the number by which the value is incremented on each step.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\nprivate class UIntProgressionIterator(first: UInt, last: UInt, step: Int) : UIntIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private val step = step.toUInt() // use 2-complement math for negative steps\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextUInt(): UInt {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        } else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.collections\n\n/** An iterator over a sequence of values of type `UByte`. */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic abstract class UByteIterator : Iterator<UByte> {\n    override final fun next() = nextUByte()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextUByte(): UByte\n}\n\n/** An iterator over a sequence of values of type `UShort`. */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic abstract class UShortIterator : Iterator<UShort> {\n    override final fun next() = nextUShort()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextUShort(): UShort\n}\n\n/** An iterator over a sequence of values of type `UInt`. */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic abstract class UIntIterator : Iterator<UInt> {\n    override final fun next() = nextUInt()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextUInt(): UInt\n}\n\n/** An iterator over a sequence of values of type `ULong`. */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic abstract class ULongIterator : Iterator<ULong> {\n    override final fun next() = nextULong()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextULong(): ULong\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class ULongArray\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: LongArray) : Collection<ULong> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(LongArray(size))\n\n    /**\n     * Returns the array element at the given [index]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun get(index: Int): ULong = storage[index].toULong()\n\n    /**\n     * Sets the element at the given [index] to the given [value]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun set(index: Int, value: ULong) {\n        storage[index] = value.toLong()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): ULongIterator = Iterator(storage)\n\n    private class Iterator(private val array: LongArray) : ULongIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextULong() = if (index < array.size) array[index++].toULong() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: ULong): Boolean {\n        // TODO: Eliminate this check after KT-30016 gets fixed.\n        // Currently JS BE does not generate special bridge method for this method.\n        if ((element as Any?) !is ULong) return false\n\n        return storage.contains(element.toLong())\n    }\n\n    override fun containsAll(elements: Collection<ULong>): Boolean {\n        return (elements as Collection<*>).all { it is ULong && storage.contains(it.toLong()) }\n    }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n/**\n * Creates a new array of the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each array element sequentially starting from the first one.\n * It should return the value for an array element given its index.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray(size: Int, init: (Int) -> ULong): ULongArray {\n    return ULongArray(LongArray(size) { index -> init(index).toLong() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ulongArrayOf(vararg elements: ULong): ULongArray = elements\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n\n\nimport kotlin.internal.*\n\n/**\n * A range of values of type `ULong`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic class ULongRange(start: ULong, endInclusive: ULong) : ULongProgression(start, endInclusive, 1), ClosedRange<ULong> {\n    override val start: ULong get() = first\n    override val endInclusive: ULong get() = last\n\n    override fun contains(value: ULong): Boolean = first <= value && value <= last\n\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is ULongRange && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (first xor (first shr 32)).toInt() + (last xor (last shr 32)).toInt())\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type ULong. */\n        public val EMPTY: ULongRange = ULongRange(ULong.MAX_VALUE, ULong.MIN_VALUE)\n    }\n}\n\n/**\n * A progression of values of type `ULong`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic open class ULongProgression\ninternal constructor(\n    start: ULong,\n    endInclusive: ULong,\n    step: Long\n) : Iterable<ULong> {\n    init {\n        if (step == 0.toLong()) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Long.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: ULong = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: ULong = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Long = step\n\n    override fun iterator(): ULongIterator = ULongProgressionIterator(first, last, step)\n\n    /** Checks if the progression is empty. */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is ULongProgression && (isEmpty() && other.isEmpty() ||\n                first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * (first xor (first shr 32)).toInt() + (last xor (last shr 32)).toInt()) + (step xor (step ushr 32)).toInt())\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates ULongProgression within the specified bounds of a closed range.\n\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Long.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: ULong, rangeEnd: ULong, step: Long): ULongProgression = ULongProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n\n/**\n * An iterator over a progression of values of type `ULong`.\n * @property step the number by which the value is incremented on each step.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\nprivate class ULongProgressionIterator(first: ULong, last: ULong, step: Long) : ULongIterator() {\n    private val finalElement = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private val step = step.toULong() // use 2-complement math for negative steps\n    private var next = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextULong(): ULong {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        } else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:UseExperimental(ExperimentalUnsignedTypes::class)\npackage kotlin.internal\n\n// (a - b) mod c\nprivate fun differenceModulo(a: UInt, b: UInt, c: UInt): UInt {\n    val ac = a % c\n    val bc = b % c\n    return if (ac >= bc) ac - bc else ac - bc + c\n}\n\nprivate fun differenceModulo(a: ULong, b: ULong, c: ULong): ULong {\n    val ac = a % c\n    val bc = b % c\n    return if (ac >= bc) ac - bc else ac - bc + c\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun getProgressionLastElement(start: UInt, end: UInt, step: Int): UInt = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step.toUInt())\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, (-step).toUInt())\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun getProgressionLastElement(start: ULong, end: ULong, step: Long): ULong = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step.toULong())\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, (-step).toULong())\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UShortArray\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: ShortArray) : Collection<UShort> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(ShortArray(size))\n\n    /**\n     * Returns the array element at the given [index]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun get(index: Int): UShort = storage[index].toUShort()\n\n    /**\n     * Sets the element at the given [index] to the given [value]. This method can be called using the index operator.\n     *\n     * If the [index] is out of bounds of this array, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n     * where the behavior is unspecified.\n     */\n    public operator fun set(index: Int, value: UShort) {\n        storage[index] = value.toShort()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): UShortIterator = Iterator(storage)\n\n    private class Iterator(private val array: ShortArray) : UShortIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextUShort() = if (index < array.size) array[index++].toUShort() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: UShort): Boolean {\n        // TODO: Eliminate this check after KT-30016 gets fixed.\n        // Currently JS BE does not generate special bridge method for this method.\n        if ((element as Any?) !is UShort) return false\n\n        return storage.contains(element.toShort())\n    }\n\n    override fun containsAll(elements: Collection<UShort>): Boolean {\n        return (elements as Collection<*>).all { it is UShort && storage.contains(it.toShort()) }\n    }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n/**\n * Creates a new array of the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each array element sequentially starting from the first one.\n * It should return the value for an array element given its index.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray(size: Int, init: (Int) -> UShort): UShortArray {\n    return UShortArray(ShortArray(size) { index -> init(index).toShort() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ushortArrayOf(vararg elements: UShort): UShortArray = elements\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a set containing all elements of the original set except the given [element].\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.minus(element: T): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(size))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a set containing all elements of the original set except the elements contained in the given [elements] array.\n * \n * The returned set preserves the element iteration order of the original set.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Set<T>.minus(elements: Array<out T>): Set<T> {\n    val result = LinkedHashSet<T>(this)\n    result.removeAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set except the elements contained in the given [elements] collection.\n * \n * The returned set preserves the element iteration order of the original set.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Set<T>.minus(elements: Iterable<T>): Set<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toSet()\n    if (other is Set)\n        return this.filterNotTo(LinkedHashSet<T>()) { it in other }\n    val result = LinkedHashSet<T>(this)\n    result.removeAll(other)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set except the elements contained in the given [elements] sequence.\n * \n * The returned set preserves the element iteration order of the original set.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Set<T>.minus(elements: Sequence<T>): Set<T> {\n    val result = LinkedHashSet<T>(this)\n    result.removeAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set except the given [element].\n * \n * The returned set preserves the element iteration order of the original set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>.minusElement(element: T): Set<T> {\n    return minus(element)\n}\n\n/**\n * Returns a set containing all elements of the original set and then the given [element] if it isn't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(element: T): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(size + 1))\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and the given [elements] array,\n * which aren't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(elements: Array<out T>): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(this.size + elements.size))\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and the given [elements] collection,\n * which aren't already in this set.\n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(elements: Iterable<T>): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(elements.collectionSizeOrNull()?.let { this.size + it } ?: this.size * 2))\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and the given [elements] sequence,\n * which aren't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\npublic operator fun <T> Set<T>.plus(elements: Sequence<T>): Set<T> {\n    val result = LinkedHashSet<T>(mapCapacity(this.size * 2))\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a set containing all elements of the original set and then the given [element] if it isn't already in this set.\n * \n * The returned set preserves the element iteration order of the original set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>.plusElement(element: T): Set<T> {\n    return plus(element)\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n\n@UseExperimental(ExperimentalUnsignedTypes::class)\n@SinceKotlin(\"1.3\")\n@kotlin.js.JsName(\"contentDeepHashCodeImpl\")\ninternal fun <T> Array<out T>.contentDeepHashCodeImpl(): Int {\n    var result = 1\n    for (element in this) {\n        val elementHash = when {\n            element == null -> 0\n            isArrayish(element) -> (element.unsafeCast<Array<*>>()).contentDeepHashCodeImpl()\n\n            element is UByteArray   -> element.contentHashCode()\n            element is UShortArray  -> element.contentHashCode()\n            element is UIntArray    -> element.contentHashCode()\n            element is ULongArray   -> element.contentHashCode()\n\n            else                    -> element.hashCode()\n        }\n\n        result = 31 * result + elementHash\n    }\n    return result\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n// Mirrors signature from JS IR BE\n// Used for js.translator/testData/box/number/mulInt32.kt\n@library\n@JsName(\"imulEmulated\")\ninternal fun imul(x: Int, y: Int): Int = definedExternally\n\ninternal inline fun isArrayish(o: dynamic) = js(\"Kotlin\").isArrayish(o)","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\n\n/**\n * Returns a single list of all elements from all arrays in the given array.\n * @sample samples.collections.Arrays.Transformations.flattenArray\n */\npublic fun <T> Array<out Array<out T>>.flatten(): List<T> {\n    val result = ArrayList<T>(sumBy { it.size })\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this array,\n * *second* list is built from the second values of each pair from this array.\n * @sample samples.collections.Arrays.Transformations.unzipArray\n */\npublic fun <T, R> Array<out Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val listT = ArrayList<T>(size)\n    val listR = ArrayList<R>(size)\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n\n/**\n * Returns `true` if this nullable array is either null or empty.\n * @sample samples.collections.Arrays.Usage.arrayIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun Array<*>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this array if it's not empty\n * or the result of calling [defaultValue] function if the array is empty.\n *\n * @sample samples.collections.Arrays.Usage.arrayIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"UPPER_BOUND_CANNOT_BE_ARRAY\")\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Array<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n@UseExperimental(ExperimentalUnsignedTypes::class)\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@kotlin.jvm.JvmName(\"contentDeepEquals\")\n@kotlin.js.JsName(\"contentDeepEqualsImpl\")\ninternal fun <T> Array<out T>.contentDeepEqualsImpl(other: Array<out T>): Boolean {\n    if (this === other) return true\n    if (this.size != other.size) return false\n\n    for (i in indices) {\n        val v1 = this[i]\n        val v2 = other[i]\n\n        if (v1 === v2) {\n            continue\n        } else if (v1 == null || v2 == null) {\n            return false\n        }\n\n        when {\n            v1 is Array<*>     && v2 is Array<*>     -> if (!v1.contentDeepEquals(v2)) return false\n            v1 is ByteArray    && v2 is ByteArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is ShortArray   && v2 is ShortArray   -> if (!v1.contentEquals(v2)) return false\n            v1 is IntArray     && v2 is IntArray     -> if (!v1.contentEquals(v2)) return false\n            v1 is LongArray    && v2 is LongArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is FloatArray   && v2 is FloatArray   -> if (!v1.contentEquals(v2)) return false\n            v1 is DoubleArray  && v2 is DoubleArray  -> if (!v1.contentEquals(v2)) return false\n            v1 is CharArray    && v2 is CharArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is BooleanArray && v2 is BooleanArray -> if (!v1.contentEquals(v2)) return false\n\n            v1 is UByteArray   && v2 is UByteArray   -> if (!v1.contentEquals(v2)) return false\n            v1 is UShortArray  && v2 is UShortArray  -> if (!v1.contentEquals(v2)) return false\n            v1 is UIntArray    && v2 is UIntArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is ULongArray   && v2 is ULongArray   -> if (!v1.contentEquals(v2)) return false\n\n            else -> if (v1 != v2) return false\n        }\n\n    }\n    return true\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@kotlin.jvm.JvmName(\"contentDeepToString\")\n@kotlin.js.JsName(\"contentDeepToStringImpl\")\ninternal fun <T> Array<out T>.contentDeepToStringImpl(): String {\n    val length = size.coerceAtMost((Int.MAX_VALUE - 2) / 5) * 5 + 2 // in order not to overflow Int.MAX_VALUE\n    return buildString(length) {\n        contentDeepToStringInternal(this, mutableListOf())\n    }\n}\n\n@UseExperimental(ExperimentalUnsignedTypes::class)\nprivate fun <T> Array<out T>.contentDeepToStringInternal(result: StringBuilder, processed: MutableList<Array<*>>) {\n    if (this in processed) {\n        result.append(\"[...]\")\n        return\n    }\n    processed.add(this)\n    result.append('[')\n\n    for (i in indices) {\n        if (i != 0) {\n            result.append(\", \")\n        }\n        val element = this[i]\n        when (element) {\n            null            -> result.append(\"null\")\n            is Array<*>     -> element.contentDeepToStringInternal(result, processed)\n            is ByteArray    -> result.append(element.contentToString())\n            is ShortArray   -> result.append(element.contentToString())\n            is IntArray     -> result.append(element.contentToString())\n            is LongArray    -> result.append(element.contentToString())\n            is FloatArray   -> result.append(element.contentToString())\n            is DoubleArray  -> result.append(element.contentToString())\n            is CharArray    -> result.append(element.contentToString())\n            is BooleanArray -> result.append(element.contentToString())\n\n            is UByteArray   -> result.append(element.contentToString())\n            is UShortArray  -> result.append(element.contentToString())\n            is UIntArray    -> result.append(element.contentToString())\n            is ULongArray   -> result.append(element.contentToString())\n\n            else            -> result.append(element.toString())\n        }\n    }\n\n    result.append(']')\n    processed.removeAt(processed.lastIndex)\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"UStringsKt\")  // string representation of unsigned numbers\n\npackage kotlin.text\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n//@kotlin.internal.InlineOnly\npublic /*inline*/ fun UByte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n//@kotlin.internal.InlineOnly\npublic /*inline*/ fun UShort.toString(radix: Int): String = this.toInt().toString(radix)\n\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n//@kotlin.internal.InlineOnly\npublic /*inline*/ fun UInt.toString(radix: Int): String = this.toLong().toString(radix)\n\n/**\n * Returns a string representation of this [Long] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULong.toString(radix: Int): String = ulongToString(this.toLong(), checkRadix(radix))\n\n\n/**\n * Parses the string as a signed [UByte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUByte(): UByte = toUByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [UByte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUByte(radix: Int): UByte = toUByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [UShort] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUShort(): UShort = toUShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [UShort] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUShort(radix: Int): UShort = toUShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [UInt] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUInt(): UInt = toUIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [UInt] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUInt(radix: Int): UInt = toUIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [ULong] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toULong(): ULong = toULongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [ULong] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toULong(radix: Int): ULong = toULongOrNull(radix) ?: numberFormatError(this)\n\n\n\n\n\n/**\n * Parses the string as an [UByte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUByteOrNull(): UByte? = toUByteOrNull(radix = 10)\n\n/**\n * Parses the string as an [UByte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUByteOrNull(radix: Int): UByte? {\n    val int = this.toUIntOrNull(radix) ?: return null\n    if (int > UByte.MAX_VALUE) return null\n    return int.toUByte()\n}\n\n/**\n * Parses the string as an [UShort] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUShortOrNull(): UShort? = toUShortOrNull(radix = 10)\n\n/**\n * Parses the string as an [UShort] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUShortOrNull(radix: Int): UShort? {\n    val int = this.toUIntOrNull(radix) ?: return null\n    if (int > UShort.MAX_VALUE) return null\n    return int.toUShort()\n}\n\n/**\n * Parses the string as an [UInt] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUIntOrNull(): UInt? = toUIntOrNull(radix = 10)\n\n/**\n * Parses the string as an [UInt] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toUIntOrNull(radix: Int): UInt? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val limit: UInt = UInt.MAX_VALUE\n    val start: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {\n        if (length == 1 || firstChar != '+') return null\n        start = 1\n    } else {\n        start = 0\n    }\n\n    val limitForMaxRadix = 119304647u  //  limit / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    val uradix = radix.toUInt()\n    var result = 0u\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result > limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / uradix\n\n                if (result > limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= uradix\n\n        val beforeAdding = result\n        result += digit.toUInt()\n        if (result < beforeAdding) return null // overflow has happened\n    }\n\n    return result\n}\n\n/**\n * Parses the string as an [ULong] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toULongOrNull(): ULong? = toULongOrNull(radix = 10)\n\n/**\n * Parses the string as an [ULong] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun String.toULongOrNull(radix: Int): ULong? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val limit: ULong = ULong.MAX_VALUE\n    val start: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {\n        if (length == 1 || firstChar != '+') return null\n        start = 1\n    } else {\n        start = 0\n    }\n\n\n    val limitForMaxRadix = 512409557603043100uL  //  limit / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    val uradix = radix.toULong()\n    var result = 0uL\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result > limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / uradix\n\n                if (result > limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= uradix\n\n        val beforeAdding = result\n        result += digit.toUInt()\n        if (result < beforeAdding) return null // overflow has happened\n    }\n\n    return result\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MathKt\")\n\n\npackage kotlin.math\n\n\n\n// constants, can't use them from nativeMath as they are not constants there\n\n/** Ratio of the circumference of a circle to its diameter, approximately 3.14159. */\n@SinceKotlin(\"1.2\")\npublic const val PI: Double = 3.141592653589793\n/** Base of the natural logarithms, approximately 2.71828. */\n@SinceKotlin(\"1.2\")\npublic const val E: Double = 2.718281828459045\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sin(x: Double): Double\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cos(x: Double): Double\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tan(x: Double): Double\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asin(x: Double): Double\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acos(x: Double): Double\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan(x: Double): Double\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan2(y: Double, x: Double): Double\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sinh(x: Double): Double\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cosh(x: Double): Double\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tanh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asinh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acosh(x: Double): Double\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atanh(x: Double): Double\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\npublic expect fun hypot(x: Double, y: Double): Double\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sqrt(x: Double): Double\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun exp(x: Double): Double\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun expm1(x: Double): Double\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log(x: Double, base: Double): Double\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln(x: Double): Double\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log10(x: Double): Double\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log2(x: Double): Double\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln1p(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ceil(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun floor(x: Double): Double\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun truncate(x: Double): Double\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun round(x: Double): Double\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(x: Double): Double\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sign(x: Double): Double\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Double, b: Double): Double\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Double, b: Double): Double\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.pow(x: Double): Double\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.pow(n: Int): Double\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.absoluteValue: Double\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.sign: Double\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.withSign(sign: Double): Double\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.withSign(sign: Int): Double\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Double.ulp: Double\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextUp(): Double\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextDown(): Double\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.nextTowards(to: Double): Double\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.roundToInt(): Int\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Double.roundToLong(): Long\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sin(x: Float): Float\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cos(x: Float): Float\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tan(x: Float): Float\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asin(x: Float): Float\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acos(x: Float): Float\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan(x: Float): Float\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atan2(y: Float, x: Float): Float\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sinh(x: Float): Float\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun cosh(x: Float): Float\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun tanh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun asinh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun acosh(x: Float): Float\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun atanh(x: Float): Float\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\npublic expect fun hypot(x: Float, y: Float): Float\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sqrt(x: Float): Float\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun exp(x: Float): Float\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun expm1(x: Float): Float\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log(x: Float, base: Float): Float\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln(x: Float): Float\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log10(x: Float): Float\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun log2(x: Float): Float\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ln1p(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun ceil(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun floor(x: Float): Float\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun truncate(x: Float): Float\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun round(x: Float): Float\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(x: Float): Float\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun sign(x: Float): Float\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Float, b: Float): Float\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Float, b: Float): Float\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.pow(x: Float): Float\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.pow(n: Int): Float\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Float.absoluteValue: Float\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect val Float.sign: Float\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.withSign(sign: Float): Float\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.withSign(sign: Int): Float\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.roundToInt(): Int\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic expect fun Float.roundToLong(): Long\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(n: Int): Int\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Int, b: Int): Int\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Int, b: Int): Int\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Int.absoluteValue: Int\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic expect val Int.sign: Int\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic expect fun abs(n: Long): Long\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun min(a: Long, b: Long): Long\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\npublic expect fun max(a: Long, b: Long): Long\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\npublic expect val Long.absoluteValue: Long\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic expect val Long.sign: Int\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.js.internal\n\nimport kotlin.coroutines.Continuation\nimport kotlin.coroutines.EmptyCoroutineContext\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal val EmptyContinuation = Continuation<Any?>(EmptyCoroutineContext) { result ->\n    result.getOrThrow()\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/** Returns the negative [size] if [throwOnMalformed] is false, throws [CharacterCodingException] otherwise. */\n@UseExperimental(ExperimentalStdlibApi::class)\nprivate fun malformed(size: Int, index: Int, throwOnMalformed: Boolean): Int {\n    if (throwOnMalformed) throw CharacterCodingException(\"Malformed sequence starting at ${index - 1}\")\n    return -size\n}\n\n/**\n * Returns code point corresponding to UTF-16 surrogate pair,\n * where the first of the pair is the [high] and the second is in the [string] at the [index].\n * Returns zero if the pair is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the pair is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFromSurrogate(string: String, high: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (high !in 0xD800..0xDBFF || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val low = string[index].toInt()\n    if (low !in 0xDC00..0xDFFF) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return 0x10000 + ((high and 0x3FF) shl 10) or (low and 0x3FF)\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of two bytes,\n * where the first byte of the sequence is the [byte1] and the second byte is in the [bytes] array at the [index].\n * Returns zero if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of two bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom2(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (byte1 and 0x1E == 0 || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val byte2 = bytes[index].toInt()\n    if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return (byte1 shl 6) xor byte2 xor 0xF80\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of three bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of three bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom3(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0) {\n        if (byte2 and 0xE0 != 0xA0) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0xD) {\n        if (byte2 and 0xE0 != 0x80) {\n            // Surrogate code point\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    return (byte1 shl 12) xor (byte2 shl 6) xor byte3 xor -0x1E080\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of four bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of four bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom4(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0x0) {\n        if (byte2 and 0xF0 <= 0x80) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0x4) {\n        if (byte2 and 0xF0 != 0x80) {\n            // Out of Unicode code points domain (larger than U+10FFFF)\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF > 0x4) {\n        return malformed(0, index, throwOnMalformed)\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    if (index + 2 == endIndex) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    val byte4 = bytes[index + 2].toInt()\n    if (byte4 and 0xC0 != 0x80) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    return (byte1 shl 18) xor (byte2 shl 12) xor (byte3 shl 6) xor byte4 xor 0x381F80\n}\n\n/**\n * Maximum number of bytes needed to encode a single char.\n *\n * Code points in `0..0x7F` are encoded in a single byte.\n * Code points in `0x80..0x7FF` are encoded in two bytes.\n * Code points in `0x800..0xD7FF` or in `0xE000..0xFFFF` are encoded in three bytes.\n * Surrogate code points in `0xD800..0xDFFF` are not Unicode scalar values, therefore aren't encoded.\n * Code points in `0x10000..0x10FFFF` are represented by a pair of surrogate `Char`s and are encoded in four bytes.\n */\nprivate const val MAX_BYTES_PER_CHAR = 3\n\n/**\n * The byte sequence a malformed UTF-16 char sequence is replaced by.\n */\nprivate val REPLACEMENT_BYTE_SEQUENCE: ByteArray = byteArrayOf(0xEF.toByte(), 0xBF.toByte(), 0xBD.toByte())\n\n/**\n * Encodes the [string] using UTF-8 and returns the resulting [ByteArray].\n *\n * @param string the string to encode.\n * @param startIndex the start offset (inclusive) of the substring to encode.\n * @param endIndex the end offset (exclusive) of the substring to encode.\n * @param throwOnMalformed whether to throw on malformed char sequence or replace by the [REPLACEMENT_BYTE_SEQUENCE].\n *\n * @throws CharacterCodingException if the char sequence is malformed and [throwOnMalformed] is true.\n */\ninternal fun encodeUtf8(string: String, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): ByteArray {\n    require(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)\n\n    val bytes = ByteArray((endIndex - startIndex) * MAX_BYTES_PER_CHAR)\n    var byteIndex = 0\n    var charIndex = startIndex\n\n    while (charIndex < endIndex) {\n        val code = string[charIndex++].toInt()\n        when {\n            code < 0x80 ->\n                bytes[byteIndex++] = code.toByte()\n            code < 0x800 -> {\n                bytes[byteIndex++] = ((code shr 6) or 0xC0).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            code < 0xD800 || code >= 0xE000 -> {\n                bytes[byteIndex++] = ((code shr 12) or 0xE0).toByte()\n                bytes[byteIndex++] = (((code shr 6) and 0x3F) or 0x80).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            else -> { // Surrogate char value\n                val codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed)\n                if (codePoint <= 0) {\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[0]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[1]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[2]\n                } else {\n                    bytes[byteIndex++] = ((codePoint shr 18) or 0xF0).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 12) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 6) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = ((codePoint and 0x3F) or 0x80).toByte()\n                    charIndex++\n                }\n            }\n        }\n    }\n\n    return if (bytes.size == byteIndex) bytes else bytes.copyOf(byteIndex)\n}\n\n/**\n * The character a malformed UTF-8 byte sequence is replaced by.\n */\nprivate const val REPLACEMENT_CHAR = '\\uFFFD'\n\n/**\n * Decodes the UTF-8 [bytes] array and returns the resulting [String].\n *\n * @param bytes the byte array to decode.\n * @param startIndex the start offset (inclusive) of the array to be decoded.\n * @param endIndex the end offset (exclusive) of the array to be encoded.\n * @param throwOnMalformed whether to throw on malformed byte sequence or replace by the [REPLACEMENT_CHAR].\n *\n * @throws CharacterCodingException if the array is malformed UTF-8 byte sequence and [throwOnMalformed] is true.\n */\ninternal fun decodeUtf8(bytes: ByteArray, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): String {\n    require(startIndex >= 0 && endIndex <= bytes.size && startIndex <= endIndex)\n\n    var byteIndex = startIndex\n    val stringBuilder = StringBuilder()\n\n    while (byteIndex < endIndex) {\n        val byte = bytes[byteIndex++].toInt()\n        when {\n            byte >= 0 ->\n                stringBuilder.append(byte.toChar())\n            byte shr 5 == -2 -> {\n                val code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 1\n                }\n            }\n            byte shr 4 == -2 -> {\n                val code = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 2\n                }\n            }\n            byte shr 3 == -2 -> {\n                val code = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    val high = (code - 0x10000) shr 10 or 0xD800\n                    val low = (code and 0x3FF) or 0xDC00\n                    stringBuilder.append(high.toChar())\n                    stringBuilder.append(low.toChar())\n                    byteIndex += 3\n                }\n            }\n            else -> {\n                malformed(0, byteIndex, throwOnMalformed)\n                stringBuilder.append(REPLACEMENT_CHAR)\n            }\n        }\n    }\n\n    return stringBuilder.toString()\n}",null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.internal.InlineOnly\n\n\n/**\n * Returns a hash code value for the object or zero if the object is `null`.\n *\n * @see Any.hashCode\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun Any?.hashCode(): Int = this?.hashCode() ?: 0\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Function corresponding to JavaScript's `typeof` operator\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline fun jsTypeOf(a: Any?): String = js(\"typeof a\")\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n    fun namedItem(name: String): UnionElementOrHTMLCollection?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable, ElementCSSInlineStyle {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click()\n    fun focus()\n    fun blur()\n    fun forceSpellCheck()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.set(name: String, value: String) { asDynamic()[name] = value }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    open var `as`: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n    open var scope: String\n    open var workerType: WorkerType\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, HTMLOrSVGImageElement, TexImageSource {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: dynamic\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    fun load()\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double)\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause()\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [AudioTrackList](https://developer.mozilla.org/en/docs/Web/API/AudioTrackList) to Kotlin\n */\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [AudioTrack](https://developer.mozilla.org/en/docs/Web/API/AudioTrack) to Kotlin\n */\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [VideoTrackList](https://developer.mozilla.org/en/docs/Web/API/VideoTrackList) to Kotlin\n */\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [VideoTrack](https://developer.mozilla.org/en/docs/Web/API/VideoTrack) to Kotlin\n */\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    fun addCue(cue: TextTrackCue)\n    fun removeCue(cue: TextTrackCue)\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrackCue](https://developer.mozilla.org/en/docs/Web/API/TextTrackCue) to Kotlin\n */\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\n/**\n * Exposes the JavaScript [TrackEvent](https://developer.mozilla.org/en/docs/Web/API/TrackEvent) to Kotlin\n */\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption()\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead()\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot()\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit()\n    fun reset()\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally)\n    fun stepDown(n: Int = definedExternally)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    override fun item(index: Int): Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDetailsElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDetailsElement) to Kotlin\n */\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun close(returnValue: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n    o[\"flatten\"] = flatten\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save()\n    fun restore()\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double)\n    fun rotate(angle: Double)\n    fun translate(x: Double, y: Double)\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun setTransform(transform: dynamic = definedExternally)\n    fun resetTransform()\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: CanvasImageSource, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double)\n    fun fillRect(x: Double, y: Double, w: Double, h: Double)\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double)\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath()\n    fun fill(fillRule: CanvasFillRule = definedExternally)\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun stroke()\n    fun stroke(path: Path2D)\n    fun clip(fillRule: CanvasFillRule = definedExternally)\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun resetClip()\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element)\n    fun drawFocusIfNeeded(path: Path2D, element: Element)\n    fun scrollPathIntoView()\n    fun scrollPathIntoView(path: Path2D)\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double)\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double, dw: Double, dh: Double)\n    fun drawImage(image: CanvasImageSource, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double)\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally)\n    fun removeHitRegion(id: String)\n    fun clearHitRegions()\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double)\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double)\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>)\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath()\n    fun moveTo(x: Double, y: Double)\n    fun lineTo(x: Double, y: Double)\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    fun rect(x: Double, y: Double, w: Double, h: Double)\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String)\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : ImageBitmapSource, TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally)\n    override fun closePath()\n    override fun moveTo(x: Double, y: Double)\n    override fun lineTo(x: Double, y: Double)\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    override fun rect(x: Double, y: Double, w: Double, h: Double)\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?)\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally)\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = undefined): ElementDefinitionOptions {\n    val o = js(\"({})\")\n    o[\"extends\"] = extends\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int)\n    fun getData(format: String): String\n    fun setData(format: String, data: String)\n    fun clearData(format: String = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int)\n    fun clear()\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?)\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, region: String? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"region\"] = region\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindowProxy {\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close()\n    fun stop()\n    fun focus()\n    fun blur()\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert()\n    fun alert(message: String)\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print()\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int)\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally)\n    fun captureEvents()\n    fun releaseEvents()\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int)\n    fun moveBy(x: Int, y: Int)\n    fun resizeTo(x: Int, y: Int)\n    fun resizeBy(x: Int, y: Int)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally)\n    fun back()\n    fun forward()\n    fun pushState(data: Any?, title: String, url: String? = definedExternally)\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String)\n    fun replace(url: String)\n    fun reload()\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update()\n    fun abort()\n    fun swapCache()\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var onabort: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onblur: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncancel: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplaythrough: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclose: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncontextmenu: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncuechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondblclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrag: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragend: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragenter: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragexit: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragleave: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragover: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragstart: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrop: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondurationchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onemptied: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onended: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onfocus: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninput: ((InputEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninvalid: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeydown: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeypress: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeyup: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadeddata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadedmetadata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousedown: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseenter: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseleave: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousemove: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseout: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseover: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseup: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwheel: ((WheelEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpause: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplaying: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onprogress: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onratechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onreset: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onresize: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onscroll: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeked: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeking: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onselect: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onshow: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstalled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsubmit: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsuspend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontimeupdate: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontoggle: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onvolumechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwaiting: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ongotpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlostpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerdown: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointermove: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerup: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointercancel: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerover: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerout: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerenter: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerleave: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeunload: ((BeforeUnloadEvent) -> String?)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onhashchange: ((HashChangeEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlanguagechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmessage: ((MessageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onoffline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ononline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpagehide: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpageshow: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpopstate: ((PopStateEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onrejectionhandled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstorage: ((StorageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncut: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpaste: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val origin: String\n    val caches: CacheStorage\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally)\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally)\n    fun createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: ImageBitmapSource, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n}\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val clipboard: Clipboard\n    open val mediaDevices: MediaDevices\n    open val maxTouchPoints: Int\n    open val serviceWorker: ServiceWorkerContainer\n    fun getUserMedia(constraints: MediaStreamConstraints, successCallback: (MediaStream) -> Unit, errorCallback: (dynamic) -> Unit)\n    fun vibrate(pattern: dynamic): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String)\n    fun registerContentHandler(mimeType: String, url: String, title: String)\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String)\n    fun unregisterContentHandler(mimeType: String, url: String)\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    fun refresh(reload: Boolean = definedExternally)\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeTypeArray](https://developer.mozilla.org/en/docs/Web/API/MimeTypeArray) to Kotlin\n */\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeType](https://developer.mozilla.org/en/docs/Web/API/MimeType) to Kotlin\n */\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : CanvasImageSource, TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close()\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = undefined, resizeHeight: Int? = undefined, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindowProxy?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindowProxy?, ports: Array<MessagePort>)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindowProxy? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindowProxy? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close()\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n    o[\"withCredentials\"] = withCredentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Number\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally)\n    fun send(data: String)\n    fun send(data: Blob)\n    fun send(data: ArrayBuffer)\n    fun send(data: ArrayBufferView)\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindowProxy, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun start()\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    fun importScripts(vararg urls: String)\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((MessageEvent) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate()\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Number\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open val href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun removeItem(key: String)\n    fun clear()\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.set(key: String, value: String) { asDynamic()[key] = value }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMarqueeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMarqueeElement) to Kotlin\n */\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start()\n    fun stop()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface External {\n    fun AddSearchProvider()\n    fun IsSearchProviderInstalled()\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n        get() = definedExternally\n    val lastElementChild: Element?\n        get() = definedExternally\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic)\n    fun append(vararg nodes: dynamic)\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n        get() = definedExternally\n    val nextElementSibling: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic)\n    fun after(vararg nodes: dynamic)\n    fun replaceWith(vararg nodes: dynamic)\n    fun remove()\n}\n\n/**\n * Exposes the JavaScript [Slotable](https://developer.mozilla.org/en/docs/Web/API/Slotable) to Kotlin\n */\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override fun item(index: Int): Node?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : ItemArrayLike<Element>, UnionElementOrHTMLCollection {\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally)\n    fun disconnect()\n    fun takeRecords(): Array<MutationRecord>\n}\n\n/**\n * Exposes the JavaScript [MutationObserverInit](https://developer.mozilla.org/en/docs/Web/API/MutationObserverInit) to Kotlin\n */\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = undefined, characterData: Boolean? = undefined, subtree: Boolean? = false, attributeOldValue: Boolean? = undefined, characterDataOldValue: Boolean? = undefined, attributeFilter: Array<String>? = undefined): MutationObserverInit {\n    val o = js(\"({})\")\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize()\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val location: Location?\n    var domain: String\n    open val referrer: String\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var title: String\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    open val activeElement: Element?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    open val rootElement: SVGSVGElement?\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(`interface`: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close()\n    fun write(vararg text: String)\n    fun writeln(vararg text: String)\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear()\n    fun captureEvents()\n    fun releaseEvents()\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    fun createTouch(view: Window, target: EventTarget, identifier: Int, pageX: Int, pageY: Int, screenX: Int, screenY: Int): Touch\n    fun createTouchList(vararg touches: Touch): TouchList\n    fun exitFullscreen(): Promise<Unit>\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ElementCreationOptions {\n    var `is`: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(`is`: String? = undefined): ElementCreationOptions {\n    val o = js(\"({})\")\n    o[\"is\"] = `is`\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent, UnionElementOrProcessingInstruction {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    open var innerHTML: String\n    open var outerHTML: String\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String)\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String)\n    fun removeAttribute(qualifiedName: String)\n    fun removeAttributeNS(namespace: String?, localName: String)\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String)\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView()\n    fun scrollIntoView(arg: dynamic)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun insertAdjacentHTML(position: String, text: String)\n    fun setPointerCapture(pointerId: Int)\n    fun releasePointerCapture(pointerId: Int)\n    fun hasPointerCapture(pointerId: Int): Boolean\n    fun requestFullscreen(): Promise<Unit>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n    o[\"mode\"] = mode\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String)\n    fun insertData(offset: Int, data: String)\n    fun deleteData(offset: Int, count: Int)\n    fun replaceData(offset: Int, count: Int, data: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val assignedSlot: HTMLSlotElement?\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    fun splitText(offset: Int): Text\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun setStart(node: Node, offset: Int)\n    fun setEnd(node: Node, offset: Int)\n    fun setStartBefore(node: Node)\n    fun setStartAfter(node: Node)\n    fun setEndBefore(node: Node)\n    fun setEndAfter(node: Node)\n    fun collapse(toStart: Boolean = definedExternally)\n    fun selectNode(node: Node)\n    fun selectNodeContents(node: Node)\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents()\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node)\n    fun surroundContents(newParent: Node)\n    fun cloneRange(): Range\n    fun detach()\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun createContextualFragment(fragment: String): DocumentFragment\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach()\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    open var value: String\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String)\n    fun remove(vararg tokens: String)\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String)\n    fun supports(token: String): Boolean\n    override fun item(index: Int): String?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\n/**\n * Exposes the JavaScript [DOMPointInit](https://developer.mozilla.org/en/docs/Web/API/DOMPointInit) to Kotlin\n */\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMQuad](https://developer.mozilla.org/en/docs/Web/API/DOMQuad) to Kotlin\n */\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [ScrollToOptions](https://developer.mozilla.org/en/docs/Web/API/ScrollToOptions) to Kotlin\n */\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = undefined, top: Double? = undefined, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?)\n    fun addListener(listener: ((Event) -> Unit)?)\n    fun removeListener(listener: EventListener?)\n    fun removeListener(listener: ((Event) -> Unit)?)\n}\n\n/**\n * Exposes the JavaScript [MediaQueryListEvent](https://developer.mozilla.org/en/docs/Web/API/MediaQueryListEvent) to Kotlin\n */\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = undefined): BoxQuadOptions {\n    val o = js(\"({})\")\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n    return o\n}\n\n/**\n * Exposes the JavaScript [GeometryUtils](https://developer.mozilla.org/en/docs/Web/API/GeometryUtils) to Kotlin\n */\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val identifier: Int\n    open val target: EventTarget\n    open val screenX: Int\n    open val screenY: Int\n    open val clientX: Int\n    open val clientY: Int\n    open val pageX: Int\n    open val pageY: Int\n    open val region: String?\n}\n\npublic external abstract class TouchList : ItemArrayLike<Touch> {\n    override fun item(index: Int): Touch?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TouchList.get(index: Int): Touch? = asDynamic()[index]\n\npublic external open class TouchEvent : UIEvent {\n    open val touches: TouchList\n    open val targetTouches: TouchList\n    open val changedTouches: TouchList\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Image](https://developer.mozilla.org/en/docs/Web/API/Image) to Kotlin\n */\npublic external open class Image(width: Int = definedExternally, height: Int = definedExternally) : HTMLImageElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class Audio(src: String = definedExternally) : HTMLAudioElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Option](https://developer.mozilla.org/en/docs/Web/API/Option) to Kotlin\n */\npublic external open class Option(text: String = definedExternally, value: String = definedExternally, defaultSelected: Boolean = definedExternally, selected: Boolean = definedExternally) : HTMLOptionElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface UnionElementOrHTMLCollection\n\npublic external interface UnionElementOrRadioNodeList\n\npublic external interface UnionHTMLOptGroupElementOrHTMLOptionElement\n\npublic external interface UnionAudioTrackOrTextTrackOrVideoTrack\n\npublic external interface UnionElementOrMouseEvent\n\npublic external interface RenderingContext\n\npublic external interface HTMLOrSVGImageElement : CanvasImageSource\n\npublic external interface CanvasImageSource : ImageBitmapSource\n\npublic external interface ImageBitmapSource\n\npublic external interface UnionMessagePortOrWindowProxy\n\npublic external interface HTMLOrSVGScriptElement\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface DocumentReadyState {\n    companion object\n}\n\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanPlayTypeResult {\n    companion object\n}\n\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackMode {\n    companion object\n}\n\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackKind {\n    companion object\n}\n\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface SelectionMode {\n    companion object\n}\n\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasFillRule {\n    companion object\n}\n\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\n\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageSmoothingQuality {\n    companion object\n}\n\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineCap {\n    companion object\n}\n\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineJoin {\n    companion object\n}\n\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextAlign {\n    companion object\n}\n\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextBaseline {\n    companion object\n}\n\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasDirection {\n    companion object\n}\n\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollRestoration {\n    companion object\n}\n\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\n\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageOrientation {\n    companion object\n}\n\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\n\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface PremultiplyAlpha {\n    companion object\n}\n\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ColorSpaceConversion {\n    companion object\n}\n\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ResizeQuality {\n    companion object\n}\n\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface BinaryType {\n    companion object\n}\n\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\n\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WorkerType {\n    companion object\n}\n\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\n\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ShadowRootMode {\n    companion object\n}\n\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\n\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollBehavior {\n    companion object\n}\n\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollLogicalPosition {\n    companion object\n}\n\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CSSBoxType {\n    companion object\n}\n\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()",null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.xhr\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\n\n/**\n * Exposes the JavaScript [XMLHttpRequestEventTarget](https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequestEventTarget) to Kotlin\n */\npublic external abstract class XMLHttpRequestEventTarget : EventTarget {\n    open var onloadstart: ((ProgressEvent) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onabort: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onload: ((Event) -> dynamic)?\n    open var ontimeout: ((Event) -> dynamic)?\n    open var onloadend: ((Event) -> dynamic)?\n}\n\npublic external abstract class XMLHttpRequestUpload : XMLHttpRequestEventTarget\n\n/**\n * Exposes the JavaScript [XMLHttpRequest](https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest) to Kotlin\n */\npublic external open class XMLHttpRequest : XMLHttpRequestEventTarget {\n    var onreadystatechange: ((Event) -> dynamic)?\n    open val readyState: Short\n    var timeout: Int\n    var withCredentials: Boolean\n    open val upload: XMLHttpRequestUpload\n    open val responseURL: String\n    open val status: Short\n    open val statusText: String\n    var responseType: XMLHttpRequestResponseType\n    open val response: Any?\n    open val responseText: String\n    open val responseXML: Document?\n    fun open(method: String, url: String)\n    fun open(method: String, url: String, async: Boolean, username: String? = definedExternally, password: String? = definedExternally)\n    fun setRequestHeader(name: String, value: String)\n    fun send(body: dynamic = definedExternally)\n    fun abort()\n    fun getResponseHeader(name: String): String?\n    fun getAllResponseHeaders(): String\n    fun overrideMimeType(mime: String)\n\n    companion object {\n        val UNSENT: Short\n        val OPENED: Short\n        val HEADERS_RECEIVED: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FormData](https://developer.mozilla.org/en/docs/Web/API/FormData) to Kotlin\n */\npublic external open class FormData(form: HTMLFormElement = definedExternally) {\n    fun append(name: String, value: String)\n    fun append(name: String, value: Blob, filename: String = definedExternally)\n    fun delete(name: String)\n    fun get(name: String): dynamic\n    fun getAll(name: String): Array<dynamic>\n    fun has(name: String): Boolean\n    fun set(name: String, value: String)\n    fun set(name: String, value: Blob, filename: String = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [ProgressEvent](https://developer.mozilla.org/en/docs/Web/API/ProgressEvent) to Kotlin\n */\npublic external open class ProgressEvent(type: String, eventInitDict: ProgressEventInit = definedExternally) : Event {\n    open val lengthComputable: Boolean\n    open val loaded: Number\n    open val total: Number\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ProgressEventInit : EventInit {\n    var lengthComputable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var loaded: Number? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var total: Number? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ProgressEventInit(lengthComputable: Boolean? = false, loaded: Number? = 0, total: Number? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ProgressEventInit {\n    val o = js(\"({})\")\n    o[\"lengthComputable\"] = lengthComputable\n    o[\"loaded\"] = loaded\n    o[\"total\"] = total\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface XMLHttpRequestResponseType {\n    companion object\n}\n\npublic inline val XMLHttpRequestResponseType.Companion.EMPTY: XMLHttpRequestResponseType get() = \"\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.ARRAYBUFFER: XMLHttpRequestResponseType get() = \"arraybuffer\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.BLOB: XMLHttpRequestResponseType get() = \"blob\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.DOCUMENT: XMLHttpRequestResponseType get() = \"document\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.JSON: XMLHttpRequestResponseType get() = \"json\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()\n\npublic inline val XMLHttpRequestResponseType.Companion.TEXT: XMLHttpRequestResponseType get() = \"text\".asDynamic().unsafeCast<XMLHttpRequestResponseType>()",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.khronos.webgl\n\nimport kotlin.js.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface WebGLContextAttributes {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var depth: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var stencil: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var antialias: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultipliedAlpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preserveDrawingBuffer: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preferLowPowerToHighPerformance: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var failIfMajorPerformanceCaveat: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextAttributes(alpha: Boolean? = true, depth: Boolean? = true, stencil: Boolean? = false, antialias: Boolean? = true, premultipliedAlpha: Boolean? = true, preserveDrawingBuffer: Boolean? = false, preferLowPowerToHighPerformance: Boolean? = false, failIfMajorPerformanceCaveat: Boolean? = false): WebGLContextAttributes {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    o[\"depth\"] = depth\n    o[\"stencil\"] = stencil\n    o[\"antialias\"] = antialias\n    o[\"premultipliedAlpha\"] = premultipliedAlpha\n    o[\"preserveDrawingBuffer\"] = preserveDrawingBuffer\n    o[\"preferLowPowerToHighPerformance\"] = preferLowPowerToHighPerformance\n    o[\"failIfMajorPerformanceCaveat\"] = failIfMajorPerformanceCaveat\n    return o\n}\n\npublic external abstract class WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLBuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLBuffer) to Kotlin\n */\npublic external abstract class WebGLBuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLFramebuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLFramebuffer) to Kotlin\n */\npublic external abstract class WebGLFramebuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLProgram](https://developer.mozilla.org/en/docs/Web/API/WebGLProgram) to Kotlin\n */\npublic external abstract class WebGLProgram : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLRenderbuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderbuffer) to Kotlin\n */\npublic external abstract class WebGLRenderbuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLShader](https://developer.mozilla.org/en/docs/Web/API/WebGLShader) to Kotlin\n */\npublic external abstract class WebGLShader : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLTexture](https://developer.mozilla.org/en/docs/Web/API/WebGLTexture) to Kotlin\n */\npublic external abstract class WebGLTexture : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLUniformLocation](https://developer.mozilla.org/en/docs/Web/API/WebGLUniformLocation) to Kotlin\n */\npublic external abstract class WebGLUniformLocation\n\n/**\n * Exposes the JavaScript [WebGLActiveInfo](https://developer.mozilla.org/en/docs/Web/API/WebGLActiveInfo) to Kotlin\n */\npublic external abstract class WebGLActiveInfo {\n    open val size: Int\n    open val type: Int\n    open val name: String\n}\n\n/**\n * Exposes the JavaScript [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en/docs/Web/API/WebGLShaderPrecisionFormat) to Kotlin\n */\npublic external abstract class WebGLShaderPrecisionFormat {\n    open val rangeMin: Int\n    open val rangeMax: Int\n    open val precision: Int\n}\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WebGLRenderingContextBase {\n    val canvas: HTMLCanvasElement\n    val drawingBufferWidth: Int\n    val drawingBufferHeight: Int\n    fun getContextAttributes(): WebGLContextAttributes?\n    fun isContextLost(): Boolean\n    fun getSupportedExtensions(): Array<String>?\n    fun getExtension(name: String): dynamic\n    fun activeTexture(texture: Int)\n    fun attachShader(program: WebGLProgram?, shader: WebGLShader?)\n    fun bindAttribLocation(program: WebGLProgram?, index: Int, name: String)\n    fun bindBuffer(target: Int, buffer: WebGLBuffer?)\n    fun bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer?)\n    fun bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer?)\n    fun bindTexture(target: Int, texture: WebGLTexture?)\n    fun blendColor(red: Float, green: Float, blue: Float, alpha: Float)\n    fun blendEquation(mode: Int)\n    fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int)\n    fun blendFunc(sfactor: Int, dfactor: Int)\n    fun blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int)\n    fun bufferData(target: Int, size: Int, usage: Int)\n    fun bufferData(target: Int, data: BufferDataSource?, usage: Int)\n    fun bufferSubData(target: Int, offset: Int, data: BufferDataSource?)\n    fun checkFramebufferStatus(target: Int): Int\n    fun clear(mask: Int)\n    fun clearColor(red: Float, green: Float, blue: Float, alpha: Float)\n    fun clearDepth(depth: Float)\n    fun clearStencil(s: Int)\n    fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean)\n    fun compileShader(shader: WebGLShader?)\n    fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView)\n    fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView)\n    fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int)\n    fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int)\n    fun createBuffer(): WebGLBuffer?\n    fun createFramebuffer(): WebGLFramebuffer?\n    fun createProgram(): WebGLProgram?\n    fun createRenderbuffer(): WebGLRenderbuffer?\n    fun createShader(type: Int): WebGLShader?\n    fun createTexture(): WebGLTexture?\n    fun cullFace(mode: Int)\n    fun deleteBuffer(buffer: WebGLBuffer?)\n    fun deleteFramebuffer(framebuffer: WebGLFramebuffer?)\n    fun deleteProgram(program: WebGLProgram?)\n    fun deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?)\n    fun deleteShader(shader: WebGLShader?)\n    fun deleteTexture(texture: WebGLTexture?)\n    fun depthFunc(func: Int)\n    fun depthMask(flag: Boolean)\n    fun depthRange(zNear: Float, zFar: Float)\n    fun detachShader(program: WebGLProgram?, shader: WebGLShader?)\n    fun disable(cap: Int)\n    fun disableVertexAttribArray(index: Int)\n    fun drawArrays(mode: Int, first: Int, count: Int)\n    fun drawElements(mode: Int, count: Int, type: Int, offset: Int)\n    fun enable(cap: Int)\n    fun enableVertexAttribArray(index: Int)\n    fun finish()\n    fun flush()\n    fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer?)\n    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture?, level: Int)\n    fun frontFace(mode: Int)\n    fun generateMipmap(target: Int)\n    fun getActiveAttrib(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getActiveUniform(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getAttachedShaders(program: WebGLProgram?): Array<WebGLShader>?\n    fun getAttribLocation(program: WebGLProgram?, name: String): Int\n    fun getBufferParameter(target: Int, pname: Int): Any?\n    fun getParameter(pname: Int): Any?\n    fun getError(): Int\n    fun getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): Any?\n    fun getProgramParameter(program: WebGLProgram?, pname: Int): Any?\n    fun getProgramInfoLog(program: WebGLProgram?): String?\n    fun getRenderbufferParameter(target: Int, pname: Int): Any?\n    fun getShaderParameter(shader: WebGLShader?, pname: Int): Any?\n    fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat?\n    fun getShaderInfoLog(shader: WebGLShader?): String?\n    fun getShaderSource(shader: WebGLShader?): String?\n    fun getTexParameter(target: Int, pname: Int): Any?\n    fun getUniform(program: WebGLProgram?, location: WebGLUniformLocation?): Any?\n    fun getUniformLocation(program: WebGLProgram?, name: String): WebGLUniformLocation?\n    fun getVertexAttrib(index: Int, pname: Int): Any?\n    fun getVertexAttribOffset(index: Int, pname: Int): Int\n    fun hint(target: Int, mode: Int)\n    fun isBuffer(buffer: WebGLBuffer?): Boolean\n    fun isEnabled(cap: Int): Boolean\n    fun isFramebuffer(framebuffer: WebGLFramebuffer?): Boolean\n    fun isProgram(program: WebGLProgram?): Boolean\n    fun isRenderbuffer(renderbuffer: WebGLRenderbuffer?): Boolean\n    fun isShader(shader: WebGLShader?): Boolean\n    fun isTexture(texture: WebGLTexture?): Boolean\n    fun lineWidth(width: Float)\n    fun linkProgram(program: WebGLProgram?)\n    fun pixelStorei(pname: Int, param: Int)\n    fun polygonOffset(factor: Float, units: Float)\n    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int)\n    fun sampleCoverage(value: Float, invert: Boolean)\n    fun scissor(x: Int, y: Int, width: Int, height: Int)\n    fun shaderSource(shader: WebGLShader?, source: String)\n    fun stencilFunc(func: Int, ref: Int, mask: Int)\n    fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int)\n    fun stencilMask(mask: Int)\n    fun stencilMaskSeparate(face: Int, mask: Int)\n    fun stencilOp(fail: Int, zfail: Int, zpass: Int)\n    fun stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int)\n    fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun texImage2D(target: Int, level: Int, internalformat: Int, format: Int, type: Int, source: TexImageSource?)\n    fun texParameterf(target: Int, pname: Int, param: Float)\n    fun texParameteri(target: Int, pname: Int, param: Int)\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, type: Int, source: TexImageSource?)\n    fun uniform1f(location: WebGLUniformLocation?, x: Float)\n    fun uniform1fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform1fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform1i(location: WebGLUniformLocation?, x: Int)\n    fun uniform1iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform1iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform2f(location: WebGLUniformLocation?, x: Float, y: Float)\n    fun uniform2fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform2fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform2i(location: WebGLUniformLocation?, x: Int, y: Int)\n    fun uniform2iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform2iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform3f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float)\n    fun uniform3fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform3fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform3i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int)\n    fun uniform3iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform3iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform4f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float, w: Float)\n    fun uniform4fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform4fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform4i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int, w: Int)\n    fun uniform4iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform4iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun useProgram(program: WebGLProgram?)\n    fun validateProgram(program: WebGLProgram?)\n    fun vertexAttrib1f(index: Int, x: Float)\n    fun vertexAttrib1fv(index: Int, values: dynamic)\n    fun vertexAttrib2f(index: Int, x: Float, y: Float)\n    fun vertexAttrib2fv(index: Int, values: dynamic)\n    fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float)\n    fun vertexAttrib3fv(index: Int, values: dynamic)\n    fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float)\n    fun vertexAttrib4fv(index: Int, values: dynamic)\n    fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int)\n    fun viewport(x: Int, y: Int, width: Int, height: Int)\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderingContext](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderingContext) to Kotlin\n */\npublic external abstract class WebGLRenderingContext : WebGLRenderingContextBase, RenderingContext {\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLContextEvent](https://developer.mozilla.org/en/docs/Web/API/WebGLContextEvent) to Kotlin\n */\npublic external open class WebGLContextEvent(type: String, eventInit: WebGLContextEventInit = definedExternally) : Event {\n    open val statusMessage: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface WebGLContextEventInit : EventInit {\n    var statusMessage: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextEventInit(statusMessage: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): WebGLContextEventInit {\n    val o = js(\"({})\")\n    o[\"statusMessage\"] = statusMessage\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [ArrayBuffer](https://developer.mozilla.org/en/docs/Web/API/ArrayBuffer) to Kotlin\n */\npublic external open class ArrayBuffer(length: Int) : BufferDataSource {\n    open val byteLength: Int\n    fun slice(begin: Int, end: Int = definedExternally): ArrayBuffer\n\n    companion object {\n        fun isView(value: Any?): Boolean\n    }\n}\n\n/**\n * Exposes the JavaScript [ArrayBufferView](https://developer.mozilla.org/en/docs/Web/API/ArrayBufferView) to Kotlin\n */\npublic external interface ArrayBufferView : BufferDataSource {\n    val buffer: ArrayBuffer\n    val byteOffset: Int\n    val byteLength: Int\n}\n\n/**\n * Exposes the JavaScript [Int8Array](https://developer.mozilla.org/en/docs/Web/API/Int8Array) to Kotlin\n */\npublic external open class Int8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int8Array, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int8Array.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int8Array.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint8Array](https://developer.mozilla.org/en/docs/Web/API/Uint8Array) to Kotlin\n */\npublic external open class Uint8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8Array, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8Array.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8Array.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint8ClampedArray](https://developer.mozilla.org/en/docs/Web/API/Uint8ClampedArray) to Kotlin\n */\npublic external open class Uint8ClampedArray : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8ClampedArray)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8ClampedArray, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint8ClampedArray\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8ClampedArray.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8ClampedArray.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Int16Array](https://developer.mozilla.org/en/docs/Web/API/Int16Array) to Kotlin\n */\npublic external open class Int16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int16Array, offset: Int = definedExternally)\n    fun set(array: Array<Short>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int16Array.get(index: Int): Short = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int16Array.set(index: Int, value: Short) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint16Array](https://developer.mozilla.org/en/docs/Web/API/Uint16Array) to Kotlin\n */\npublic external open class Uint16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint16Array, offset: Int = definedExternally)\n    fun set(array: Array<Short>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint16Array.get(index: Int): Short = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint16Array.set(index: Int, value: Short) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Int32Array](https://developer.mozilla.org/en/docs/Web/API/Int32Array) to Kotlin\n */\npublic external open class Int32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int32Array, offset: Int = definedExternally)\n    fun set(array: Array<Int>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int32Array.get(index: Int): Int = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int32Array.set(index: Int, value: Int) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint32Array](https://developer.mozilla.org/en/docs/Web/API/Uint32Array) to Kotlin\n */\npublic external open class Uint32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint32Array, offset: Int = definedExternally)\n    fun set(array: Array<Int>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint32Array.get(index: Int): Int = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint32Array.set(index: Int, value: Int) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Float32Array](https://developer.mozilla.org/en/docs/Web/API/Float32Array) to Kotlin\n */\npublic external open class Float32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float32Array)\n    constructor(array: Array<Float>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float32Array, offset: Int = definedExternally)\n    fun set(array: Array<Float>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Float32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float32Array.get(index: Int): Float = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float32Array.set(index: Int, value: Float) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Float64Array](https://developer.mozilla.org/en/docs/Web/API/Float64Array) to Kotlin\n */\npublic external open class Float64Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float64Array)\n    constructor(array: Array<Double>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float64Array, offset: Int = definedExternally)\n    fun set(array: Array<Double>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Float64Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float64Array.get(index: Int): Double = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float64Array.set(index: Int, value: Double) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [DataView](https://developer.mozilla.org/en/docs/Web/API/DataView) to Kotlin\n */\npublic external open class DataView(buffer: ArrayBuffer, byteOffset: Int = definedExternally, byteLength: Int = definedExternally) : ArrayBufferView {\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun getInt8(byteOffset: Int): Byte\n    fun getUint8(byteOffset: Int): Byte\n    fun getInt16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getUint16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getInt32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getUint32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getFloat32(byteOffset: Int, littleEndian: Boolean = definedExternally): Float\n    fun getFloat64(byteOffset: Int, littleEndian: Boolean = definedExternally): Double\n    fun setInt8(byteOffset: Int, value: Byte)\n    fun setUint8(byteOffset: Int, value: Byte)\n    fun setInt16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally)\n    fun setUint16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally)\n    fun setInt32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally)\n    fun setUint32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally)\n    fun setFloat32(byteOffset: Int, value: Float, littleEndian: Boolean = definedExternally)\n    fun setFloat64(byteOffset: Int, value: Double, littleEndian: Boolean = definedExternally)\n}\n\npublic external interface BufferDataSource\n\npublic external interface TexImageSource",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.files\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob) to Kotlin\n */\npublic external open class Blob(blobParts: Array<dynamic> = definedExternally, options: BlobPropertyBag = definedExternally) : ImageBitmapSource {\n    open val size: Number\n    open val type: String\n    open val isClosed: Boolean\n    fun slice(start: Int = definedExternally, end: Int = definedExternally, contentType: String = definedExternally): Blob\n    fun close()\n}\n\npublic external interface BlobPropertyBag {\n    var type: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BlobPropertyBag(type: String? = \"\"): BlobPropertyBag {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [File](https://developer.mozilla.org/en/docs/Web/API/File) to Kotlin\n */\npublic external open class File(fileBits: Array<dynamic>, fileName: String, options: FilePropertyBag = definedExternally) : Blob {\n    open val name: String\n    open val lastModified: Int\n}\n\npublic external interface FilePropertyBag : BlobPropertyBag {\n    var lastModified: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun FilePropertyBag(lastModified: Int? = undefined, type: String? = \"\"): FilePropertyBag {\n    val o = js(\"({})\")\n    o[\"lastModified\"] = lastModified\n    o[\"type\"] = type\n    return o\n}\n\n/**\n * Exposes the JavaScript [FileList](https://developer.mozilla.org/en/docs/Web/API/FileList) to Kotlin\n */\npublic external abstract class FileList : ItemArrayLike<File> {\n    override fun item(index: Int): File?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun FileList.get(index: Int): File? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [FileReader](https://developer.mozilla.org/en/docs/Web/API/FileReader) to Kotlin\n */\npublic external open class FileReader : EventTarget {\n    open val readyState: Short\n    open val result: dynamic\n    open val error: dynamic\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n    var onprogress: ((ProgressEvent) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    fun readAsArrayBuffer(blob: Blob)\n    fun readAsBinaryString(blob: Blob)\n    fun readAsText(blob: Blob, label: String = definedExternally)\n    fun readAsDataURL(blob: Blob)\n    fun abort()\n\n    companion object {\n        val EMPTY: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FileReaderSync](https://developer.mozilla.org/en/docs/Web/API/FileReaderSync) to Kotlin\n */\npublic external open class FileReaderSync {\n    fun readAsArrayBuffer(blob: Blob): ArrayBuffer\n    fun readAsBinaryString(blob: Blob): String\n    fun readAsText(blob: Blob, label: String = definedExternally): String\n    fun readAsDataURL(blob: Blob): String\n}",null,"var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n",null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.math.abs\n\n@UseExperimental(ExperimentalTime::class)\nprivate inline val storageUnit get() = DurationUnit.NANOSECONDS\n\n/**\n * Represents the amount of time one instant of time is away from another instant.\n *\n * A negative duration is possible in a situation when the second instant is earlier than the first one.\n * An infinite duration value [Duration.INFINITE] can be used to represent infinite timeouts.\n *\n * To construct a duration use either the extension function [toDuration],\n * or the extension properties [hours], [minutes], [seconds], and so on,\n * available on [Int], [Long], and [Double] numeric types.\n *\n * To get the value of this duration expressed in a particular [duration units][DurationUnit]\n * use the functions [toInt], [toLong], and [toDouble]\n * or the properties [inHours], [inMinutes], [inSeconds], [inNanoseconds], and so on.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\npublic inline class Duration internal constructor(internal val value: Double) : Comparable<Duration> {\n// TODO: backend fails on init block, wait for KT-28055\n\n//    init {\n//        require(_value.isNaN().not())\n//    }\n\n    companion object {\n        /** The duration equal to exactly 0 seconds. */\n        public val ZERO: Duration = Duration(0.0)\n\n        /** The duration whose value is positive infinity. It is useful for representing timeouts that should never expire. */\n        public val INFINITE: Duration = Duration(Double.POSITIVE_INFINITY)\n\n        /** Converts the given time duration [value] expressed in the specified [sourceUnit] into the specified [targetUnit]. */\n        public fun convert(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double =\n            convertDurationUnit(value, sourceUnit, targetUnit)\n    }\n\n    // arithmetic operators\n\n    /** Returns the negative of this value. */\n    public operator fun unaryMinus(): Duration = Duration(-value)\n\n    /** Returns a duration whose value is the sum of this and [other] duration values. */\n    public operator fun plus(other: Duration): Duration = Duration(value + other.value)\n\n    /** Returns a duration whose value is the difference between this and [other] duration values. */\n    public operator fun minus(other: Duration): Duration = Duration(value - other.value)\n\n    /** Returns a duration whose value is this duration value multiplied by the given [scale] number. */\n    public operator fun times(scale: Int): Duration = Duration(value * scale)\n\n    /** Returns a duration whose value is this duration value multiplied by the given [scale] number. */\n    public operator fun times(scale: Double): Duration = Duration(value * scale)\n\n    /** Returns a duration whose value is this duration value divided by the given [scale] number. */\n    public operator fun div(scale: Int): Duration = Duration(value / scale)\n\n    /** Returns a duration whose value is this duration value divided by the given [scale] number. */\n    public operator fun div(scale: Double): Duration = Duration(value / scale)\n\n    /** Returns a number that is the ratio of this and [other] duration values. */\n    public operator fun div(other: Duration): Double = this.value / other.value\n\n    /** Returns true, if the duration value is less than zero. */\n    public fun isNegative(): Boolean = value < 0\n\n    /** Returns true, if the duration value is greater than zero. */\n    public fun isPositive(): Boolean = value > 0\n\n    /** Returns true, if the duration value is infinite. */\n    public fun isInfinite(): Boolean = value.isInfinite()\n\n    /** Returns true, if the duration value is finite. */\n    public fun isFinite(): Boolean = value.isFinite()\n\n    /** Returns the absolute value of this value. The returned value is always non-negative. */\n    public val absoluteValue: Duration get() = if (isNegative()) -this else this\n\n    override fun compareTo(other: Duration): Int = this.value.compareTo(other.value)\n\n\n    // splitting to components\n\n    /**\n     * Splits this duration into days, hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration, and its absolute value is less than 24;\n     * - `days` represents the whole number of days in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (days: Int, hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T =\n        action(inDays.toInt(), hoursComponent, minutesComponent, secondsComponent, nanosecondsComponent)\n\n    /**\n     * Splits this duration into hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T =\n        action(inHours.toInt(), minutesComponent, secondsComponent, nanosecondsComponent)\n\n    /**\n     * Splits this duration into minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration.\n     *   If the value doesn't fit in [Int] range, i.e. it's greater than [Int.MAX_VALUE] or less than [Int.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (minutes: Int, seconds: Int, nanoseconds: Int) -> T): T =\n        action(inMinutes.toInt(), secondsComponent, nanosecondsComponent)\n\n    /**\n     * Splits this duration into seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration.\n     *   If the value doesn't fit in [Long] range, i.e. it's greater than [Long.MAX_VALUE] or less than [Long.MIN_VALUE],\n     *   it is coerced into that range.\n     */\n    public inline fun <T> toComponents(action: (seconds: Long, nanoseconds: Int) -> T): T =\n        action(inSeconds.toLong(), nanosecondsComponent)\n\n    @PublishedApi\n    internal val hoursComponent: Int get() = (inHours % 24).toInt()\n    @PublishedApi\n    internal val minutesComponent: Int get() = (inMinutes % 60).toInt()\n    @PublishedApi\n    internal val secondsComponent: Int get() = (inSeconds % 60).toInt()\n    @PublishedApi\n    internal val nanosecondsComponent: Int get() = (inNanoseconds % 1e9).toInt()\n\n\n    // conversion to units\n\n    /** Returns the value of this duration expressed as a [Double] number of the specified [unit]. */\n    public fun toDouble(unit: DurationUnit): Double = convertDurationUnit(value, storageUnit, unit)\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of the specified [unit].\n     *\n     * If the value doesn't fit in the range of [Long] type, it is coerced into that range, see the conversion [Double.toLong] for details.\n     */\n    public fun toLong(unit: DurationUnit): Long = toDouble(unit).toLong()\n\n    /**\n     * Returns the value of this duration expressed as an [Int] number of the specified [unit].\n     *\n     * If the value doesn't fit in the range of [Int] type, it is coerced into that range, see the conversion [Double.toInt] for details.\n     */\n    public fun toInt(unit: DurationUnit): Int = toDouble(unit).toInt()\n\n    /** The value of this duration expressed as a [Double] number of days. */\n    public val inDays: Double get() = toDouble(DurationUnit.DAYS)\n\n    /** The value of this duration expressed as a [Double] number of hours. */\n    public val inHours: Double get() = toDouble(DurationUnit.HOURS)\n\n    /** The value of this duration expressed as a [Double] number of minutes. */\n    public val inMinutes: Double get() = toDouble(DurationUnit.MINUTES)\n\n    /** The value of this duration expressed as a [Double] number of seconds. */\n    public val inSeconds: Double get() = toDouble(DurationUnit.SECONDS)\n\n    /** The value of this duration expressed as a [Double] number of milliseconds. */\n    public val inMilliseconds: Double get() = toDouble(DurationUnit.MILLISECONDS)\n\n    /** The value of this duration expressed as a [Double] number of microseconds. */\n    public val inMicroseconds: Double get() = toDouble(DurationUnit.MICROSECONDS)\n\n    /** The value of this duration expressed as a [Double] number of nanoseconds. */\n    public val inNanoseconds: Double get() = toDouble(DurationUnit.NANOSECONDS)\n\n    // shortcuts\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of nanoseconds.\n     *\n     * If the value doesn't fit in the range of [Long] type, it is coerced into that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of nanoseconds is approximately ±292 years.\n     */\n    public fun toLongNanoseconds(): Long = toLong(DurationUnit.NANOSECONDS)\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of milliseconds.\n     *\n     * The value is coerced to the range of [Long] type, if it doesn't fit in that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of milliseconds is approximately ±292 million years.\n     */\n    public fun toLongMilliseconds(): Long = toLong(DurationUnit.MILLISECONDS)\n\n    /**\n     * Returns a string representation of this duration value expressed in the unit which yields the most compact and readable number value.\n     *\n     * Special cases:\n     *  - zero duration is formatted as `\"0s\"`\n     *  - the infinite duration is formatted as `\"Infinity\"` without unit\n     *  - very small durations (less than 1e-15 s) are expressed in seconds and formatted in scientific notation\n     *  - very big durations (more than 1e+7 days) are expressed in days and formatted in scientific notation\n     *\n     * @return the value of duration in the automatically determined unit followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @sample samples.time.Durations.toStringDefault\n     */\n    override fun toString(): String = when {\n        isInfinite() -> value.toString()\n        value == 0.0 -> \"0s\"\n        else -> {\n            val absNs = absoluteValue.inNanoseconds\n            var scientific = false\n            var maxDecimals = 0\n            val unit = when {\n                absNs < 1e-6 -> DurationUnit.SECONDS.also { scientific = true }\n                absNs < 1 -> DurationUnit.NANOSECONDS.also { maxDecimals = 7 }\n                absNs < 1e3 -> DurationUnit.NANOSECONDS\n                absNs < 1e6 -> DurationUnit.MICROSECONDS\n                absNs < 1e9 -> DurationUnit.MILLISECONDS\n                absNs < 1000e9 -> DurationUnit.SECONDS\n                absNs < 60_000e9 -> DurationUnit.MINUTES\n                absNs < 3600_000e9 -> DurationUnit.HOURS\n                absNs < 86400e9 * 1e7 -> DurationUnit.DAYS\n                else -> DurationUnit.DAYS.also { scientific = true }\n            }\n            val value = toDouble(unit)\n            when {\n                scientific -> formatScientific(value)\n                maxDecimals > 0 -> formatUpToDecimals(value, maxDecimals)\n                else -> formatToExactDecimals(value, precision(abs(value)))\n            } + unit.shortName()\n        }\n    }\n\n    private fun precision(value: Double): Int = when {\n        value < 1 -> 3\n        value < 10 -> 2\n        value < 100 -> 1\n        else -> 0\n    }\n\n    /**\n     * Returns a string representation of this duration value expressed in the given [unit]\n     * and formatted with the specified [decimals] number of digits after decimal point.\n     *\n     * Special cases:\n     *  - the infinite duration is formatted as `\"Infinity\"` without unit\n     *\n     * @return the value of duration in the specified [unit] followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @throws IllegalArgumentException if [decimals] is less than zero.\n     *\n     * @sample samples.time.Durations.toStringDecimals\n     */\n    public fun toString(unit: DurationUnit, decimals: Int = 0): String {\n        require(decimals >= 0) { \"decimals must be not negative, but was $decimals\" }\n        if (isInfinite()) return value.toString()\n        val number = toDouble(unit)\n        return when {\n            abs(number) < 1e14 -> formatToExactDecimals(number, decimals.coerceAtMost(12))\n            else -> formatScientific(number)\n        } + unit.shortName()\n    }\n\n\n    /**\n     * Returns an ISO-8601 based string representation of this duration.\n     *\n     * The returned value is presented in the format `PThHmMs.fS`, where `h`, `m`, `s` are the integer components of this duration (see [toComponents])\n     * and `f` is a fractional part of second. Depending on the roundness of the value the fractional part can be formatted with either\n     * 0, 3, 6, or 9 decimal digits.\n     *\n     * If the hours component absolute value of this duration is greater than [Int.MAX_VALUE], it is replaced with [Int.MAX_VALUE],\n     * so the infinite duration is formatted as `\"PT2147483647H\".\n     *\n     * Negative durations are indicated with the sign `-` in the beginning of the returned string, for example, `\"-PT5M30S\"`.\n     *\n     * @sample samples.time.Durations.toIsoString\n     */\n    @UseExperimental(ExperimentalStdlibApi::class)\n    public fun toIsoString(): String = buildString {\n        if (isNegative()) append('-')\n        append(\"PT\")\n        absoluteValue.toComponents { hours, minutes, seconds, nanoseconds ->\n            val hasHours = hours != 0\n            val hasSeconds = seconds != 0 || nanoseconds != 0\n            val hasMinutes = minutes != 0 || (hasSeconds && hasHours)\n            if (hasHours) {\n                append(hours).append('H')\n            }\n            if (hasMinutes) {\n                append(minutes).append('M')\n            }\n            if (hasSeconds || (!hasHours && !hasMinutes)) {\n                append(seconds)\n                if (nanoseconds != 0) {\n                    append('.')\n                    val nss = nanoseconds.toString().padStart(9, '0')\n                    when {\n                        nanoseconds % 1_000_000 == 0 -> appendRange(nss, 0, 3)\n                        nanoseconds % 1_000 == 0 -> appendRange(nss, 0, 6)\n                        else -> append(nss)\n                    }\n                }\n                append('S')\n            }\n        }\n    }\n\n}\n\n// constructing from number of units\n// extension functions\n\n/** Returns a [Duration] equal to this [Int] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Int.toDuration(unit: DurationUnit): Duration = toDouble().toDuration(unit)\n\n/** Returns a [Duration] equal to this [Long] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Long.toDuration(unit: DurationUnit): Duration = toDouble().toDuration(unit)\n\n/** Returns a [Duration] equal to this [Double] number of the specified [unit]. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic fun Double.toDuration(unit: DurationUnit): Duration = Duration(convertDurationUnit(this, unit, storageUnit))\n\n// constructing from number of units\n// extension properties\n\n/** Returns a [Duration] equal to this [Int] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Double] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Int] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Long] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Double] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Int] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Long] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Double] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Int] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Int.days get() = toDuration(DurationUnit.DAYS)\n\n/** Returns a [Duration] equal to this [Long] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Long.days get() = toDuration(DurationUnit.DAYS)\n\n/** Returns a [Duration] equal to this [Double] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\npublic val Double.days get() = toDuration(DurationUnit.DAYS)\n\n\n/** Returns a duration whose value is the specified [duration] value multiplied by this number. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@kotlin.internal.InlineOnly\npublic inline operator fun Int.times(duration: Duration): Duration = duration * this\n\n/** Returns a duration whose value is the specified [duration] value multiplied by this number. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@kotlin.internal.InlineOnly\npublic inline operator fun Double.times(duration: Duration): Duration = duration * this\n\n\ninternal expect fun formatToExactDecimals(value: Double, decimals: Int): String\ninternal expect fun formatUpToDecimals(value: Double, decimals: Int): String\ninternal expect fun formatScientific(value: Double): String",null,null,null,"package org.gamezeug.digitspuzzle.ui\n\nimport org.gamezeug.digitspuzzle.domain.PuzzleSolver\nimport org.gamezeug.digitspuzzle.domain.PuzzleState\nimport kotlin.time.ExperimentalTime\nimport kotlin.time.TimeMark\nimport kotlin.time.TimeSource\n\n@OptIn(ExperimentalTime::class)\ndata class PuzzleUiState constructor(\n        var lastPuzzleState: PuzzleState,\n        var stateCounter: Long = 0,\n        var numberOfStatesToTryEachFrame: Int = 100,\n        var puzzleSolver: PuzzleSolver? = null,\n        val puzzleStartTime: TimeMark = TimeSource.Monotonic.markNow()\n)","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return ArrayList<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction)\n}\n\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashSet<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashSet<E>(mapCapacity(capacity)).apply(builderAction)\n}\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal actual fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","import com.soywiz.korge.Korge\nimport com.soywiz.korge.scene.Module\nimport com.soywiz.korim.color.Colors\nimport com.soywiz.korinject.AsyncInjector\nimport org.gamezeug.digitspuzzle.domain.PuzzlePieceFactory\nimport org.gamezeug.digitspuzzle.domain.PuzzleSolver\nimport org.gamezeug.digitspuzzle.domain.PuzzleStateFactory\nimport org.gamezeug.digitspuzzle.ui.PuzzleScene\nimport org.gamezeug.digitspuzzle.ui.PuzzleUiState\n\nsuspend fun main() = Korge(\n\t\tconfig = Korge.Config(module = PuzzleModule)\n)\n\nobject PuzzleModule: Module() {\n\n\toverride val mainScene = PuzzleScene::class\n\toverride val bgcolor = Colors[\"#444444\"]\n\n\toverride suspend fun AsyncInjector.configure() {\n\t\tval pieces = PuzzlePieceFactory.buildAll()\n\t\tval puzzleState = PuzzleStateFactory.createInitialPuzzleState(pieces)\n\t\tval puzzleUiState = PuzzleUiState(\n\t\t\t\tlastPuzzleState = puzzleState,\n\t\t\t\tpuzzleSolver = PuzzleSolver(puzzleState)\n\t\t)\n\t\tmapInstance(puzzleUiState)\n\t\tmapPrototype { PuzzleScene(get()) }\n\t}\n\n}","package org.gamezeug.digitspuzzle.ui\n\nimport com.soywiz.korge.scene.Scene\nimport com.soywiz.korge.view.*\nimport com.soywiz.korim.color.Colors\nimport com.soywiz.korim.color.RGBA\nimport com.soywiz.korim.vector.Context2d\nimport com.soywiz.korio.file.std.resourcesVfs\nimport com.soywiz.korma.geom.vector.line\nimport com.soywiz.korma.geom.vector.rect\nimport org.gamezeug.digitspuzzle.domain.Tile\nimport kotlin.time.ExperimentalTime\n\n@OptIn(ExperimentalTime::class)\nclass PuzzleScene(\n\t\tprivate val uiState: PuzzleUiState\n): Scene() {\n\n\toverride suspend fun Container.sceneInit() {\n\n\t\taddUpdater {\n\t\t\tuiState.puzzleSolver?.let {\n\t\t\t\tfor (i in 1..uiState.numberOfStatesToTryEachFrame) {\n\t\t\t\t\tif (it.hasNextState() && !uiState.lastPuzzleState.isSolved()) {\n\t\t\t\t\t\tuiState.lastPuzzleState = it.nextState()\n\t\t\t\t\t\tuiState.stateCounter++\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tval tileWidth: Double = this@PuzzleScene.views.virtualWidth.toDouble() / uiState.lastPuzzleState.area.numberOfColumns\n\t\tval tileHeight: Double = this@PuzzleScene.views.virtualHeight.toDouble() / uiState.lastPuzzleState.area.numberOfRows\n\n\t\tgraphics {\n\t\t\tuseNativeRendering = true\n\t\t\tval tilePrinter = TilePrinter(this, tileWidth, tileHeight)\n\t\t\taddUpdater {\n\t\t\t\tclear()\n\t\t\t\tif (!uiState.lastPuzzleState.isSolved()) {\n\t\t\t\t\tfor ((rowIndex, row) in uiState.lastPuzzleState.area.rows.withIndex()) {\n\t\t\t\t\t\tfor ((colIndex, tile) in row.tiles.withIndex()) {\n\t\t\t\t\t\t\ttilePrinter.printGrids(colIndex, rowIndex)\n\t\t\t\t\t\t\ttilePrinter.printTile(colIndex, rowIndex, tile)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttext(uiState.stateCounter.toString()) {\n\t\t\t\tposition(10, 10)\n\t\t\t\taddUpdater { text = uiState.stateCounter.toString() }\n\t\t\t}\n\t\t\ttext(\"\") {\n\t\t\t\tposition(this@PuzzleScene.views.virtualWidth - 120, 10)\n\t\t\t\taddUpdater {\n\t\t\t\t\tif (!uiState.lastPuzzleState.isSolved()) {\n\t\t\t\t\t\ttext = uiState.puzzleStartTime.elapsedNow().toComponents { hours, minutes, seconds, _\n\t\t\t\t\t\t\t->\n\t\t\t\t\t\t\t\"${formatTimeComponent(hours)}:${formatTimeComponent(minutes)}:${formatTimeComponent(seconds)}\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttext(\"\") {\n\t\t\t\tposition(10, this@PuzzleScene.views.virtualHeight - 30)\n\t\t\t\taddUpdater {\n\t\t\t\t\tif (!uiState.lastPuzzleState.isSolved()) {\n\t\t\t\t\t\tval statesPerSecondRate: Double = uiState.stateCounter.toDouble() / uiState.puzzleStartTime.elapsedNow().inSeconds\n\t\t\t\t\t\ttext = statesPerSecondRate.toString()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttext(getVersion()) {\n\t\t\t\tposition(this@PuzzleScene.views.virtualWidth - 95, this@PuzzleScene.views.virtualHeight - 30)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate suspend fun getVersion(): String {\n\t\treturn resourcesVfs[\"version.txt\"].readString()\n\t}\n\n}\n\nprivate fun chooseSegmentColor(segmentChar: Char): RGBA {\n\treturn when (segmentChar) {\n\t\t'0' -> Colors[\"#FF0000\"]\n\t\t'1' -> Colors[\"#FF7F00\"]\n\t\t'2' -> Colors[\"#FFFF00\"]\n\t\t'3' -> Colors[\"#7FFF00\"]\n\t\t'4' -> Colors[\"#00FFFF\"]\n\t\t'5' -> Colors[\"#007FFF\"]\n\t\t'6' -> Colors[\"#0000FF\"]\n\t\t'7' -> Colors[\"#7F00FF\"]\n\t\t'8' -> Colors[\"#FF00FF\"]\n\t\t'9' -> Colors[\"#FF7FFF\"]\n\t\t'X' -> Colors[\"#000000\"]\n\t\telse -> Colors[\"#FFFFFF\"]\n\t}\n}\n\nprivate fun formatTimeComponent(timeComponent: Int) = timeComponent.toString().padStart(2, '0')\n\nclass TilePrinter(private val graphics: Graphics, private val tileWidth: Double, private val tileHeight: Double) {\n\n\tfun printGrids(x: Int, y: Int) {\n\t\tval x0: Double = x * tileWidth\n\t\tval y0: Double = y * tileHeight\n\t\tval x1: Double = x0 + tileWidth\n\t\tval y1: Double = y0 + tileHeight\n\t\tgraphics.stroke(Colors[\"#333333\"], Context2d.StrokeInfo(thickness = 2.0)) {\n\t\t\trect(x0, y0, tileWidth, tileHeight)\n\t\t}\n\t\tgraphics.stroke(Colors[\"#333333\"], Context2d.StrokeInfo(thickness = 1.0)) {\n\t\t\tline(x0, y0, x1, y1)\n\t\t\tline(x1, y0, x0, y1)\n\t\t}\n\t}\n\n\tfun printTile(x: Int, y: Int, tile: Tile) {\n\t\tval x0: Double = x * tileWidth\n\t\tval y0: Double = y * tileHeight\n\t\tval x1: Double = x0 + tileWidth\n\t\tval y1: Double = y0 + tileHeight\n\t\tval xCenter: Double = x0 + (tileWidth / 2)\n\t\tval yCenter: Double = y0 + (tileHeight / 2)\n\n\t\tif (tile.leftSegment != ' ') {\n\t\t\tgraphics.fill(chooseSegmentColor(tile.leftSegment)) {\n\t\t\t\tline(x0, y0, xCenter, yCenter)\n\t\t\t\tlineTo(x0, y1)\n\t\t\t\tlineTo(x0, y0)\n\t\t\t}\n\t\t}\n\t\tif (tile.topSegment != ' ') {\n\t\t\tgraphics.fill(chooseSegmentColor(tile.topSegment)) {\n\t\t\t\tline(x0, y0, x1, y0)\n\t\t\t\tlineTo(xCenter, yCenter)\n\t\t\t\tlineTo(x0, y0)\n\t\t\t}\n\t\t}\n\t\tif (tile.rightSegment != ' ') {\n\t\t\tgraphics.fill(chooseSegmentColor(tile.rightSegment)) {\n\t\t\t\tline(x1, y0, xCenter, yCenter)\n\t\t\t\tlineTo(x1, y1)\n\t\t\t\tlineTo(x1, y0)\n\t\t\t}\n\t\t}\n\t\tif (tile.bottomSegment != ' ') {\n\t\t\tgraphics.fill(chooseSegmentColor(tile.bottomSegment)) {\n\t\t\t\tline(x0, y1, x1, y1)\n\t\t\t\tlineTo(xCenter, yCenter)\n\t\t\t\tlineTo(x0, y1)\n\t\t\t}\n\t\t}\n\t}\n}","package org.gamezeug.digitspuzzle.domain\n\n/**\n * A move that a player can do to put a puzzle piece to the puzzle board.\n * If the piece gets mirrored and rotated, the mirroring applies first.\n */\ndata class Move(\n        val coordinate: PuzzleAreaCoordinate,\n        val piece: PuzzlePiece,\n        val rotation: Rotation = Rotation.NO_ROTATION,\n        val mirroring: Mirroring = Mirroring.NO_MIRRORING\n) {\n    fun getEffectiveArea(): PuzzleArea {\n        return piece.mirrorBy(mirroring).rotateBy(rotation).area\n    }\n\n    fun canBePlacedOn(area: PuzzleArea): Boolean {\n        val movesEffectiveArea = getEffectiveArea()\n        if (!area.hasRoomFor(movesEffectiveArea, coordinate)) return false\n        for ((rowIndex, row) in movesEffectiveArea.rows.withIndex()) {\n            for ((colIndex, newTile) in row.tiles.withIndex()) {\n                val tileInThePuzzle = area.getTile(colIndex + coordinate.x, rowIndex + coordinate.y)\n                if (!newTile.isDisjoint(tileInThePuzzle)) return false\n            }\n        }\n        return true\n    }\n\n    override fun toString(): String = getEffectiveArea().toString()\n    override fun hashCode(): Int = getEffectiveArea().hashCode() * coordinate.hashCode()\n    override fun equals(other: Any?): Boolean {\n        return when (other) {\n            is Move -> getEffectiveArea() == other.getEffectiveArea() && coordinate == other.coordinate\n            else -> false\n        }\n    }\n}\n\nenum class Rotation {\n    NO_ROTATION,\n    ROTATE_90_DEGREES_CLOCKWISE,\n    ROTATE_180_DEGREES,\n    ROTATE_270_DEGREES_CLOCKWISE\n}\n\nenum class Mirroring {\n    NO_MIRRORING,\n    MIRROR_HORIZONTALLY\n}","package org.gamezeug.digitspuzzle.domain\n\nimport com.soywiz.kmem.isEven\n\n/**\n * An immutable tiled area consisting of rows and columns.\n */\ndata class PuzzleArea(val rows: List<PuzzleRow>) {\n    val numberOfRows = rows.size\n    val numberOfColumns = rows[0].size\n\n    fun replaceTiles(vararg replacements: TileReplacement): PuzzleArea {\n        val mutableArea = MutableList(numberOfRows) { y -> MutableList(numberOfColumns) { x -> rows[y].tiles[x] } }\n        replacements.forEach { mutableArea[it.coordinate.y][it.coordinate.x] = it.newTile }\n        return PuzzleArea(mutableArea.map { PuzzleRow(it) })\n    }\n\n    fun getTile(x: Int, y: Int): Tile {\n        return rows[y].tiles[x]\n    }\n\n    fun hasRoomFor(newArea: PuzzleArea, newAreaCoordinate: PuzzleAreaCoordinate): Boolean {\n        val wideEnough = this.numberOfColumns >= (newArea.numberOfColumns + newAreaCoordinate.x)\n        val tallEnough = this.numberOfRows >= (newArea.numberOfRows + newAreaCoordinate.y)\n        return wideEnough && tallEnough\n    }\n\n    fun getAvailableCoordinates(): Set<PuzzleAreaCoordinate> {\n        val availableCoordinates = mutableSetOf<PuzzleAreaCoordinate>()\n        for (y in 0 until numberOfRows) {\n            if (y.isEven) {\n                for (x in 0 until numberOfColumns) {\n                    if (x.isEven) {\n                        availableCoordinates.add(PuzzleAreaCoordinate(x, y))\n                    }\n                }\n            }\n        }\n        return availableCoordinates\n    }\n\n    fun getNumberOfFilledTiles(): Int {\n        var filledTiles = 0\n        for (y in 0 until numberOfRows) {\n            for (x in 0 until numberOfColumns) {\n                if (getTile(x, y).hasAnyFilledSegment()) {\n                    filledTiles++\n                }\n            }\n        }\n        return filledTiles\n    }\n\n    /**\n     * Calculates a map of blank areas of coordinates to the number of tiles containing blank segments.\n     * This is only an approximate implementation.\n     * If a tile contains multiple, not connected blank segments, it still counts.\n     * The coordinate refers to the top left corner of the blank area.\n     * For example, for a is 1x1 area and which contains a tile with three blank segments,\n     * this return would return a map with a single entry \"1x1\" to \"3\".\n     */\n    fun getBlankAreaMap(): Map<PuzzleAreaCoordinate, Int> {\n        val foundBlankTiles = mutableSetOf<PuzzleAreaCoordinate>()\n        val blankAreaMap: MutableMap<PuzzleAreaCoordinate, Int> = mutableMapOf()\n        for (y in 0 until numberOfRows) {\n            for (x in 0 until numberOfColumns) {\n                val coordinate = PuzzleAreaCoordinate(x, y)\n                if (!foundBlankTiles.contains(coordinate)) {\n                    val tileNavigator = TileNavigator(this, coordinate)\n                    val blankTiles = mutableSetOf<PuzzleAreaCoordinate>()\n                    fillNeighborBlankTilesRecursive(tileNavigator, blankTiles)\n                    if (blankTiles.isNotEmpty()) {\n                        foundBlankTiles.addAll(blankTiles)\n                        blankAreaMap[coordinate] = blankTiles.size\n                    }\n                }\n            }\n        }\n        return blankAreaMap\n    }\n\n    private fun fillNeighborBlankTilesRecursive(\n            tileNavigator: TileNavigator,\n            blankTiles: MutableSet<PuzzleAreaCoordinate>\n    ) {\n        if (blankTiles.contains(tileNavigator.coordinate) || !tileNavigator.getTile().hasAnyEmptySegment()) {\n            return\n        }\n        blankTiles.add(tileNavigator.coordinate)\n        if (tileNavigator.hasLeftTile()\n                && tileNavigator.getTile().hasEmptyLeftSegment()\n                && tileNavigator.left().getTile().hasEmptyRightSegment()) {\n            fillNeighborBlankTilesRecursive(tileNavigator.left(), blankTiles)\n        }\n        if (tileNavigator.hasBottomTile()\n                && tileNavigator.getTile().hasEmptyBottomSegment()\n                && tileNavigator.bottom().getTile().hasEmptyTopSegment()) {\n            fillNeighborBlankTilesRecursive(tileNavigator.bottom(), blankTiles)\n        }\n        if (tileNavigator.hasRightTile()\n                && tileNavigator.getTile().hasEmptyRightSegment()\n                && tileNavigator.right().getTile().hasEmptyLeftSegment()) {\n            fillNeighborBlankTilesRecursive(tileNavigator.right(), blankTiles)\n        }\n    }\n\n    override fun toString(): String {\n        val stringBuilder = StringBuilder()\n        for ((index, row) in rows.withIndex()) {\n            for (tile in row.tiles) {\n                stringBuilder.append(tile.toStringFirstLine())\n            }\n            stringBuilder.append(\"\\n\")\n            for (tile in row.tiles) {\n                stringBuilder.append(tile.toStringSecondLine())\n            }\n            stringBuilder.append(\"\\n\")\n            for (tile in row.tiles) {\n                stringBuilder.append(tile.toStringThirdLine())\n            }\n            if (index != numberOfRows - 1) {\n                stringBuilder.append(\"\\n\")\n            }\n        }\n        return stringBuilder.toString()\n    }\n}\n\nobject PuzzleAreaFactory {\n    fun buildPuzzleArea(numberOfRows: Int, numberOfColumns: Int): PuzzleArea {\n        val puzzleRows = MutableList(numberOfRows) { _ -> PuzzleRowFactory.buildPuzzleRow(numberOfColumns) }\n        return PuzzleArea(puzzleRows)\n    }\n    fun buildPuzzleAreaWithEdges(numberOfRows: Int, numberOfColumns: Int): PuzzleArea {\n        val emptyArea = buildPuzzleArea(numberOfRows, numberOfColumns)\n        return emptyArea.replaceTiles(\n                TileReplacement(PuzzleAreaCoordinate(0, 0), buildTopLeftTile()),\n                TileReplacement(PuzzleAreaCoordinate(numberOfColumns - 1, 0), buildTopRightTile()),\n                TileReplacement(PuzzleAreaCoordinate(0, numberOfRows - 1), buildBottomLeftTile()),\n                TileReplacement(PuzzleAreaCoordinate(numberOfColumns - 1, numberOfRows - 1), buildBottomRightTile())\n        )\n    }\n    private fun buildTopLeftTile() = Tile(topSegment = 'X', leftSegment = 'X')\n    private fun buildTopRightTile() = Tile(topSegment = 'X', rightSegment = 'X')\n    private fun buildBottomLeftTile() = Tile(bottomSegment = 'X', leftSegment = 'X')\n    private fun buildBottomRightTile() = Tile(bottomSegment = 'X', rightSegment = 'X')\n\n    fun buildFromCsv(charToPrint: Char, csv: String): PuzzleArea {\n        val rows = mutableListOf<PuzzleRow>()\n        for (line in csv.lines()) {\n            val tiles = line.split(\",\")\n                    .map { TileFactory.createFromTileDescription(it, charToPrint) }\n                    .toList()\n            rows.add(PuzzleRow(tiles))\n        }\n        return PuzzleArea(rows)\n    }\n}\n\nclass TileNavigator(private val area: PuzzleArea, val coordinate: PuzzleAreaCoordinate) {\n    fun hasLeftTile() = coordinate.x > 0\n    fun hasRightTile() = coordinate.x + 1 < area.numberOfColumns\n    fun hasBottomTile() = coordinate.y + 1 < area.numberOfRows\n    fun getTile() = area.getTile(coordinate.x , coordinate.y)\n    fun left(): TileNavigator {\n        val newCoordinate = PuzzleAreaCoordinate(coordinate.x - 1, coordinate.y)\n        return TileNavigator(area, newCoordinate)\n    }\n    fun right(): TileNavigator {\n        val newCoordinate = PuzzleAreaCoordinate(coordinate.x + 1, coordinate.y)\n        return TileNavigator(area, newCoordinate)\n    }\n    fun bottom(): TileNavigator {\n        val newCoordinate = PuzzleAreaCoordinate(coordinate.x, coordinate.y + 1)\n        return TileNavigator(area, newCoordinate)\n    }\n}\n\ndata class PuzzleAreaCoordinate(val x: Int, val y: Int)\n\ndata class TileReplacement(val coordinate: PuzzleAreaCoordinate, val newTile: Tile)\n\ndata class PuzzleRow(val tiles: List<Tile>) {\n    val size = tiles.size\n}\n\nobject PuzzleRowFactory {\n    fun buildPuzzleRow(numberOfTiles: Int): PuzzleRow = PuzzleRow(List(numberOfTiles) { _ -> emptyTile() })\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","package org.gamezeug.digitspuzzle.domain\n\ndata class PuzzlePiece(val name: String, val area: PuzzleArea) {\n\n    fun rotateBy(rotation: Rotation): PuzzlePiece {\n        return when (rotation) {\n            Rotation.NO_ROTATION -> this\n            Rotation.ROTATE_90_DEGREES_CLOCKWISE -> rotate90DegreesClockwise()\n            Rotation.ROTATE_180_DEGREES -> rotate180Degrees()\n            Rotation.ROTATE_270_DEGREES_CLOCKWISE -> rotate270DegreesClockwise()\n        }\n    }\n\n    fun rotate90DegreesClockwise(): PuzzlePiece {\n        val newNumberOfColumns = area.numberOfRows\n        val newNumberOfRows = area.numberOfColumns\n        val newRows = List(newNumberOfRows) {\n            y -> List(newNumberOfColumns) {\n                x -> area.getTile(y, area.numberOfRows - 1 - x).rotate90DegreesClockwise()\n            }\n        }\n        return PuzzlePiece(name, PuzzleArea(newRows.map { PuzzleRow(it) }))\n    }\n\n    fun rotate180Degrees(): PuzzlePiece {\n        return rotate90DegreesClockwise().rotate90DegreesClockwise()\n    }\n\n    fun rotate270DegreesClockwise(): PuzzlePiece {\n        return rotate180Degrees().rotate90DegreesClockwise()\n    }\n\n    fun mirrorBy(mirroring: Mirroring): PuzzlePiece {\n        return when (mirroring) {\n            Mirroring.NO_MIRRORING -> this\n            Mirroring.MIRROR_HORIZONTALLY -> mirrorHorizontally()\n        }\n    }\n\n    fun mirrorHorizontally(): PuzzlePiece {\n        val newRows = List(area.numberOfRows) {\n            y -> List(area.numberOfColumns) {\n            x -> area.getTile(area.numberOfColumns - 1 - x, y).mirrorHorizontally()\n        }\n        }\n        return PuzzlePiece(name, PuzzleArea(newRows.map { PuzzleRow(it) }))\n    }\n\n    override fun toString() = area.toString()\n}\n\n/**\n * Reads and constructs PuzzlePieces from CSV in format such as:\n * XXXX,XXXX,XXXX\n * X := \"F\" | \"T\" | \"B\" | \"L\" | \"R\" | \" \"\n */\nobject PuzzlePieceFactory {\n\n    private val csvDigit0 = \"\"\"\n        BR  ,F  ,LB\n        F   ,   ,F\n        T   ,   ,TRB\n        F   ,   ,F\n        TR  ,F  ,LT\n    \"\"\".trimIndent()\n\n    private val csvDigit1 = \"\"\"\n        B\n        F\n        TBL\n        F\n        T\n    \"\"\".trimIndent()\n\n    private val csvDigit2 = \"\"\"\n        R   ,F  ,LB\n            ,   ,F\n        BR  ,F  ,LT\n        F   ,   ,\n        TR  ,F  ,L\n    \"\"\".trimIndent()\n\n    private val csvDigit3 = \"\"\"\n        R   ,F  ,LB\n            ,   ,F\n        R   ,F  ,LTB\n            ,   ,F\n        R   ,F  ,LT\n    \"\"\".trimIndent()\n\n    private val csvDigit4 = \"\"\"\n        B   ,   ,B\n        F   ,   ,F\n        TRB ,F  ,LT\n        F   ,   ,\n        T   ,   ,\n    \"\"\".trimIndent()\n\n    private val csvDigit6 = \"\"\"\n        BR  ,F  ,L\n        F   ,   ,\n        TRB ,F  ,LB\n        F   ,   ,F\n        TR  ,F  ,LT\n    \"\"\".trimIndent()\n\n    private val csvDigit7 = \"\"\"\n        R   ,F  ,LB\n            ,   ,F\n            ,   ,TRB\n            ,   ,F\n            ,   ,T\n    \"\"\".trimIndent()\n\n    private val csvDigit8 = \"\"\"\n        BR  ,F  ,LB\n        F   ,   ,F\n        TRB ,F  ,LTB\n        F   ,   ,F\n        TR  ,F  ,LT\n    \"\"\".trimIndent()\n\n    fun build0(): PuzzlePiece = buildFromCsv('0', csvDigit0)\n    fun build1(): PuzzlePiece = buildFromCsv('1', csvDigit1)\n    fun build2(): PuzzlePiece = buildFromCsv('2', csvDigit2)\n    fun build3(): PuzzlePiece = buildFromCsv('3', csvDigit3)\n    fun build4(): PuzzlePiece = buildFromCsv('4', csvDigit4)\n    fun build5(): PuzzlePiece = buildFromCsv('5', csvDigit2).mirrorHorizontally()\n    fun build6(): PuzzlePiece = buildFromCsv('6', csvDigit6)\n    fun build7(): PuzzlePiece = buildFromCsv('7', csvDigit7)\n    fun build8(): PuzzlePiece = buildFromCsv('8', csvDigit8)\n    fun build9(): PuzzlePiece = buildFromCsv('9', csvDigit6).rotate180Degrees()\n\n    fun buildAll() = listOf(\n        build0(),\n        build1(),\n        build2(),\n        build3(),\n        build4(),\n        build5(),\n        build6(),\n        build7(),\n        build8(),\n        build9()\n    )\n\n    fun buildFromCsv(charToPrint: Char, csv: String): PuzzlePiece {\n        val area = PuzzleAreaFactory.buildFromCsv(charToPrint, csv)\n        val puzzlePiece = PuzzlePiece(charToPrint.toString(), area)\n        return puzzlePiece\n    }\n\n}\n","package org.gamezeug.digitspuzzle.domain\n\n@OptIn(ExperimentalStdlibApi::class)\nclass PuzzleSolver(initialState: PuzzleState) {\n\n    private val statesToCheck = mutableListOf(initialState)\n\n    init {\n        nextState()\n    }\n\n    fun hasNextState() = statesToCheck.isNotEmpty()\n\n    /**\n     * Returns the next puzzle state. If this state is not a dead end, calculates the next states based on that one.\n     */\n    fun nextState(): PuzzleState {\n        val nextState = statesToCheck.removeLast()\n        if (!nextState.isSolved() && !nextState.isDeadEnd()) {\n            val availableValidMoves = nextState.getAvailableValidMoves().reversed()\n            statesToCheck.addAll(availableValidMoves.map { nextState.placePiece(it) })\n        }\n        return nextState\n    }\n\n}\n\n","package org.gamezeug.digitspuzzle.domain\n\ndata class PuzzleState(\n        val area: PuzzleArea,\n        val availablePieces: List<PuzzlePiece>,\n        val moves: List<Move> = listOf(),\n        val usedPieces: List<PuzzlePiece> = listOf()\n) {\n    fun isSolved() = availablePieces.isEmpty()\n    fun hasAvailablePiece(puzzlePiece: PuzzlePiece)= availablePieces.contains(puzzlePiece)\n\n    fun placePiece(move: Move): PuzzleState {\n        if (!hasAvailablePiece(move.piece)) {\n            throw IllegalArgumentException(\"The move is not valid. The piece is not available.\")\n        }\n        if (!move.canBePlacedOn(area)) {\n            throw IllegalArgumentException(\"The move is not valid. The piece does not fit in.\")\n        }\n        val tileReplacements = mutableListOf<TileReplacement>()\n\n        for ((rowIndex, row) in move.getEffectiveArea().rows.withIndex()) {\n            for ((colIndex, newTile) in row.tiles.withIndex()) {\n                val tileInThePuzzle = area.getTile(colIndex + move.coordinate.x, rowIndex + move.coordinate.y)\n                val mergedTile = tileInThePuzzle.merge(newTile)\n                val coordinate = PuzzleAreaCoordinate(colIndex + move.coordinate.x, rowIndex + move.coordinate.y)\n                tileReplacements.add(TileReplacement(coordinate, mergedTile))\n            }\n        }\n\n        return PuzzleState(\n                area = area.replaceTiles(*tileReplacements.toTypedArray()),\n                availablePieces = availablePieces.minus(move.piece),\n                moves = moves.plus(move),\n                usedPieces = usedPieces.plus(move.piece)\n        )\n    }\n\n    /**\n     * Get all available valid moves without duplicates. Warning: Incoming loop of loops!\n     */\n    fun getAvailableValidMoves(): List<Move> {\n        val availableValidMoves = mutableListOf<Move>()\n        for (coordinate in area.getAvailableCoordinates()) {\n            for (piece in availablePieces) {\n                for (rotation in Rotation.values()) {\n                    for (mirroring in Mirroring.values()) {\n                        val move = Move(coordinate, piece, rotation, mirroring)\n                        if (move.canBePlacedOn(area)) {\n                            availableValidMoves.add(move)\n                        }\n                    }\n                }\n            }\n        }\n        return availableValidMoves.toList()\n    }\n\n    /**\n     * Check if puzzle state is a dead end: We can definitely say that it does not make sense to continue solving.\n     */\n    fun isDeadEnd(): Boolean {\n        // Check if the puzzle contains a blank area which is too small for the smallest available piece\n        val areaOfSmallestPiece = availablePieces.map { it.area.getNumberOfFilledTiles() }.min()!!\n        val tooSmallBlankArea = area.getBlankAreaMap().values.find { it in 2..areaOfSmallestPiece }\n        return tooSmallBlankArea != null\n    }\n\n    override fun toString() = area.toString()\n}\n\nobject PuzzleStateFactory {\n\n    fun createInitialPuzzleState(availablePieces: List<PuzzlePiece>): PuzzleState {\n        val initialArea = PuzzleAreaFactory.buildPuzzleAreaWithEdges(9, 11)\n        return PuzzleState(initialArea, availablePieces)\n    }\n\n}\n\n","package org.gamezeug.digitspuzzle.domain\n\n/**\n * Represents a tile of the puzzle board. Each tile itself is divided into 4 segments (left, top, right, bottom)\n * which may be occupied separately. If a segment is not occupied, it contains the empty space char: ' '\n *\n * <pre>\n * [ X ]\n * [X X]\n * [ X ]\n * </pre>\n */\ndata class Tile(\n        val leftSegment: Char = ' ',\n        val topSegment: Char = ' ',\n        val rightSegment: Char = ' ',\n        val bottomSegment: Char = ' '\n) {\n\n    fun isDisjoint(other: Tile): Boolean {\n        return (this.hasEmptyLeftSegment() || other.hasEmptyLeftSegment())\n                && (this.hasEmptyTopSegment() || other.hasEmptyTopSegment())\n                && (this.hasEmptyRightSegment() || other.hasEmptyRightSegment())\n                && (this.hasEmptyBottomSegment() || other.hasEmptyBottomSegment())\n    }\n\n    fun merge(other: Tile): Tile {\n        return Tile(\n                leftSegment = if (hasEmptyLeftSegment()) other.leftSegment else this.leftSegment,\n                topSegment = if (hasEmptyTopSegment()) other.topSegment else this.topSegment,\n                rightSegment = if (hasEmptyRightSegment()) other.rightSegment else this.rightSegment,\n                bottomSegment = if (hasEmptyBottomSegment()) other.bottomSegment else this.bottomSegment\n        )\n    }\n\n    fun rotate90DegreesClockwise(): Tile {\n        return Tile(\n                leftSegment = bottomSegment,\n                topSegment = leftSegment,\n                rightSegment = topSegment,\n                bottomSegment = rightSegment\n        )\n    }\n\n    fun mirrorHorizontally(): Tile {\n        return Tile(\n                leftSegment = rightSegment,\n                topSegment = topSegment,\n                rightSegment = leftSegment,\n                bottomSegment = bottomSegment\n        )\n    }\n\n    fun hasAnyEmptySegment(): Boolean {\n        return hasEmptyLeftSegment() || hasEmptyTopSegment() || hasEmptyRightSegment() || hasEmptyBottomSegment()\n    }\n    fun hasEmptyLeftSegment() = leftSegment == ' '\n    fun hasEmptyTopSegment() = topSegment == ' '\n    fun hasEmptyRightSegment() = rightSegment == ' '\n    fun hasEmptyBottomSegment() = bottomSegment == ' '\n    fun hasAnyFilledSegment() = getNumberOfEmptySegments() != 4\n\n    fun getNumberOfEmptySegments(): Int {\n        var numberOfEmptySegments = 0\n        if (hasEmptyLeftSegment()) numberOfEmptySegments++\n        if (hasEmptyTopSegment()) numberOfEmptySegments++\n        if (hasEmptyRightSegment()) numberOfEmptySegments++\n        if (hasEmptyBottomSegment()) numberOfEmptySegments++\n        return numberOfEmptySegments\n    }\n\n    override fun toString(): String {\n        return toStringFirstLine() + \"\\n\" + toStringSecondLine() + \"\\n\" + toStringThirdLine()\n    }\n\n    fun toStringFirstLine(): String {\n        return \"[ $topSegment ]\"\n    }\n\n    fun toStringSecondLine(): String {\n        return \"[$leftSegment $rightSegment]\"\n    }\n\n    fun toStringThirdLine(): String {\n        return \"[ $bottomSegment ]\"\n    }\n}\n\nobject TileFactory {\n    fun createFromTileDescription(tileDescription: String, charToPrint: Char): Tile {\n        if (tileDescription.contains(\"F\")) return fullTile(charToPrint)\n        val left = if (tileDescription.contains(\"L\")) charToPrint else ' '\n        val top = if (tileDescription.contains(\"T\")) charToPrint else ' '\n        val right = if (tileDescription.contains(\"R\")) charToPrint else ' '\n        val bottom = if (tileDescription.contains(\"B\")) charToPrint else ' '\n        return Tile(left, top, right, bottom)\n    }\n}\n\nfun emptyTile() = Tile()\n\nfun fullTile(charToPrint: Char = 'X'): Tile {\n    return Tile(charToPrint, charToPrint, charToPrint, charToPrint)\n}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 18;",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sourceRoot":""}